/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna
 * <p/>
 * This program is free software: you can redistribute it and/or modify it under the terms of
 * the GNU Affero General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 * <p/>
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 * <p/>
 * You should have received a copy of the GNU Affero General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package it.eng.parer.job.tpi.helper;

import it.eng.parer.entity.TpiDtSched;
import it.eng.parer.entity.TpiSchedJob;
import it.eng.parer.informazioni.noteRilascio.helper.NoteRilascioHelperTest;
import it.eng.parer.job.utils.JobConstants;

import it.eng.parer.web.helper.HelperTest;
import it.eng.tpi.bean.Esito;
import it.eng.tpi.bean.Job;
import it.eng.tpi.bean.SchedulazioniJobTPIRisposta;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.shrinkwrap.api.Archive;
import org.junit.Test;

/**
 * @author manuel.bertuzzi@eng.it
 */

import org.junit.runner.RunWith;
import static it.eng.ArquillianUtils.*;
import it.eng.ArquillianUtils;
import org.jboss.arquillian.junit.Arquillian;
import javax.ejb.EJB;

@RunWith(Arquillian.class)
public class RegistraSchedulazioniJobTPIHelperTest {
    @EJB
    private RegistraSchedulazioniJobTPIHelper helper;

    @Deployment
    public static Archive<?> createTestArchive() {
        return HelperTest.createEnterpriseArchive(RegistraSchedulazioniJobTPIHelperTest.class.getSimpleName(),
                HelperTest.createSacerLogJar(), HelperTest.createPaginatorJavaArchive(),
                HelperTest.createSacerJavaArchive(Arrays.asList(""), RegistraSchedulazioniJobTPIHelperTest.class,
                        RegistraSchedulazioniJobTPIHelper.class, SchedulazioniJobTPIRisposta.class, Job.class,
                        JobConstants.class, Esito.class));
    }

    @Test
    public void findLastDaySched_queryIsOk() {

        helper.findLastDaySched();
        assertTrue(true);
    }

    private void assertTrue(boolean b) {
    }

    @Test
    public void getTpiDtSchedbyStatus_queryIsOk() {
        String status = aString();

        helper.getTpiDtSchedbyStatus(status);
        assertTrue(true);
    }

    @Test
    public void creaDataRegistrata_queryIsOk() {
        try {
            Date date = todayTs();
            helper.creaDataRegistrata(date);
        } catch (Exception e) {
            assertNoAutogeneratedSequence(e);
        }
    }

    @Test
    public void handleResp_queryIsOk() {
        SchedulazioniJobTPIRisposta resp = new SchedulazioniJobTPIRisposta();
        resp.setDtSched(todayTs());
        final Esito esito = new Esito();
        esito.setCdErr(aString());
        esito.setCdEsito(Esito.EsitoServizio.OK);
        esito.setDlErr(aString());
        resp.setEsito(esito);
        resp.setFlMigrazInCorso(aBoolean());
        resp.setFlPresenzaSitoSecondario(aBoolean());
        List listaJob = new ArrayList();
        listaJob.add(aJob());
        resp.setListaJob(listaJob);
        resp.setListaJobSecondario(listaJob);
        Long idDtSched = 2L;
        Date currentDate = todayTs();
        try {
            helper.handleResp(resp, idDtSched, currentDate);
        } catch (Exception e) {
            assertNoAutogeneratedSequence(e);
        }
    }

    private Job aJob() {
        final Job job = new Job();
        job.setDlErrJob(aString());
        job.setDsDurataJob(aString());
        job.setDtSchedJob(todayTs());
        job.setFlFineSched(aBoolean());
        job.setFlJobOk(aBoolean());
        job.setFlMigraz(aBoolean());
        job.setListaErrArk(new ArrayList<>());
        job.setListaPathElab(new ArrayList<>());
        job.setNiOrdSchedJob(1);
        job.setNmJob(aString());
        return job;
    }

    @Test
    public void createJobRecords_queryIsOk() {
        Job job = aJob();
        TpiDtSched dtSched = new TpiDtSched();
        dtSched.setDtSched(todayTs());
        dtSched.setFlMigrazInCorso(aFlag());
        dtSched.setFlPresenzaSecondario(aFlag());
        dtSched.setIdDtSched(aLong());
        dtSched.setTiStatoDtSched(aString());
        List<TpiSchedJob> tpiSchedJobs = new ArrayList<>();
        tpiSchedJobs.add(new TpiSchedJob());
        dtSched.setTpiSchedJobs(tpiSchedJobs);
        String tiTpiSchedJob = aString();

        helper.createJobRecords(job, dtSched, tiTpiSchedJob);
        assertTrue(true);
    }
}
