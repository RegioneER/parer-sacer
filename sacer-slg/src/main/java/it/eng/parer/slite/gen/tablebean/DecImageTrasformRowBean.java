package it.eng.parer.slite.gen.tablebean;

import it.eng.spagoLite.db.base.BaseRowInterface;
import it.eng.spagoLite.db.base.JEEBaseRowInterface;
import it.eng.spagoLite.db.base.row.BaseRow;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;
import org.eclipse.persistence.internal.indirection.DatabaseValueHolder;
import org.eclipse.persistence.internal.sessions.AbstractRecord;
import it.eng.parer.entity.DecImageTrasform;
import it.eng.parer.entity.DecTrasformTipoRappr;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.sql.Clob;
import java.sql.Types;
import java.sql.SQLException;
import javax.annotation.Generated;

/**
 * RowBean per la tabella Dec_Image_Trasform
 *
 */
public class DecImageTrasformRowBean extends BaseRow implements BaseRowInterface, JEEBaseRowInterface {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$TableBeanWriter", comments =
     * "This class was generated by OraTool", date = "Wednesday, 22 October 2014 10:53" )
     */

    public static DecImageTrasformTableDescriptor TABLE_DESCRIPTOR = new DecImageTrasformTableDescriptor();

    public DecImageTrasformRowBean() {
        super();
    }

    public TableDescriptor getTableDescriptor() {
        return TABLE_DESCRIPTOR;
    }

    // getter e setter
    public BigDecimal getIdImageTrasform() {
        return getBigDecimal("id_image_trasform");
    }

    public void setIdImageTrasform(BigDecimal id_image_trasform) {
        setObject("id_image_trasform", id_image_trasform);
    }

    public BigDecimal getIdTrasformTipoRappr() {
        return getBigDecimal("id_trasform_tipo_rappr");
    }

    public void setIdTrasformTipoRappr(BigDecimal id_trasform_tipo_rappr) {
        setObject("id_trasform_tipo_rappr", id_trasform_tipo_rappr);
    }

    public String getNmImageTrasform() {
        return getString("nm_image_trasform");
    }

    public void setNmImageTrasform(String nm_image_trasform) {
        setObject("nm_image_trasform", nm_image_trasform);
    }

    // FIXME: in pratica gestisce i Blob come stringhe, per i blob veri e' da implementare
    public byte[] getBlImageTrasform() {
        return (byte[]) getObject("bl_image_trasform");
    }

    public void setBlImageTrasform(byte[] bl_image_trasform) {
        setObject("bl_image_trasform", bl_image_trasform);
    }

    public Timestamp getDtLastModImageTrasform() {
        return getTimestamp("dt_last_mod_image_trasform");
    }

    public void setDtLastModImageTrasform(Timestamp dt_last_mod_image_trasform) {
        setObject("dt_last_mod_image_trasform", dt_last_mod_image_trasform);
    }

    public Timestamp getDtLastScaricoImageTrasform() {
        return getTimestamp("dt_last_scarico_image_trasform");
    }

    public void setDtLastScaricoImageTrasform(Timestamp dt_last_scarico_image_trasform) {
        setObject("dt_last_scarico_image_trasform", dt_last_scarico_image_trasform);
    }

    @Override
    public void entityToRowBean(Object obj) {
        DecImageTrasform entity = (DecImageTrasform) obj;
        AbstractRecord ar;
        this.setIdImageTrasform(new BigDecimal(entity.getIdImageTrasform()));
        if (entity._persistence_get_decTrasformTipoRappr_vh() instanceof DatabaseValueHolder) {
            if ((ar = ((DatabaseValueHolder) entity._persistence_get_decTrasformTipoRappr_vh()).getRow()) != null) {
                this.setIdTrasformTipoRappr(new BigDecimal((Long) ar.get("DEC_IMAGE_TRASFORM.ID_TRASFORM_TIPO_RAPPR")));
            }
        } else {
            if (entity.getDecTrasformTipoRappr() != null) {
                this.setIdTrasformTipoRappr(new BigDecimal(entity.getDecTrasformTipoRappr().getIdTrasformTipoRappr()));
            }
        }
        this.setNmImageTrasform(entity.getNmImageTrasform());
        byte[] image = entity.getBlImageTrasform();
        if (image != null) {
            this.setBlImageTrasform(image);
        } else {
            this.setBlImageTrasform(null);
        }
        if (entity.getDtLastModImageTrasform() != null) {
            this.setDtLastModImageTrasform(new Timestamp(entity.getDtLastModImageTrasform().getTime()));
        }
        if (entity.getDtLastScaricoImageTrasform() != null) {
            this.setDtLastScaricoImageTrasform(new Timestamp(entity.getDtLastScaricoImageTrasform().getTime()));
        }
    }

    @Override
    public DecImageTrasform rowBeanToEntity() {
        DecImageTrasform entity = new DecImageTrasform();
        if (this.getIdImageTrasform() != null) {
            entity.setIdImageTrasform(this.getIdImageTrasform().longValue());
        }
        if (this.getIdTrasformTipoRappr() != null) {
            if (entity.getDecTrasformTipoRappr() == null) {
                entity.setDecTrasformTipoRappr(new DecTrasformTipoRappr());
            }
            entity.getDecTrasformTipoRappr().setIdTrasformTipoRappr(this.getIdTrasformTipoRappr().longValue());
        }
        entity.setNmImageTrasform(this.getNmImageTrasform());
        byte[] image = this.getBlImageTrasform();
        if (image != null) {
            entity.setBlImageTrasform(image);
        } else {
            entity.setBlImageTrasform(null);
        }
        entity.setDtLastModImageTrasform(this.getDtLastModImageTrasform());
        entity.setDtLastScaricoImageTrasform(this.getDtLastScaricoImageTrasform());
        return entity;
    }

    // gestione della paginazione
    public void setRownum(Integer rownum) {
        setObject("rownum", rownum);
    }

    public Integer getRownum() {
        return Integer.parseInt(getObject("rownum").toString());
    }

    public void setRnum(Integer rnum) {
        setObject("rnum", rnum);
    }

    public Integer getRnum() {
        return Integer.parseInt(getObject("rnum").toString());
    }

    public void setNumrecords(Integer numRecords) {
        setObject("numrecords", numRecords);
    }

    public Integer getNumrecords() {
        return Integer.parseInt(getObject("numrecords").toString());
    }

    /*
     * <Input Type="STRING" Description="Nome completo" Name="nm_completo_image_trasform" MaxLength="100"/> <Input
     * Type="STRING" Description="Path trasformatore" Name="ti_path_trasform" MaxLength="100"/>
     * 
     */

    public String getNmCompletoImageTrasform() {
        return getString("nm_completo_image_trasform");
    }

    public void setNmCompletoImageTrasform(String nm_completo_image_trasform) {
        setObject("nm_completo_image_trasform", nm_completo_image_trasform);
    }

    public String getTiPathTrasform() {
        return getString("ti_path_trasform");
    }

    public void setTiPathTrasform(String ti_path_trasform) {
        setObject("ti_path_trasform", ti_path_trasform);
    }

}
