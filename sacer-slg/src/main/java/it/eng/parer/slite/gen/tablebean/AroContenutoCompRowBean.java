/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna <p/> This program is free software: you can
 * redistribute it and/or modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License, or (at your option)
 * any later version. <p/> This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. <p/> You should
 * have received a copy of the GNU Affero General Public License along with this program. If not,
 * see <https://www.gnu.org/licenses/>.
 */

package it.eng.parer.slite.gen.tablebean;

import java.math.BigDecimal;

import it.eng.parer.entity.AroCompDoc;
import it.eng.parer.entity.AroContenutoComp;
import it.eng.spagoLite.db.base.JEEBaseRowInterface;
import it.eng.spagoLite.db.base.row.BaseRow;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * RowBean per la tabella Aro_Contenuto_Comp
 *
 */
public class AroContenutoCompRowBean extends BaseRow implements JEEBaseRowInterface {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$TableBeanWriter",
     * comments = "This class was generated by OraTool", date = "Tuesday, 11 March 2014 18:25" )
     */
    private static final long serialVersionUID = 1L;

    public static AroContenutoCompTableDescriptor TABLE_DESCRIPTOR = new AroContenutoCompTableDescriptor();

    public AroContenutoCompRowBean() {
	super();
    }

    public TableDescriptor getTableDescriptor() {
	return TABLE_DESCRIPTOR;
    }

    // getter e setter
    public BigDecimal getIdContenComp() {
	return getBigDecimal("id_conten_comp");
    }

    public void setIdContenComp(BigDecimal idContenComp) {
	setObject("id_conten_comp", idContenComp);
    }

    public BigDecimal getIdCompStrutDoc() {
	return getBigDecimal("id_comp_strut_doc");
    }

    public void setIdCompStrutDoc(BigDecimal idCompStrutDoc) {
	setObject("id_comp_strut_doc", idCompStrutDoc);
    }

    // FIXME: in pratica gestisce i Blob come stringhe, per i blob veri e' da implementare
    public String getBlContenComp() {
	return getString("bl_conten_comp");
    }

    public void setBlContenComp(String blContenComp) {
	setObject("bl_conten_comp", blContenComp);
    }

    public BigDecimal getIdStrut() {
	return getBigDecimal("id_strut");
    }

    public void setIdStrut(BigDecimal idStrut) {
	setObject("id_strut", idStrut);
    }

    public BigDecimal getAaKeyUnitaDoc() {
	return getBigDecimal("aa_key_unita_doc");
    }

    public void setAaKeyUnitaDoc(BigDecimal aaKeyUnitaDoc) {
	setObject("aa_key_unita_doc", aaKeyUnitaDoc);
    }

    @Override
    public void entityToRowBean(Object obj) {
	AroContenutoComp entity = (AroContenutoComp) obj;
	this.setIdContenComp(entity.getIdContenComp() == null ? null
		: BigDecimal.valueOf(entity.getIdContenComp()));

	if (entity.getAroCompDoc() != null) {
	    this.setIdCompStrutDoc(new BigDecimal(entity.getAroCompDoc().getIdCompDoc()));
	}

	this.setBlContenComp(new String(entity.getBlContenComp()));
	this.setIdStrut(entity.getIdStrut());
	this.setAaKeyUnitaDoc(entity.getAaKeyUnitaDoc());
    }

    @Override
    public AroContenutoComp rowBeanToEntity() {
	AroContenutoComp entity = new AroContenutoComp();
	if (this.getIdContenComp() != null) {
	    entity.setIdContenComp(this.getIdContenComp().longValue());
	}
	if (this.getIdCompStrutDoc() != null) {
	    if (entity.getAroCompDoc() == null) {
		entity.setAroCompDoc(new AroCompDoc());
	    }
	    entity.getAroCompDoc().setIdCompDoc(this.getIdCompStrutDoc().longValue());
	}
	entity.setBlContenComp(this.getBlContenComp().getBytes());
	entity.setIdStrut(this.getIdStrut());
	entity.setAaKeyUnitaDoc(this.getAaKeyUnitaDoc());
	return entity;
    }

    // gestione della paginazione
    public void setRownum(Integer rownum) {
	setObject("rownum", rownum);
    }

    public Integer getRownum() {
	return Integer.parseInt(getObject("rownum").toString());
    }

    public void setRnum(Integer rnum) {
	setObject("rnum", rnum);
    }

    public Integer getRnum() {
	return Integer.parseInt(getObject("rnum").toString());
    }

    public void setNumrecords(Integer numRecords) {
	setObject("numrecords", numRecords);
    }

    public Integer getNumrecords() {
	return Integer.parseInt(getObject("numrecords").toString());
    }

}
