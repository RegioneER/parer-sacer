/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna
 * <p/>
 * This program is free software: you can redistribute it and/or modify it under the terms of
 * the GNU Affero General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 * <p/>
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 * <p/>
 * You should have received a copy of the GNU Affero General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

package it.eng.parer.slite.gen.viewbean;

import static it.eng.parer.slite.gen.tablebean.FasFascicoloTableDescriptor.COL_DS_INFO_CONSERVAZIONE;
import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.annotation.Generated;

/**
 * @author Sloth
 *
 *         Bean per la tabella Fas_V_Vis_Fascicolo
 *
 */
public class FasVVisFascicoloTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$ViewBeanWriter", comments =
     * "This class was generated by OraTool", date = "Friday, 1 December 2023 11:03" )
     */

    public static final String SELECT = "Select * from Fas_V_Vis_Fascicolo /**/";
    public static final String TABLE_NAME = "Fas_V_Vis_Fascicolo";
    public static final String COL_NM_AMBIENTE = "nm_ambiente";
    public static final String COL_NM_ENTE = "nm_ente";
    public static final String COL_NM_STRUT = "nm_strut";
    public static final String COL_NM_AMBIENTE_ENTE_CONVENZ = "nm_ambiente_ente_convenz";
    public static final String COL_CD_ENTE_CONVENZ = "cd_ente_convenz";
    public static final String COL_NM_ENTE_CONVENZ = "nm_ente_convenz";
    public static final String COL_ID_FASCICOLO = "id_fascicolo";
    public static final String COL_AA_FASCICOLO = "aa_fascicolo";
    public static final String COL_CD_KEY_FASCICOLO = "cd_key_fascicolo";
    public static final String COL_ID_TIPO_FASCICOLO = "id_tipo_fascicolo";
    public static final String COL_NM_TIPO_FASCICOLO = "nm_tipo_fascicolo";
    public static final String COL_DS_OGGETTO_FASCICOLO = "ds_oggetto_fascicolo";
    public static final String COL_DT_APE_FASCICOLO = "dt_ape_fascicolo";
    public static final String COL_DT_CHIU_FASCICOLO = "dt_chiu_fascicolo";
    public static final String COL_CD_IPA_AMMIN_TITOL = "cd_ipa_ammin_titol";
    public static final String COL_TI_CODICE_AMMIN_TITOL = "ti_codice_ammin_titol";
    public static final String COL_DS_AMMIN_TITOL = "ds_ammin_titol";
    public static final String COL_CD_PROC_AMMIN = "cd_proc_ammin";
    public static final String COL_DS_PROC_AMMIN = "ds_proc_ammin";
    public static final String COL_NI_AA_CONSERVAZIONE = "ni_aa_conservazione";
    public static final String COL_CD_LIVELLO_RISERV = "cd_livello_riserv";
    public static final String COL_TS_INI_SES = "ts_ini_ses";
    public static final String COL_TI_STATO_CONSERVAZIONE = "ti_stato_conservazione";
    public static final String COL_TI_STATO_FASC_ELENCO_VERS = "ti_stato_fasc_elenco_vers";
    public static final String COL_ID_VOCE_TITOL = "id_voce_titol";
    public static final String COL_CD_COMPOSITO_VOCE_TITOL = "cd_composito_voce_titol";
    public static final String COL_AA_FASCICOLO_PADRE = "aa_fascicolo_padre";
    public static final String COL_CD_KEY_FASCICOLO_PADRE = "cd_key_fascicolo_padre";
    public static final String COL_DS_OGGETTO_FASCICOLO_PADRE = "ds_oggetto_fascicolo_padre";
    public static final String COL_CD_REG_KEY_UNITA_DOC_FIRST = "cd_reg_key_unita_doc_first";
    public static final String COL_AA_KEY_UNITA_DOC_FIRST = "aa_key_unita_doc_first";
    public static final String COL_CD_KEY_UNITA_DOC_FIRST = "cd_key_unita_doc_first";
    public static final String COL_CD_REG_KEY_UNITA_DOC_LAST = "cd_reg_key_unita_doc_last";
    public static final String COL_AA_KEY_UNITA_DOC_LAST = "aa_key_unita_doc_last";
    public static final String COL_CD_KEY_UNITA_DOC_LAST = "cd_key_unita_doc_last";
    public static final String COL_NI_UNITA_DOC = "ni_unita_doc";
    public static final String COL_FL_UPD_ANNUL_UNITA_DOC = "fl_upd_annul_unita_doc";
    public static final String COL_FL_UPD_MODIF_UNITA_DOC = "fl_upd_modif_unita_doc";
    public static final String COL_DS_NOTA = "ds_nota";
    public static final String COL_CD_VERSIONE_XML_SIP = "cd_versione_xml_sip";
    public static final String COL_CD_VERSIONE_XML_RAPP = "cd_versione_xml_rapp";
    public static final String COL_ID_USER_IAM_VERS = "id_user_iam_vers";
    public static final String COL_NM_USERID = "nm_userid";
    public static final String COL_ID_SISTEMA_VERSANTE = "id_sistema_versante";
    public static final String COL_NM_SISTEMA_VERSANTE = "nm_sistema_versante";
    public static final String COL_CD_IND_IP_CLIENT = "cd_ind_ip_client";
    public static final String COL_CD_IND_SERVER = "cd_ind_server";
    public static final String COL_TI_CONSERVAZIONE = "ti_conservazione";
    public static final String COL_TI_MODELLO_XSD_PROFILO = "ti_modello_xsd_profilo";
    public static final String COL_TI_MODELLO_XSD_SEGNATURA = "ti_modello_xsd_segnatura";
    public static final String COL_TI_MODELLO_XSD_NORMATIVO = "ti_modello_xsd_normativo";
    public static final String COL_TI_MODELLO_XSD_SPECIFICO = "ti_modello_xsd_specifico";
    public static final String COL_FL_FORZA_CONTR_CLASSIF = "fl_forza_contr_classif";
    public static final String COL_FL_FORZA_CONTR_NUMERO = "fl_forza_contr_numero";
    public static final String COL_FL_FORZA_CONTR_COLLEG = "fl_forza_contr_colleg";
    public static final String COL_BL_XML_VERS_SIP = "bl_xml_vers_sip";
    public static final String COL_DS_HASH_XML_SIP = "ds_hash_xml_sip";
    public static final String COL_DS_ALGO_HASH_XML_SIP = "ds_algo_hash_xml_sip";
    public static final String COL_CD_ENCODING_HASH_XML_SIP = "cd_encoding_hash_xml_sip";
    public static final String COL_DS_URN_XML_SIP = "ds_urn_xml_sip";
    public static final String COL_BL_XML_VERS_RAPP = "bl_xml_vers_rapp";
    public static final String COL_DS_HASH_XML_RAPP = "ds_hash_xml_rapp";
    public static final String COL_DS_ALGO_HASH_XML_RAPP = "ds_algo_hash_xml_rapp";
    public static final String COL_CD_ENCODING_HASH_XML_RAPP = "cd_encoding_hash_xml_rapp";
    public static final String COL_DS_URN_XML_RAPP = "ds_urn_xml_rapp";
    public static final String COL_BL_XML_VERS_PROFILO = "bl_xml_vers_profilo";
    public static final String COL_BL_XSD_VERS_PROFILO = "bl_xsd_vers_profilo";
    public static final String COL_CD_XSD_PROFILO = "cd_xsd_profilo";
    public static final String COL_DS_XSD_PROFILO = "ds_xsd_profilo";
    public static final String COL_FL_DEFAULT_PROFILO = "fl_default_profilo";
    public static final String COL_BL_XML_SEGNATURA = "bl_xml_segnatura";
    public static final String COL_BL_XSD_SEGNATURA = "bl_xsd_segnatura";
    public static final String COL_CD_XSD_SEGNATURA = "cd_xsd_segnatura";
    public static final String COL_DS_XSD_SEGNATURA = "ds_xsd_segnatura";
    public static final String COL_FL_DEFAULT_SEGNATURA = "fl_default_segnatura";
    public static final String COL_BL_XML_NORMATIVO = "bl_xml_normativo";
    public static final String COL_BL_XSD_NORMATIVO = "bl_xsd_normativo";
    public static final String COL_CD_XSD_NORMATIVO = "cd_xsd_normativo";
    public static final String COL_DS_XSD_NORMATIVO = "ds_xsd_normativo";
    public static final String COL_FL_DEFAULT_NORMATIVO = "fl_default_normativo";
    public static final String COL_BL_XML_SPECIFICO = "bl_xml_specifico";
    public static final String COL_ID_MODELLO_XSD_PROFILO = "id_modello_xsd_profilo";
    public static final String COL_ID_MODELLO_XSD_SEGNATURA = "id_modello_xsd_segnatura";
    public static final String COL_ID_MODELLO_XSD_NORMATIVO = "id_modello_xsd_normativo";
    public static final String COL_ID_MODELLO_XSD_SPECIFICO = "id_modello_xsd_specifico";
    public static final String COL_BL_XSD_SPECIFICO = "bl_xsd_specifico";
    public static final String COL_CD_XSD_SPECIFICO = "cd_xsd_specifico";
    public static final String COL_DS_XSD_SPECIFICO = "ds_xsd_specifico";
    public static final String COL_CD_INDICE_CLASSIF = "cd_indice_classif";
    public static final String COL_DS_INDICE_CLASSIF = "ds_indice_classif";
    public static final String COL_DS_INFO_CONSERVAZIONE = "ds_info_conservazione";
    public static final String COL_FL_DEFAULT_SPECIFICO = "fl_default_specifico";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
        map.put(COL_NM_AMBIENTE, new ColumnDescriptor(COL_NM_AMBIENTE, Types.VARCHAR, 100, true));
        map.put(COL_NM_ENTE, new ColumnDescriptor(COL_NM_ENTE, Types.VARCHAR, 100, true));
        map.put(COL_NM_STRUT, new ColumnDescriptor(COL_NM_STRUT, Types.VARCHAR, 100, true));
        map.put(COL_NM_AMBIENTE_ENTE_CONVENZ,
                new ColumnDescriptor(COL_NM_AMBIENTE_ENTE_CONVENZ, Types.VARCHAR, 100, true));
        map.put(COL_CD_ENTE_CONVENZ, new ColumnDescriptor(COL_CD_ENTE_CONVENZ, Types.VARCHAR, 100, true));
        map.put(COL_NM_ENTE_CONVENZ, new ColumnDescriptor(COL_NM_ENTE_CONVENZ, Types.VARCHAR, 254, true));
        map.put(COL_ID_FASCICOLO, new ColumnDescriptor(COL_ID_FASCICOLO, Types.DECIMAL, 22, true));
        map.put(COL_AA_FASCICOLO, new ColumnDescriptor(COL_AA_FASCICOLO, Types.DECIMAL, 22, true));
        map.put(COL_CD_KEY_FASCICOLO, new ColumnDescriptor(COL_CD_KEY_FASCICOLO, Types.VARCHAR, 100, true));
        map.put(COL_ID_TIPO_FASCICOLO, new ColumnDescriptor(COL_ID_TIPO_FASCICOLO, Types.DECIMAL, 22, true));
        map.put(COL_NM_TIPO_FASCICOLO, new ColumnDescriptor(COL_NM_TIPO_FASCICOLO, Types.VARCHAR, 100, true));
        map.put(COL_DS_OGGETTO_FASCICOLO, new ColumnDescriptor(COL_DS_OGGETTO_FASCICOLO, Types.VARCHAR, 4000, true));
        map.put(COL_DT_APE_FASCICOLO, new ColumnDescriptor(COL_DT_APE_FASCICOLO, Types.TIMESTAMP, 7, true));
        map.put(COL_DT_CHIU_FASCICOLO, new ColumnDescriptor(COL_DT_CHIU_FASCICOLO, Types.TIMESTAMP, 7, true));
        map.put(COL_CD_IPA_AMMIN_TITOL, new ColumnDescriptor(COL_CD_IPA_AMMIN_TITOL, Types.VARCHAR, 100, true));
        map.put(COL_TI_CODICE_AMMIN_TITOL, new ColumnDescriptor(COL_TI_CODICE_AMMIN_TITOL, Types.VARCHAR, 20, true));
        map.put(COL_DS_AMMIN_TITOL, new ColumnDescriptor(COL_DS_AMMIN_TITOL, Types.VARCHAR, 254, true));
        map.put(COL_CD_PROC_AMMIN, new ColumnDescriptor(COL_CD_PROC_AMMIN, Types.VARCHAR, 100, true));
        map.put(COL_DS_PROC_AMMIN, new ColumnDescriptor(COL_DS_PROC_AMMIN, Types.VARCHAR, 100, true));
        map.put(COL_NI_AA_CONSERVAZIONE, new ColumnDescriptor(COL_NI_AA_CONSERVAZIONE, Types.DECIMAL, 22, true));
        map.put(COL_CD_LIVELLO_RISERV, new ColumnDescriptor(COL_CD_LIVELLO_RISERV, Types.VARCHAR, 100, true));
        map.put(COL_TS_INI_SES, new ColumnDescriptor(COL_TS_INI_SES, Types.TIMESTAMP, 11, true));
        map.put(COL_TI_STATO_CONSERVAZIONE, new ColumnDescriptor(COL_TI_STATO_CONSERVAZIONE, Types.VARCHAR, 30, true));
        map.put(COL_TI_STATO_FASC_ELENCO_VERS,
                new ColumnDescriptor(COL_TI_STATO_FASC_ELENCO_VERS, Types.VARCHAR, 50, true));
        map.put(COL_ID_VOCE_TITOL, new ColumnDescriptor(COL_ID_VOCE_TITOL, Types.DECIMAL, 22, true));
        map.put(COL_CD_COMPOSITO_VOCE_TITOL,
                new ColumnDescriptor(COL_CD_COMPOSITO_VOCE_TITOL, Types.VARCHAR, 100, true));
        map.put(COL_AA_FASCICOLO_PADRE, new ColumnDescriptor(COL_AA_FASCICOLO_PADRE, Types.DECIMAL, 22, true));
        map.put(COL_CD_KEY_FASCICOLO_PADRE, new ColumnDescriptor(COL_CD_KEY_FASCICOLO_PADRE, Types.VARCHAR, 100, true));
        map.put(COL_DS_OGGETTO_FASCICOLO_PADRE,
                new ColumnDescriptor(COL_DS_OGGETTO_FASCICOLO_PADRE, Types.VARCHAR, 4000, true));
        map.put(COL_CD_REG_KEY_UNITA_DOC_FIRST,
                new ColumnDescriptor(COL_CD_REG_KEY_UNITA_DOC_FIRST, Types.VARCHAR, 100, true));
        map.put(COL_AA_KEY_UNITA_DOC_FIRST, new ColumnDescriptor(COL_AA_KEY_UNITA_DOC_FIRST, Types.DECIMAL, 22, true));
        map.put(COL_CD_KEY_UNITA_DOC_FIRST, new ColumnDescriptor(COL_CD_KEY_UNITA_DOC_FIRST, Types.VARCHAR, 100, true));
        map.put(COL_CD_REG_KEY_UNITA_DOC_LAST,
                new ColumnDescriptor(COL_CD_REG_KEY_UNITA_DOC_LAST, Types.VARCHAR, 100, true));
        map.put(COL_AA_KEY_UNITA_DOC_LAST, new ColumnDescriptor(COL_AA_KEY_UNITA_DOC_LAST, Types.DECIMAL, 22, true));
        map.put(COL_CD_KEY_UNITA_DOC_LAST, new ColumnDescriptor(COL_CD_KEY_UNITA_DOC_LAST, Types.VARCHAR, 100, true));
        map.put(COL_NI_UNITA_DOC, new ColumnDescriptor(COL_NI_UNITA_DOC, Types.DECIMAL, 22, true));
        map.put(COL_FL_UPD_ANNUL_UNITA_DOC, new ColumnDescriptor(COL_FL_UPD_ANNUL_UNITA_DOC, Types.VARCHAR, 1, true));
        map.put(COL_FL_UPD_MODIF_UNITA_DOC, new ColumnDescriptor(COL_FL_UPD_MODIF_UNITA_DOC, Types.VARCHAR, 1, true));
        map.put(COL_DS_NOTA, new ColumnDescriptor(COL_DS_NOTA, Types.VARCHAR, 4000, true));
        map.put(COL_CD_VERSIONE_XML_SIP, new ColumnDescriptor(COL_CD_VERSIONE_XML_SIP, Types.VARCHAR, 100, true));
        map.put(COL_CD_VERSIONE_XML_RAPP, new ColumnDescriptor(COL_CD_VERSIONE_XML_RAPP, Types.VARCHAR, 100, true));
        map.put(COL_ID_USER_IAM_VERS, new ColumnDescriptor(COL_ID_USER_IAM_VERS, Types.DECIMAL, 22, true));
        map.put(COL_NM_USERID, new ColumnDescriptor(COL_NM_USERID, Types.VARCHAR, 100, true));
        map.put(COL_ID_SISTEMA_VERSANTE, new ColumnDescriptor(COL_ID_SISTEMA_VERSANTE, Types.DECIMAL, 22, true));
        map.put(COL_NM_SISTEMA_VERSANTE, new ColumnDescriptor(COL_NM_SISTEMA_VERSANTE, Types.VARCHAR, 100, true));
        map.put(COL_CD_IND_IP_CLIENT, new ColumnDescriptor(COL_CD_IND_IP_CLIENT, Types.VARCHAR, 100, true));
        map.put(COL_CD_IND_SERVER, new ColumnDescriptor(COL_CD_IND_SERVER, Types.VARCHAR, 100, true));
        map.put(COL_TI_CONSERVAZIONE, new ColumnDescriptor(COL_TI_CONSERVAZIONE, Types.VARCHAR, 30, true));
        map.put(COL_TI_MODELLO_XSD_PROFILO, new ColumnDescriptor(COL_TI_MODELLO_XSD_PROFILO, Types.VARCHAR, 30, true));
        map.put(COL_TI_MODELLO_XSD_SEGNATURA,
                new ColumnDescriptor(COL_TI_MODELLO_XSD_SEGNATURA, Types.VARCHAR, 30, true));
        map.put(COL_TI_MODELLO_XSD_NORMATIVO,
                new ColumnDescriptor(COL_TI_MODELLO_XSD_NORMATIVO, Types.VARCHAR, 30, true));
        map.put(COL_TI_MODELLO_XSD_SPECIFICO,
                new ColumnDescriptor(COL_TI_MODELLO_XSD_SPECIFICO, Types.VARCHAR, 30, true));
        map.put(COL_FL_FORZA_CONTR_CLASSIF, new ColumnDescriptor(COL_FL_FORZA_CONTR_CLASSIF, Types.VARCHAR, 1, true));
        map.put(COL_FL_FORZA_CONTR_NUMERO, new ColumnDescriptor(COL_FL_FORZA_CONTR_NUMERO, Types.VARCHAR, 1, true));
        map.put(COL_FL_FORZA_CONTR_COLLEG, new ColumnDescriptor(COL_FL_FORZA_CONTR_COLLEG, Types.VARCHAR, 1, true));
        map.put(COL_BL_XML_VERS_SIP, new ColumnDescriptor(COL_BL_XML_VERS_SIP, Types.CLOB, 4000, true));
        map.put(COL_DS_HASH_XML_SIP, new ColumnDescriptor(COL_DS_HASH_XML_SIP, Types.VARCHAR, 254, true));
        map.put(COL_DS_ALGO_HASH_XML_SIP, new ColumnDescriptor(COL_DS_ALGO_HASH_XML_SIP, Types.VARCHAR, 254, true));
        map.put(COL_CD_ENCODING_HASH_XML_SIP,
                new ColumnDescriptor(COL_CD_ENCODING_HASH_XML_SIP, Types.VARCHAR, 100, true));
        map.put(COL_DS_URN_XML_SIP, new ColumnDescriptor(COL_DS_URN_XML_SIP, Types.VARCHAR, 254, true));
        map.put(COL_BL_XML_VERS_RAPP, new ColumnDescriptor(COL_BL_XML_VERS_RAPP, Types.CLOB, 4000, true));
        map.put(COL_DS_HASH_XML_RAPP, new ColumnDescriptor(COL_DS_HASH_XML_RAPP, Types.VARCHAR, 254, true));
        map.put(COL_DS_ALGO_HASH_XML_RAPP, new ColumnDescriptor(COL_DS_ALGO_HASH_XML_RAPP, Types.VARCHAR, 254, true));
        map.put(COL_CD_ENCODING_HASH_XML_RAPP,
                new ColumnDescriptor(COL_CD_ENCODING_HASH_XML_RAPP, Types.VARCHAR, 100, true));
        map.put(COL_DS_URN_XML_RAPP, new ColumnDescriptor(COL_DS_URN_XML_RAPP, Types.VARCHAR, 254, true));
        map.put(COL_BL_XML_VERS_PROFILO, new ColumnDescriptor(COL_BL_XML_VERS_PROFILO, Types.CLOB, 4000, true));
        map.put(COL_BL_XSD_VERS_PROFILO, new ColumnDescriptor(COL_BL_XSD_VERS_PROFILO, Types.CLOB, 4000, true));
        map.put(COL_CD_XSD_PROFILO, new ColumnDescriptor(COL_CD_XSD_PROFILO, Types.VARCHAR, 100, true));
        map.put(COL_DS_XSD_PROFILO, new ColumnDescriptor(COL_DS_XSD_PROFILO, Types.VARCHAR, 254, true));
        map.put(COL_FL_DEFAULT_PROFILO, new ColumnDescriptor(COL_FL_DEFAULT_PROFILO, Types.VARCHAR, 1, true));
        map.put(COL_BL_XML_SEGNATURA, new ColumnDescriptor(COL_BL_XML_SEGNATURA, Types.CLOB, 4000, true));
        map.put(COL_BL_XSD_SEGNATURA, new ColumnDescriptor(COL_BL_XSD_SEGNATURA, Types.CLOB, 4000, true));
        map.put(COL_CD_XSD_SEGNATURA, new ColumnDescriptor(COL_CD_XSD_SEGNATURA, Types.VARCHAR, 100, true));
        map.put(COL_DS_XSD_SEGNATURA, new ColumnDescriptor(COL_DS_XSD_SEGNATURA, Types.VARCHAR, 254, true));
        map.put(COL_FL_DEFAULT_SEGNATURA, new ColumnDescriptor(COL_FL_DEFAULT_SEGNATURA, Types.VARCHAR, 1, true));
        map.put(COL_BL_XML_NORMATIVO, new ColumnDescriptor(COL_BL_XML_NORMATIVO, Types.CLOB, 4000, true));
        map.put(COL_BL_XSD_NORMATIVO, new ColumnDescriptor(COL_BL_XSD_NORMATIVO, Types.CLOB, 4000, true));
        map.put(COL_CD_XSD_NORMATIVO, new ColumnDescriptor(COL_CD_XSD_NORMATIVO, Types.VARCHAR, 100, true));
        map.put(COL_DS_XSD_NORMATIVO, new ColumnDescriptor(COL_DS_XSD_NORMATIVO, Types.VARCHAR, 254, true));
        map.put(COL_FL_DEFAULT_NORMATIVO, new ColumnDescriptor(COL_FL_DEFAULT_NORMATIVO, Types.VARCHAR, 1, true));
        map.put(COL_BL_XML_SPECIFICO, new ColumnDescriptor(COL_BL_XML_SPECIFICO, Types.CLOB, 4000, true));
        map.put(COL_ID_MODELLO_XSD_PROFILO, new ColumnDescriptor(COL_ID_MODELLO_XSD_PROFILO, Types.DECIMAL, 22, true));
        map.put(COL_ID_MODELLO_XSD_SEGNATURA,
                new ColumnDescriptor(COL_ID_MODELLO_XSD_SEGNATURA, Types.DECIMAL, 22, true));
        map.put(COL_ID_MODELLO_XSD_NORMATIVO,
                new ColumnDescriptor(COL_ID_MODELLO_XSD_NORMATIVO, Types.DECIMAL, 22, true));
        map.put(COL_ID_MODELLO_XSD_SPECIFICO,
                new ColumnDescriptor(COL_ID_MODELLO_XSD_SPECIFICO, Types.DECIMAL, 22, true));
        map.put(COL_BL_XSD_SPECIFICO, new ColumnDescriptor(COL_BL_XSD_SPECIFICO, Types.CLOB, 4000, true));
        map.put(COL_CD_XSD_SPECIFICO, new ColumnDescriptor(COL_CD_XSD_SPECIFICO, Types.VARCHAR, 100, true));
        map.put(COL_DS_XSD_SPECIFICO, new ColumnDescriptor(COL_DS_XSD_SPECIFICO, Types.VARCHAR, 254, true));
        map.put(COL_FL_DEFAULT_SPECIFICO, new ColumnDescriptor(COL_FL_DEFAULT_SPECIFICO, Types.VARCHAR, 1, true));
        map.put(COL_CD_INDICE_CLASSIF, new ColumnDescriptor(COL_CD_INDICE_CLASSIF, Types.VARCHAR, 100, true));
        map.put(COL_DS_INDICE_CLASSIF, new ColumnDescriptor(COL_DS_INDICE_CLASSIF, Types.VARCHAR, 254, true));
        map.put(COL_DS_INFO_CONSERVAZIONE, new ColumnDescriptor(COL_DS_INFO_CONSERVAZIONE, Types.VARCHAR, 1024, false));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
        return map;
    }

    public String getTableName() {
        return TABLE_NAME;
    }

    public String getStatement() {
        return SELECT;
    }

}
