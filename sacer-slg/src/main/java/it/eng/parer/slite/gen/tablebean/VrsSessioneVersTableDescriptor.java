package it.eng.parer.slite.gen.tablebean;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.annotation.Generated;

/**
 * @author Sloth
 *
 *         Bean per la tabella Vrs_Sessione_Vers
 *
 */
public class VrsSessioneVersTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$TableBeanWriter", comments =
     * "This class was generated by OraTool", date = "Tuesday, 11 March 2014 18:25" )
     */

    public static final String SELECT = "Select * from Vrs_Sessione_Vers /**/";
    public static final String TABLE_NAME = "Vrs_Sessione_Vers";
    public static final String COL_ID_SESSIONE_VERS = "id_sessione_vers";
    public static final String COL_ID_USER = "id_user";
    public static final String COL_DT_APERTURA = "dt_apertura";
    public static final String COL_DT_CHIUSURA = "dt_chiusura";
    public static final String COL_TI_SESSIONE_VERS = "ti_sessione_vers";
    public static final String COL_TI_STATO_SESSIONE_VERS = "ti_stato_sessione_vers";
    public static final String COL_ID_STRUT = "id_strut";
    public static final String COL_CD_REGISTRO_KEY_UNITA_DOC = "cd_registro_key_unita_doc";
    public static final String COL_AA_KEY_UNITA_DOC = "aa_key_unita_doc";
    public static final String COL_CD_KEY_UNITA_DOC = "cd_key_unita_doc";
    public static final String COL_ID_UNITA_DOC = "id_unita_doc";
    public static final String COL_NM_USERID = "nm_userid";
    public static final String COL_CD_VERSIONE_WS = "cd_versione_ws";
    public static final String COL_NM_AMBIENTE = "nm_ambiente";
    public static final String COL_NM_ENTE = "nm_ente";
    public static final String COL_NM_STRUT = "nm_strut";
    public static final String COL_CD_KEY_DOC_VERS = "cd_key_doc_vers";
    public static final String COL_ID_DOC = "id_doc";
    public static final String COL_FL_SESSIONE_ERR_VERIF = "fl_sessione_err_verif";
    public static final String COL_NM_USERID_WS = "nm_userid_ws";
    public static final String COL_FL_SESSIONE_ERR_NON_RISOLUB = "fl_sessione_err_non_risolub";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
        map.put(COL_ID_SESSIONE_VERS, new ColumnDescriptor(COL_ID_SESSIONE_VERS, Types.DECIMAL, 22, true));
        map.put(COL_ID_USER, new ColumnDescriptor(COL_ID_USER, Types.DECIMAL, 22, false));
        map.put(COL_DT_APERTURA, new ColumnDescriptor(COL_DT_APERTURA, Types.TIMESTAMP, 7, false));
        map.put(COL_DT_CHIUSURA, new ColumnDescriptor(COL_DT_CHIUSURA, Types.TIMESTAMP, 7, false));
        map.put(COL_TI_SESSIONE_VERS, new ColumnDescriptor(COL_TI_SESSIONE_VERS, Types.VARCHAR, 20, false));
        map.put(COL_TI_STATO_SESSIONE_VERS, new ColumnDescriptor(COL_TI_STATO_SESSIONE_VERS, Types.VARCHAR, 20, false));
        map.put(COL_ID_STRUT, new ColumnDescriptor(COL_ID_STRUT, Types.DECIMAL, 22, false));
        map.put(COL_CD_REGISTRO_KEY_UNITA_DOC,
                new ColumnDescriptor(COL_CD_REGISTRO_KEY_UNITA_DOC, Types.VARCHAR, 100, false));
        map.put(COL_AA_KEY_UNITA_DOC, new ColumnDescriptor(COL_AA_KEY_UNITA_DOC, Types.DECIMAL, 22, false));
        map.put(COL_CD_KEY_UNITA_DOC, new ColumnDescriptor(COL_CD_KEY_UNITA_DOC, Types.VARCHAR, 100, false));
        map.put(COL_ID_UNITA_DOC, new ColumnDescriptor(COL_ID_UNITA_DOC, Types.DECIMAL, 22, false));
        map.put(COL_NM_USERID, new ColumnDescriptor(COL_NM_USERID, Types.VARCHAR, 100, false));
        map.put(COL_CD_VERSIONE_WS, new ColumnDescriptor(COL_CD_VERSIONE_WS, Types.VARCHAR, 100, false));
        map.put(COL_NM_AMBIENTE, new ColumnDescriptor(COL_NM_AMBIENTE, Types.VARCHAR, 100, false));
        map.put(COL_NM_ENTE, new ColumnDescriptor(COL_NM_ENTE, Types.VARCHAR, 100, false));
        map.put(COL_NM_STRUT, new ColumnDescriptor(COL_NM_STRUT, Types.VARCHAR, 100, false));
        map.put(COL_CD_KEY_DOC_VERS, new ColumnDescriptor(COL_CD_KEY_DOC_VERS, Types.VARCHAR, 100, false));
        map.put(COL_ID_DOC, new ColumnDescriptor(COL_ID_DOC, Types.DECIMAL, 22, false));
        map.put(COL_FL_SESSIONE_ERR_VERIF, new ColumnDescriptor(COL_FL_SESSIONE_ERR_VERIF, Types.VARCHAR, 1, false));
        map.put(COL_NM_USERID_WS, new ColumnDescriptor(COL_NM_USERID_WS, Types.VARCHAR, 100, false));
        map.put(COL_FL_SESSIONE_ERR_NON_RISOLUB,
                new ColumnDescriptor(COL_FL_SESSIONE_ERR_NON_RISOLUB, Types.VARCHAR, 1, false));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
        return map;
    }

    public String getTableName() {
        return TABLE_NAME;
    }

    public String getStatement() {
        return SELECT;
    }

}
