/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna <p/> This program is free software: you can
 * redistribute it and/or modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License, or (at your option)
 * any later version. <p/> This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. <p/> You should
 * have received a copy of the GNU Affero General Public License along with this program. If not,
 * see <https://www.gnu.org/licenses/>.
 */

package it.eng.parer.slite.gen.viewbean;

import java.math.BigDecimal;

import it.eng.parer.viewEntity.MonVChkUdNonversAmb;
import it.eng.parer.viewEntity.MonVChkUdNonversEnte;
import it.eng.parer.viewEntity.MonVChkUdNonversStrut;
import it.eng.spagoLite.db.base.JEEBaseRowInterface;
import it.eng.spagoLite.db.base.row.BaseRow;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * RowBean per la tabella Mon_V_Chk_Ud_Nonvers_Strut
 *
 */
public class MonVChkCntUdNonversRowBean extends BaseRow implements JEEBaseRowInterface {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$ViewBeanWriter",
     * comments = "This class was generated by OraTool", date = "Monday, 20 October 2014 09:49" )
     */
    private static final long serialVersionUID = 1L;

    public static MonVChkCntUdNonversTableDescriptor TABLE_DESCRIPTOR = new MonVChkCntUdNonversTableDescriptor();

    public MonVChkCntUdNonversRowBean() {
	super();
    }

    public TableDescriptor getTableDescriptor() {
	return TABLE_DESCRIPTOR;
    }

    public String getFlUdNonvers() {
	return getString("fl_ud_nonvers");
    }

    public void setFlUdNonvers(String flUdNonvers) {
	setObject("fl_ud_nonvers", flUdNonvers);
    }

    public String getFlUdNonversNoverif() {
	return getString("fl_ud_nonvers_noverif");
    }

    public void setFlUdNonversNoverif(String flUdNonversNoverif) {
	setObject("fl_ud_nonvers_noverif", flUdNonversNoverif);
    }

    public String getFlUdNonversVerif() {
	return getString("fl_ud_nonvers_verif");
    }

    public void setFlUdNonversVerif(String flUdNonversVerif) {
	setObject("fl_ud_nonvers_verif", flUdNonversVerif);
    }

    public String getFlUdNonversNorisolub() {
	return getString("fl_ud_nonvers_norisolub");
    }

    public void setFlUdNonversNorisolub(String flUdNonversNorisolub) {
	setObject("fl_ud_nonvers_norisolub", flUdNonversNorisolub);
    }

    public BigDecimal getNiUdNonvers() {
	return getBigDecimal("ni_ud_nonvers");
    }

    public void setNiUdNonvers(BigDecimal niUdNonvers) {
	setObject("ni_ud_nonvers", niUdNonvers);
    }

    public BigDecimal getNiUdNonversNoverif() {
	return getBigDecimal("ni_ud_nonvers_noverif");
    }

    public void setNiUdNonversNoverif(BigDecimal niUdNonversNoverif) {
	setObject("ni_ud_nonvers_noverif", niUdNonversNoverif);
    }

    public BigDecimal getNiUdNonversVerif() {
	return getBigDecimal("ni_ud_nonvers_verif");
    }

    public void setNiUdNonversVerif(BigDecimal niUdNonversVerif) {
	setObject("ni_ud_nonvers_verif", niUdNonversVerif);
    }

    public BigDecimal getNiUdNonversNorisolub() {
	return getBigDecimal("ni_ud_nonvers_norisolub");
    }

    public void setNiUdNonversNorisolub(BigDecimal niUdNonversNorisolub) {
	setObject("ni_ud_nonvers_norisolub", niUdNonversNorisolub);
    }

    @Override
    public void entityToRowBean(Object obj) {
	MonVChkUdNonvers entity;
	if (obj instanceof MonVChkUdNonversStrut) {
	    entity = new MonVChkUdNonvers((MonVChkUdNonversStrut) obj);
	} else if (obj instanceof MonVChkUdNonversEnte) {
	    entity = new MonVChkUdNonvers((MonVChkUdNonversEnte) obj);
	} else if (obj instanceof MonVChkUdNonversAmb) {
	    entity = new MonVChkUdNonvers((MonVChkUdNonversAmb) obj);
	} else {
	    throw new IllegalArgumentException("Errore inaspettato nel casting dell'entity");
	}
	this.setFlUdNonversNoverif(entity.getFlUdNonversNoverif());
	this.setFlUdNonversVerif(entity.getFlUdNonversVerif());
	this.setFlUdNonversNorisolub(entity.getFlUdNonversNorisolub());
	this.setFlUdNonvers(entity.getFlUdNonvers());
    }

    @Override
    public MonVChkUdNonvers rowBeanToEntity() {
	MonVChkUdNonvers entity = new MonVChkUdNonvers();
	entity.setFlUdNonvers(this.getFlUdNonvers());
	entity.setFlUdNonversNoverif(this.getFlUdNonversNoverif());
	entity.setFlUdNonversVerif(this.getFlUdNonversVerif());
	entity.setFlUdNonversNorisolub(this.getFlUdNonversNorisolub());
	return entity;
    }

    // gestione della paginazione
    public void setRownum(Integer rownum) {
	setObject("rownum", rownum);
    }

    public Integer getRownum() {
	return Integer.parseInt(getObject("rownum").toString());
    }

    public void setRnum(Integer rnum) {
	setObject("rnum", rnum);
    }

    public Integer getRnum() {
	return Integer.parseInt(getObject("rnum").toString());
    }

    public void setNumrecords(Integer numRecords) {
	setObject("numrecords", numRecords);
    }

    public Integer getNumrecords() {
	return Integer.parseInt(getObject("numrecords").toString());
    }

    public void resetCounters() {
	this.setNiUdNonvers(BigDecimal.ZERO);
	this.setNiUdNonversNorisolub(BigDecimal.ZERO);
	this.setNiUdNonversNoverif(BigDecimal.ZERO);
	this.setNiUdNonversVerif(BigDecimal.ZERO);
    }

    public class MonVChkUdNonvers {

	private String flUdNonversNorisolub;
	private String flUdNonversNoverif;
	private String flUdNonversVerif;
	private String flUdNonvers;

	public MonVChkUdNonvers() {

	}

	public MonVChkUdNonvers(MonVChkUdNonversStrut entity) {
	    this.flUdNonversVerif = entity.getFlUdNonversVerif();
	    this.flUdNonversNoverif = entity.getFlUdNonversNoverif();
	    this.flUdNonversNorisolub = entity.getFlUdNonversNorisolub();
	    boolean udNonVers = entity.getFlUdNonversVerif().equals("1")
		    || entity.getFlUdNonversNoverif().equals("1")
		    || entity.getFlUdNonversNorisolub().equals("1");
	    this.flUdNonvers = (udNonVers ? "1" : "0");
	}

	public MonVChkUdNonvers(MonVChkUdNonversEnte entity) {
	    this.flUdNonversVerif = entity.getFlUdNonversVerif();
	    this.flUdNonversNoverif = entity.getFlUdNonversNoverif();
	    this.flUdNonversNorisolub = entity.getFlUdNonversNorisolub();
	    boolean udNonVers = entity.getFlUdNonversVerif().equals("1")
		    || entity.getFlUdNonversNoverif().equals("1")
		    || entity.getFlUdNonversNorisolub().equals("1");
	    this.flUdNonvers = (udNonVers ? "1" : "0");
	}

	public MonVChkUdNonvers(MonVChkUdNonversAmb entity) {
	    this.flUdNonversVerif = entity.getFlUdNonversVerif();
	    this.flUdNonversNoverif = entity.getFlUdNonversNoverif();
	    this.flUdNonversNorisolub = entity.getFlUdNonversNorisolub();
	    boolean udNonVers = entity.getFlUdNonversVerif().equals("1")
		    || entity.getFlUdNonversNoverif().equals("1")
		    || entity.getFlUdNonversNorisolub().equals("1");
	    this.flUdNonvers = (udNonVers ? "1" : "0");
	}

	public String getFlUdNonversNorisolub() {
	    return flUdNonversNorisolub;
	}

	public void setFlUdNonversNorisolub(String flUdNonversNorisolub) {
	    this.flUdNonversNorisolub = flUdNonversNorisolub;
	}

	public String getFlUdNonversNoverif() {
	    return flUdNonversNoverif;
	}

	public void setFlUdNonversNoverif(String flUdNonversNoverif) {
	    this.flUdNonversNoverif = flUdNonversNoverif;
	}

	public String getFlUdNonversVerif() {
	    return flUdNonversVerif;
	}

	public void setFlUdNonversVerif(String flUdNonversVerif) {
	    this.flUdNonversVerif = flUdNonversVerif;
	}

	public String getFlUdNonvers() {
	    return flUdNonvers;
	}

	public void setFlUdNonvers(String flUdNonvers) {
	    this.flUdNonvers = flUdNonvers;
	}

    }

}
