/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna
 * <p/>
 * This program is free software: you can redistribute it and/or modify it under the terms of
 * the GNU Affero General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 * <p/>
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 * <p/>
 * You should have received a copy of the GNU Affero General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

package it.eng.parer.slite.gen.viewbean;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * @author Sloth
 *
 *         Bean per la tabella Tpi_V_Vis_Dt_Sched
 *
 */
public class TpiVVisDtSchedTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$ViewBeanWriter", comments =
     * "This class was generated by OraTool", date = "Tuesday, 18 March 2014 10:08" )
     */

    public static final String SELECT = "Select * from Tpi_V_Vis_Dt_Sched /**/";
    public static final String TABLE_NAME = "Tpi_V_Vis_Dt_Sched";
    public static final String COL_ID_DT_SCHED = "id_dt_sched";
    public static final String COL_DT_SCHED = "dt_sched";
    public static final String COL_TI_STATO_DT_SCHED = "ti_stato_dt_sched";
    public static final String COL_FL_PRESENZA_SECONDARIO = "fl_presenza_secondario";
    public static final String COL_FL_MIGRAZ_IN_CORSO = "fl_migraz_in_corso";
    public static final String COL_FL_ANOM_ARK_VERS_PRIM = "fl_anom_ark_vers_prim";
    public static final String COL_FL_ANOM_COPIA_VERS_PRIM = "fl_anom_copia_vers_prim";
    public static final String COL_FL_ANOM_BACKUP_VERS_PRIM = "fl_anom_backup_vers_prim";
    public static final String COL_FL_ANOM_MIGRATE_VERS_PRIM = "fl_anom_migrate_vers_prim";
    public static final String COL_FL_ANOM_RI_ARK_VERS_PRIM = "fl_anom_ri_ark_vers_prim";
    public static final String COL_FL_ANOM_ARK_MIGRAZ_PRIM = "fl_anom_ark_migraz_prim";
    public static final String COL_FL_ANOM_COPIA_MIGRAZ_PRIM = "fl_anom_copia_migraz_prim";
    public static final String COL_FL_ANOM_BACKUP_MIGRAZ_PRIM = "fl_anom_backup_migraz_prim";
    public static final String COL_FL_ANOM_MIGRATE_MIGRAZ_PRIM = "fl_anom_migrate_migraz_prim";
    public static final String COL_FL_ANOM_RI_ARK_MIGRAZ_PRIM = "fl_anom_ri_ark_migraz_prim";
    public static final String COL_FL_ANOM_ARK_VERS_SECOND = "fl_anom_ark_vers_second";
    public static final String COL_FL_ANOM_COPIA_VERS_SECOND = "fl_anom_copia_vers_second";
    public static final String COL_FL_ANOM_BACKUP_VERS_SECOND = "fl_anom_backup_vers_second";
    public static final String COL_FL_ANOM_MIGRATE_VERS_SECOND = "fl_anom_migrate_vers_second";
    public static final String COL_FL_ANOM_RI_ARK_VERS_SECOND = "fl_anom_ri_ark_vers_second";
    public static final String COL_FL_ANOM_ARK_MIGRAZ_SECOND = "fl_anom_ark_migraz_second";
    public static final String COL_FL_ANOM_COPIA_MIGRAZ_SECOND = "fl_anom_copia_migraz_second";
    public static final String COL_FL_ANOM_BACKUP_MIGRAZ_SECOND = "fl_anom_backup_migraz_second";
    public static final String COL_FL_ANOM_MIGRATE_MIGRAZ_SECOND = "fl_anom_migrate_migraz_second";
    public static final String COL_FL_ANOM_RI_ARK_MIGRAZ_SECOND = "fl_anom_ri_ark_migraz_second";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
        map.put(COL_ID_DT_SCHED, new ColumnDescriptor(COL_ID_DT_SCHED, Types.DECIMAL, 22, true));
        map.put(COL_DT_SCHED, new ColumnDescriptor(COL_DT_SCHED, Types.TIMESTAMP, 7, true));
        map.put(COL_TI_STATO_DT_SCHED, new ColumnDescriptor(COL_TI_STATO_DT_SCHED, Types.VARCHAR, 20, true));
        map.put(COL_FL_PRESENZA_SECONDARIO, new ColumnDescriptor(COL_FL_PRESENZA_SECONDARIO, Types.VARCHAR, 1, true));
        map.put(COL_FL_MIGRAZ_IN_CORSO, new ColumnDescriptor(COL_FL_MIGRAZ_IN_CORSO, Types.VARCHAR, 1, true));
        map.put(COL_FL_ANOM_ARK_VERS_PRIM, new ColumnDescriptor(COL_FL_ANOM_ARK_VERS_PRIM, Types.VARCHAR, 1, true));
        map.put(COL_FL_ANOM_COPIA_VERS_PRIM, new ColumnDescriptor(COL_FL_ANOM_COPIA_VERS_PRIM, Types.VARCHAR, 1, true));
        map.put(COL_FL_ANOM_BACKUP_VERS_PRIM,
                new ColumnDescriptor(COL_FL_ANOM_BACKUP_VERS_PRIM, Types.VARCHAR, 1, true));
        map.put(COL_FL_ANOM_MIGRATE_VERS_PRIM,
                new ColumnDescriptor(COL_FL_ANOM_MIGRATE_VERS_PRIM, Types.VARCHAR, 1, true));
        map.put(COL_FL_ANOM_RI_ARK_VERS_PRIM,
                new ColumnDescriptor(COL_FL_ANOM_RI_ARK_VERS_PRIM, Types.VARCHAR, 1, true));
        map.put(COL_FL_ANOM_ARK_MIGRAZ_PRIM, new ColumnDescriptor(COL_FL_ANOM_ARK_MIGRAZ_PRIM, Types.VARCHAR, 1, true));
        map.put(COL_FL_ANOM_COPIA_MIGRAZ_PRIM,
                new ColumnDescriptor(COL_FL_ANOM_COPIA_MIGRAZ_PRIM, Types.VARCHAR, 1, true));
        map.put(COL_FL_ANOM_BACKUP_MIGRAZ_PRIM,
                new ColumnDescriptor(COL_FL_ANOM_BACKUP_MIGRAZ_PRIM, Types.VARCHAR, 1, true));
        map.put(COL_FL_ANOM_MIGRATE_MIGRAZ_PRIM,
                new ColumnDescriptor(COL_FL_ANOM_MIGRATE_MIGRAZ_PRIM, Types.VARCHAR, 1, true));
        map.put(COL_FL_ANOM_RI_ARK_MIGRAZ_PRIM,
                new ColumnDescriptor(COL_FL_ANOM_RI_ARK_MIGRAZ_PRIM, Types.VARCHAR, 1, true));
        map.put(COL_FL_ANOM_ARK_VERS_SECOND, new ColumnDescriptor(COL_FL_ANOM_ARK_VERS_SECOND, Types.VARCHAR, 1, true));
        map.put(COL_FL_ANOM_COPIA_VERS_SECOND,
                new ColumnDescriptor(COL_FL_ANOM_COPIA_VERS_SECOND, Types.VARCHAR, 1, true));
        map.put(COL_FL_ANOM_BACKUP_VERS_SECOND,
                new ColumnDescriptor(COL_FL_ANOM_BACKUP_VERS_SECOND, Types.VARCHAR, 1, true));
        map.put(COL_FL_ANOM_MIGRATE_VERS_SECOND,
                new ColumnDescriptor(COL_FL_ANOM_MIGRATE_VERS_SECOND, Types.VARCHAR, 1, true));
        map.put(COL_FL_ANOM_RI_ARK_VERS_SECOND,
                new ColumnDescriptor(COL_FL_ANOM_RI_ARK_VERS_SECOND, Types.VARCHAR, 1, true));
        map.put(COL_FL_ANOM_ARK_MIGRAZ_SECOND,
                new ColumnDescriptor(COL_FL_ANOM_ARK_MIGRAZ_SECOND, Types.VARCHAR, 1, true));
        map.put(COL_FL_ANOM_COPIA_MIGRAZ_SECOND,
                new ColumnDescriptor(COL_FL_ANOM_COPIA_MIGRAZ_SECOND, Types.VARCHAR, 1, true));
        map.put(COL_FL_ANOM_BACKUP_MIGRAZ_SECOND,
                new ColumnDescriptor(COL_FL_ANOM_BACKUP_MIGRAZ_SECOND, Types.VARCHAR, 1, true));
        map.put(COL_FL_ANOM_MIGRATE_MIGRAZ_SECOND,
                new ColumnDescriptor(COL_FL_ANOM_MIGRATE_MIGRAZ_SECOND, Types.VARCHAR, 1, true));
        map.put(COL_FL_ANOM_RI_ARK_MIGRAZ_SECOND,
                new ColumnDescriptor(COL_FL_ANOM_RI_ARK_MIGRAZ_SECOND, Types.VARCHAR, 1, true));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
        return map;
    }

    public String getTableName() {
        return TABLE_NAME;
    }

    public String getStatement() {
        return SELECT;
    }

}
