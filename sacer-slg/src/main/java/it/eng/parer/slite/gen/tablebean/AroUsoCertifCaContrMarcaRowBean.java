package it.eng.parer.slite.gen.tablebean;

import it.eng.spagoLite.db.base.BaseRowInterface;
import it.eng.spagoLite.db.base.JEEBaseRowInterface;
import it.eng.spagoLite.db.base.row.BaseRow;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;
import org.eclipse.persistence.internal.indirection.DatabaseValueHolder;
import org.eclipse.persistence.internal.sessions.AbstractRecord;
import it.eng.parer.entity.AroUsoCertifCaContrMarca;
import it.eng.parer.entity.AroContrMarcaComp;
import it.eng.parer.entity.FirCrl;
import it.eng.parer.entity.FirCertifCa;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.sql.Clob;
import java.sql.Types;
import java.sql.SQLException;
import javax.annotation.Generated;

/**
 * RowBean per la tabella Aro_Uso_Certif_Ca_Contr_Marca
 *
 */
public class AroUsoCertifCaContrMarcaRowBean extends BaseRow implements BaseRowInterface, JEEBaseRowInterface {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$TableBeanWriter", comments =
     * "This class was generated by OraTool", date = "Tuesday, 11 March 2014 18:25" )
     */

    public static AroUsoCertifCaContrMarcaTableDescriptor TABLE_DESCRIPTOR = new AroUsoCertifCaContrMarcaTableDescriptor();

    public AroUsoCertifCaContrMarcaRowBean() {
        super();
    }

    public TableDescriptor getTableDescriptor() {
        return TABLE_DESCRIPTOR;
    }

    // getter e setter
    public BigDecimal getIdUsoCertifCaContrMarca() {
        return getBigDecimal("id_uso_certif_ca_contr_marca");
    }

    public void setIdUsoCertifCaContrMarca(BigDecimal id_uso_certif_ca_contr_marca) {
        setObject("id_uso_certif_ca_contr_marca", id_uso_certif_ca_contr_marca);
    }

    public BigDecimal getIdContrMarcaComp() {
        return getBigDecimal("id_contr_marca_comp");
    }

    public void setIdContrMarcaComp(BigDecimal id_contr_marca_comp) {
        setObject("id_contr_marca_comp", id_contr_marca_comp);
    }

    public BigDecimal getIdCertifCa() {
        return getBigDecimal("id_certif_ca");
    }

    public void setIdCertifCa(BigDecimal id_certif_ca) {
        setObject("id_certif_ca", id_certif_ca);
    }

    public BigDecimal getPgCertifCa() {
        return getBigDecimal("pg_certif_ca");
    }

    public void setPgCertifCa(BigDecimal pg_certif_ca) {
        setObject("pg_certif_ca", pg_certif_ca);
    }

    public BigDecimal getIdCrlUsata() {
        return getBigDecimal("id_crl_usata");
    }

    public void setIdCrlUsata(BigDecimal id_crl_usata) {
        setObject("id_crl_usata", id_crl_usata);
    }

    @Override
    public void entityToRowBean(Object obj) {
        AroUsoCertifCaContrMarca entity = (AroUsoCertifCaContrMarca) obj;
        AbstractRecord ar;
        this.setIdUsoCertifCaContrMarca(new BigDecimal(entity.getIdUsoCertifCaContrMarca()));
        if (entity._persistence_get_aroContrMarcaComp_vh() instanceof DatabaseValueHolder) {
            if ((ar = ((DatabaseValueHolder) entity._persistence_get_aroContrMarcaComp_vh()).getRow()) != null) {
                this.setIdContrMarcaComp(
                        new BigDecimal((Long) ar.get("ARO_USO_CERTIF_CA_CONTR_MARCA.ID_CONTR_MARCA_COMP")));
            }
        } else {
            if (entity.getAroContrMarcaComp() != null) {
                this.setIdContrMarcaComp(new BigDecimal(entity.getAroContrMarcaComp().getIdContrMarcaComp()));
            }
        }
        if (entity._persistence_get_firCertifCa_vh() instanceof DatabaseValueHolder) {
            if ((ar = ((DatabaseValueHolder) entity._persistence_get_firCertifCa_vh()).getRow()) != null) {
                this.setIdCertifCa(new BigDecimal((Long) ar.get("ARO_USO_CERTIF_CA_CONTR_MARCA.ID_CERTIF_CA")));
            }
        } else {
            if (entity.getFirCertifCa() != null) {
                this.setIdCertifCa(new BigDecimal(entity.getFirCertifCa().getIdCertifCa()));
            }
        }
        this.setPgCertifCa(entity.getPgCertifCa());
        if (entity._persistence_get_firCrl_vh() instanceof DatabaseValueHolder) {
            if ((ar = ((DatabaseValueHolder) entity._persistence_get_firCrl_vh()).getRow()) != null) {
                this.setIdCrlUsata(new BigDecimal((Long) ar.get("ARO_USO_CERTIF_CA_CONTR_MARCA.ID_CRL_USATA")));
            }
        } else {
            if (entity.getFirCrl() != null) {
                this.setIdCrlUsata(new BigDecimal(entity.getFirCrl().getIdCrl()));
            }
        }
    }

    @Override
    public AroUsoCertifCaContrMarca rowBeanToEntity() {
        AroUsoCertifCaContrMarca entity = new AroUsoCertifCaContrMarca();
        if (this.getIdUsoCertifCaContrMarca() != null) {
            entity.setIdUsoCertifCaContrMarca(this.getIdUsoCertifCaContrMarca().longValue());
        }
        if (this.getIdContrMarcaComp() != null) {
            if (entity.getAroContrMarcaComp() == null) {
                entity.setAroContrMarcaComp(new AroContrMarcaComp());
            }
            entity.getAroContrMarcaComp().setIdContrMarcaComp(this.getIdContrMarcaComp().longValue());
        }
        if (this.getIdCertifCa() != null) {
            if (entity.getFirCertifCa() == null) {
                entity.setFirCertifCa(new FirCertifCa());
            }
            entity.getFirCertifCa().setIdCertifCa(this.getIdCertifCa().longValue());
        }
        entity.setPgCertifCa(this.getPgCertifCa());
        if (this.getIdCrlUsata() != null) {
            if (entity.getFirCrl() == null) {
                entity.setFirCrl(new FirCrl());
            }
            entity.getFirCrl().setIdCrl(this.getIdCrlUsata().longValue());
        }
        return entity;
    }

    // gestione della paginazione
    public void setRownum(Integer rownum) {
        setObject("rownum", rownum);
    }

    public Integer getRownum() {
        return Integer.parseInt(getObject("rownum").toString());
    }

    public void setRnum(Integer rnum) {
        setObject("rnum", rnum);
    }

    public Integer getRnum() {
        return Integer.parseInt(getObject("rnum").toString());
    }

    public void setNumrecords(Integer numRecords) {
        setObject("numrecords", numRecords);
    }

    public Integer getNumrecords() {
        return Integer.parseInt(getObject("numrecords").toString());
    }

}
