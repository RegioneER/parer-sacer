package it.eng.parer.slite.gen.tablebean;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.annotation.Generated;

/**
 * @author Sloth
 *
 *         Bean per la tabella Aro_Contr_Marca_Comp
 *
 */
public class AroContrMarcaCompTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$TableBeanWriter", comments =
     * "This class was generated by OraTool", date = "Tuesday, 11 March 2014 18:25" )
     */

    public static final String SELECT = "Select * from Aro_Contr_Marca_Comp /**/";
    public static final String TABLE_NAME = "Aro_Contr_Marca_Comp";
    public static final String COL_ID_CONTR_MARCA_COMP = "id_contr_marca_comp";
    public static final String COL_ID_MARCA_COMP = "id_marca_comp";
    public static final String COL_TI_CONTR = "ti_contr";
    public static final String COL_TI_ESITO_CONTR_MARCA = "ti_esito_contr_marca";
    public static final String COL_DS_MSG_ESITO_CONTR_MARCA = "ds_msg_esito_contr_marca";
    public static final String COL_ID_CRL_USATA = "id_crl_usata";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
        map.put(COL_ID_CONTR_MARCA_COMP, new ColumnDescriptor(COL_ID_CONTR_MARCA_COMP, Types.DECIMAL, 22, true));
        map.put(COL_ID_MARCA_COMP, new ColumnDescriptor(COL_ID_MARCA_COMP, Types.DECIMAL, 22, false));
        map.put(COL_TI_CONTR, new ColumnDescriptor(COL_TI_CONTR, Types.VARCHAR, 20, false));
        map.put(COL_TI_ESITO_CONTR_MARCA, new ColumnDescriptor(COL_TI_ESITO_CONTR_MARCA, Types.VARCHAR, 30, false));
        map.put(COL_DS_MSG_ESITO_CONTR_MARCA,
                new ColumnDescriptor(COL_DS_MSG_ESITO_CONTR_MARCA, Types.VARCHAR, 254, false));
        map.put(COL_ID_CRL_USATA, new ColumnDescriptor(COL_ID_CRL_USATA, Types.DECIMAL, 22, false));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
        return map;
    }

    public String getTableName() {
        return TABLE_NAME;
    }

    public String getStatement() {
        return SELECT;
    }

}
