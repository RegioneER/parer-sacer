/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna
 * <p/>
 * This program is free software: you can redistribute it and/or modify it under the terms of
 * the GNU Affero General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 * <p/>
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 * <p/>
 * You should have received a copy of the GNU Affero General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

package it.eng.parer.slite.gen.tablebean;

import java.math.BigDecimal;

import it.eng.parer.entity.FasFascicolo;
import it.eng.parer.entity.FasRespFascicolo;
import it.eng.parer.entity.constraint.FasRespFascicolo.TiOggResp;
import it.eng.spagoLite.db.base.JEEBaseRowInterface;
import it.eng.spagoLite.db.base.row.BaseRow;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * RowBean per la tabella Fas_Resp_Fascicolo
 *
 * Modified by Moretti_Lu (15/12/2017)
 *
 */
public class FasRespFascicoloRowBean extends BaseRow implements JEEBaseRowInterface {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$TableBeanWriter", comments =
     * "This class was generated by OraTool", date = "Thursday, 14 December 2017 15:22" )
     */
    private static final long serialVersionUID = 1L;

    public static FasRespFascicoloTableDescriptor TABLE_DESCRIPTOR = new FasRespFascicoloTableDescriptor();

    public FasRespFascicoloRowBean() {
        super();
    }

    public TableDescriptor getTableDescriptor() {
        return TABLE_DESCRIPTOR;
    }

    // getter e setter
    public BigDecimal getIdRespFascicolo() {
        return getBigDecimal("id_resp_fascicolo");
    }

    public void setIdRespFascicolo(BigDecimal idRespFascicolo) {
        setObject("id_resp_fascicolo", idRespFascicolo);
    }

    public BigDecimal getIdFascicolo() {
        return getBigDecimal("id_fascicolo");
    }

    public void setIdFascicolo(BigDecimal idFascicolo) {
        setObject("id_fascicolo", idFascicolo);
    }

    public String getTiOggResp() {
        return getString("ti_ogg_resp");
    }

    public void setTiOggResp(String tiOggResp) {
        setObject("ti_ogg_resp", tiOggResp);
    }

    public String getTiResp() {
        return getString("ti_resp");
    }

    public void setTiResp(String tiResp) {
        setObject("ti_resp", tiResp);
    }

    public String getNmNomeResp() {
        return getString("nm_nome_resp");
    }

    public void setNmNomeResp(String nmNomeResp) {
        setObject("nm_nome_resp", nmNomeResp);
    }

    public String getNmCognResp() {
        return getString("nm_cogn_resp");
    }

    public void setNmCognResp(String nmCognResp) {
        setObject("nm_cogn_resp", nmCognResp);
    }

    public String getCdResp() {
        return getString("cd_resp");
    }

    public void setCdResp(String cdResp) {
        setObject("cd_resp", cdResp);
    }

    public String getTiCdResp() {
        return getString("ti_cd_resp");
    }

    public void setTiCdResp(String tiCdResp) {
        setObject("ti_cd_resp", tiCdResp);
    }

    @Override
    public void entityToRowBean(Object obj) {
        FasRespFascicolo entity = (FasRespFascicolo) obj;

        this.setIdRespFascicolo(
                entity.getIdRespFascicolo() == null ? null : BigDecimal.valueOf(entity.getIdRespFascicolo()));

        if (entity.getFasFascicolo() != null) {
            this.setIdFascicolo(new BigDecimal(entity.getFasFascicolo().getIdFascicolo()));
        }

        this.setTiOggResp(entity.getTiOggResp().name());
        this.setTiResp(entity.getTiResp());
        this.setNmNomeResp(entity.getNmNomeResp());
        this.setNmCognResp(entity.getNmCognResp());
        this.setCdResp(entity.getCdResp());
        this.setTiCdResp(entity.getTiCdResp());
    }

    @Override
    public FasRespFascicolo rowBeanToEntity() {
        FasRespFascicolo entity = new FasRespFascicolo();
        if (this.getIdRespFascicolo() != null) {
            entity.setIdRespFascicolo(this.getIdRespFascicolo().longValue());
        }
        if (this.getIdFascicolo() != null) {
            if (entity.getFasFascicolo() == null) {
                entity.setFasFascicolo(new FasFascicolo());
            }
            entity.getFasFascicolo().setIdFascicolo(this.getIdFascicolo().longValue());
        }
        entity.setTiOggResp(TiOggResp.valueOf(this.getTiOggResp()));
        entity.setTiResp(this.getTiResp());
        entity.setNmNomeResp(this.getNmNomeResp());
        entity.setNmCognResp(this.getNmCognResp());
        entity.setCdResp(this.getCdResp());
        entity.setTiCdResp(this.getTiCdResp());
        return entity;
    }

    // gestione della paginazione
    public void setRownum(Integer rownum) {
        setObject("rownum", rownum);
    }

    public Integer getRownum() {
        return Integer.parseInt(getObject("rownum").toString());
    }

    public void setRnum(Integer rnum) {
        setObject("rnum", rnum);
    }

    public Integer getRnum() {
        return Integer.parseInt(getObject("rnum").toString());
    }

    public void setNumrecords(Integer numRecords) {
        setObject("numrecords", numRecords);
    }

    public Integer getNumrecords() {
        return Integer.parseInt(getObject("numrecords").toString());
    }
}
