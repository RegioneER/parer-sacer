/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna <p/> This program is free software: you can
 * redistribute it and/or modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License, or (at your option)
 * any later version. <p/> This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. <p/> You should
 * have received a copy of the GNU Affero General Public License along with this program. If not,
 * see <https://www.gnu.org/licenses/>.
 */

package it.eng.parer.slite.gen.viewbean;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * @author Sloth
 *
 *         Bean per la tabella Aro_V_Vis_Doc_Iam
 *
 */
public class AroVVisDocIamTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$ViewBeanWriter",
     * comments = "This class was generated by OraTool", date = "Tuesday, 6 November 2018 12:28" )
     */

    public static final String SELECT = "Select * from Aro_V_Vis_Doc_Iam /**/";
    public static final String TABLE_NAME = "Aro_V_Vis_Doc_Iam";
    public static final String COL_NM_AMBIENTE = "nm_ambiente";
    public static final String COL_NM_ENTE = "nm_ente";
    public static final String COL_NM_STRUT = "nm_strut";
    public static final String COL_ID_UNITA_DOC = "id_unita_doc";
    public static final String COL_CD_REGISTRO_KEY_UNITA_DOC = "cd_registro_key_unita_doc";
    public static final String COL_AA_KEY_UNITA_DOC = "aa_key_unita_doc";
    public static final String COL_CD_KEY_UNITA_DOC = "cd_key_unita_doc";
    public static final String COL_CD_KEY_UNITA_DOC_NORMALIZ = "cd_key_unita_doc_normaliz";
    public static final String COL_ID_TIPO_UNITA_DOC = "id_tipo_unita_doc";
    public static final String COL_NM_TIPO_UNITA_DOC = "nm_tipo_unita_doc";
    public static final String COL_DL_OGGETTO_UNITA_DOC = "dl_oggetto_unita_doc";
    public static final String COL_DT_REG_UNITA_DOC = "dt_reg_unita_doc";
    public static final String COL_DT_ANNUL_UNITA_DOC = "dt_annul_unita_doc";
    public static final String COL_TI_ANNUL_UNITA_DOC = "ti_annul_unita_doc";
    public static final String COL_DT_CREAZIONE_UD = "dt_creazione_ud";
    public static final String COL_NT_ANNUL_UNITA_DOC = "nt_annul_unita_doc";
    public static final String COL_TI_STATO_CONSERVAZIONE = "ti_stato_conservazione";
    public static final String COL_ID_DOC = "id_doc";
    public static final String COL_TI_DOC = "ti_doc";
    public static final String COL_PG_DOC = "pg_doc";
    public static final String COL_NM_TIPO_DOC = "nm_tipo_doc";
    public static final String COL_DL_DOC = "dl_doc";
    public static final String COL_DS_AUTORE_DOC = "ds_autore_doc";
    public static final String COL_CD_KEY_DOC_VERS = "cd_key_doc_vers";
    public static final String COL_DT_CREAZIONE = "dt_creazione";
    public static final String COL_FL_DOC_FIRMATO = "fl_doc_firmato";
    public static final String COL_TI_ESITO_VERIF_FIRME = "ti_esito_verif_firme";
    public static final String COL_DS_MSG_ESITO_VERIF_FIRME = "ds_msg_esito_verif_firme";
    public static final String COL_TI_STATO_DOC = "ti_stato_doc";
    public static final String COL_FL_FORZA_ACCETTAZIONE = "fl_forza_accettazione";
    public static final String COL_FL_FORZA_CONSERVAZIONE = "fl_forza_conservazione";
    public static final String COL_TI_CONSERVAZIONE = "ti_conservazione";
    public static final String COL_NM_SISTEMA_MIGRAZ = "nm_sistema_migraz";
    public static final String COL_DT_ANNUL_DOC = "dt_annul_doc";
    public static final String COL_TI_ANNUL_DOC = "ti_annul_doc";
    public static final String COL_NT_ANNUL_DOC = "nt_annul_doc";
    public static final String COL_NT_DOC = "nt_doc";
    public static final String COL_NI_ORD_DOC = "ni_ord_doc";
    public static final String COL_ID_STRUT_DOC = "id_strut_doc";
    public static final String COL_NM_TIPO_STRUT_DOC = "nm_tipo_strut_doc";
    public static final String COL_ID_VOLUME_CONSERV = "id_volume_conserv";
    public static final String COL_NM_VOLUME_CONSERV = "nm_volume_conserv";
    public static final String COL_TI_STATO_VOLUME_CONSERV = "ti_stato_volume_conserv";
    public static final String COL_ID_ELENCO_VERS = "id_elenco_vers";
    public static final String COL_NM_ELENCO_VERS = "nm_elenco_vers";
    public static final String COL_TI_STATO_ELENCO_VERS = "ti_stato_elenco_vers";
    public static final String COL_CD_VERSIONE_XML = "cd_versione_xml";
    public static final String COL_UTENTE_VERS = "utente_vers";
    public static final String COL_BL_XML_RICH_DOC = "bl_xml_rich_doc";
    public static final String COL_DS_HASH_XML_RICH_DOC = "ds_hash_xml_rich_doc";
    public static final String COL_DS_ALGO_HASH_XML_RICH_DOC = "ds_algo_hash_xml_rich_doc";
    public static final String COL_CD_ENCODING_HASH_XML_RICH_DOC = "cd_encoding_hash_xml_rich_doc";
    public static final String COL_DS_URN_XML_RICH_DOC = "ds_urn_xml_rich_doc";
    public static final String COL_DS_URN_XML_RICH_DOC_NORMALIZ = "ds_urn_xml_rich_doc_normaliz";
    public static final String COL_DS_URN_XML_RICH_DOC_INIZIALE = "ds_urn_xml_rich_doc_iniziale";
    public static final String COL_BL_XML_RISP_DOC = "bl_xml_risp_doc";
    public static final String COL_DS_HASH_XML_RISP_DOC = "ds_hash_xml_risp_doc";
    public static final String COL_DS_ALGO_HASH_XML_RISP_DOC = "ds_algo_hash_xml_risp_doc";
    public static final String COL_CD_ENCODING_HASH_XML_RISP_DOC = "cd_encoding_hash_xml_risp_doc";
    public static final String COL_DS_URN_XML_RISP_DOC = "ds_urn_xml_risp_doc";
    public static final String COL_DS_URN_XML_RISP_DOC_NORMALIZ = "ds_urn_xml_risp_doc_normaliz";
    public static final String COL_DS_URN_XML_RISP_DOC_INIZIALE = "ds_urn_xml_risp_doc_iniziale";
    public static final String COL_BL_XML_RAPP_DOC = "bl_xml_rapp_doc";
    public static final String COL_DS_HASH_XML_RAPP_DOC = "ds_hash_xml_rapp_doc";
    public static final String COL_DS_ALGO_HASH_XML_RAPP_DOC = "ds_algo_hash_xml_rapp_doc";
    public static final String COL_CD_ENCODING_HASH_XML_RAPP_DOC = "cd_encoding_hash_xml_rapp_doc";
    public static final String COL_DS_URN_XML_RAPP_DOC = "ds_urn_xml_rapp_doc";
    public static final String COL_DS_URN_XML_RAPP_DOC_NORMALIZ = "ds_urn_xml_rapp_doc_normaliz";
    public static final String COL_DS_URN_XML_RAPP_DOC_INIZIALE = "ds_urn_xml_rapp_doc_iniziale";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
	map.put(COL_NM_AMBIENTE, new ColumnDescriptor(COL_NM_AMBIENTE, Types.VARCHAR, 100, true));
	map.put(COL_NM_ENTE, new ColumnDescriptor(COL_NM_ENTE, Types.VARCHAR, 100, true));
	map.put(COL_NM_STRUT, new ColumnDescriptor(COL_NM_STRUT, Types.VARCHAR, 100, true));
	map.put(COL_ID_UNITA_DOC, new ColumnDescriptor(COL_ID_UNITA_DOC, Types.DECIMAL, 22, true));
	map.put(COL_CD_REGISTRO_KEY_UNITA_DOC,
		new ColumnDescriptor(COL_CD_REGISTRO_KEY_UNITA_DOC, Types.VARCHAR, 100, true));
	map.put(COL_AA_KEY_UNITA_DOC,
		new ColumnDescriptor(COL_AA_KEY_UNITA_DOC, Types.DECIMAL, 22, true));
	map.put(COL_CD_KEY_UNITA_DOC,
		new ColumnDescriptor(COL_CD_KEY_UNITA_DOC, Types.VARCHAR, 100, true));
	map.put(COL_CD_KEY_UNITA_DOC_NORMALIZ,
		new ColumnDescriptor(COL_CD_KEY_UNITA_DOC_NORMALIZ, Types.VARCHAR, 100, true));
	map.put(COL_ID_TIPO_UNITA_DOC,
		new ColumnDescriptor(COL_ID_TIPO_UNITA_DOC, Types.DECIMAL, 22, true));
	map.put(COL_NM_TIPO_UNITA_DOC,
		new ColumnDescriptor(COL_NM_TIPO_UNITA_DOC, Types.VARCHAR, 100, true));
	map.put(COL_DL_OGGETTO_UNITA_DOC,
		new ColumnDescriptor(COL_DL_OGGETTO_UNITA_DOC, Types.VARCHAR, 4000, true));
	map.put(COL_DT_REG_UNITA_DOC,
		new ColumnDescriptor(COL_DT_REG_UNITA_DOC, Types.TIMESTAMP, 7, true));
	map.put(COL_DT_ANNUL_UNITA_DOC,
		new ColumnDescriptor(COL_DT_ANNUL_UNITA_DOC, Types.TIMESTAMP, 7, true));
	map.put(COL_TI_ANNUL_UNITA_DOC,
		new ColumnDescriptor(COL_TI_ANNUL_UNITA_DOC, Types.VARCHAR, 20, true));
	map.put(COL_DT_CREAZIONE_UD,
		new ColumnDescriptor(COL_DT_CREAZIONE_UD, Types.TIMESTAMP, 7, true));
	map.put(COL_NT_ANNUL_UNITA_DOC,
		new ColumnDescriptor(COL_NT_ANNUL_UNITA_DOC, Types.VARCHAR, 2000, true));
	map.put(COL_TI_STATO_CONSERVAZIONE,
		new ColumnDescriptor(COL_TI_STATO_CONSERVAZIONE, Types.VARCHAR, 30, true));
	map.put(COL_ID_DOC, new ColumnDescriptor(COL_ID_DOC, Types.DECIMAL, 22, true));
	map.put(COL_TI_DOC, new ColumnDescriptor(COL_TI_DOC, Types.VARCHAR, 20, true));
	map.put(COL_PG_DOC, new ColumnDescriptor(COL_PG_DOC, Types.DECIMAL, 22, true));
	map.put(COL_NM_TIPO_DOC, new ColumnDescriptor(COL_NM_TIPO_DOC, Types.VARCHAR, 100, true));
	map.put(COL_DL_DOC, new ColumnDescriptor(COL_DL_DOC, Types.VARCHAR, 1024, true));
	map.put(COL_DS_AUTORE_DOC,
		new ColumnDescriptor(COL_DS_AUTORE_DOC, Types.VARCHAR, 4000, true));
	map.put(COL_CD_KEY_DOC_VERS,
		new ColumnDescriptor(COL_CD_KEY_DOC_VERS, Types.VARCHAR, 100, true));
	map.put(COL_DT_CREAZIONE, new ColumnDescriptor(COL_DT_CREAZIONE, Types.TIMESTAMP, 7, true));
	map.put(COL_FL_DOC_FIRMATO,
		new ColumnDescriptor(COL_FL_DOC_FIRMATO, Types.VARCHAR, 1, true));
	map.put(COL_TI_ESITO_VERIF_FIRME,
		new ColumnDescriptor(COL_TI_ESITO_VERIF_FIRME, Types.VARCHAR, 20, true));
	map.put(COL_DS_MSG_ESITO_VERIF_FIRME,
		new ColumnDescriptor(COL_DS_MSG_ESITO_VERIF_FIRME, Types.VARCHAR, 254, true));
	map.put(COL_TI_STATO_DOC, new ColumnDescriptor(COL_TI_STATO_DOC, Types.VARCHAR, 30, true));
	map.put(COL_FL_FORZA_ACCETTAZIONE,
		new ColumnDescriptor(COL_FL_FORZA_ACCETTAZIONE, Types.VARCHAR, 1, true));
	map.put(COL_FL_FORZA_CONSERVAZIONE,
		new ColumnDescriptor(COL_FL_FORZA_CONSERVAZIONE, Types.VARCHAR, 1, true));
	map.put(COL_TI_CONSERVAZIONE,
		new ColumnDescriptor(COL_TI_CONSERVAZIONE, Types.VARCHAR, 25, true));
	map.put(COL_NM_SISTEMA_MIGRAZ,
		new ColumnDescriptor(COL_NM_SISTEMA_MIGRAZ, Types.VARCHAR, 100, true));
	map.put(COL_DT_ANNUL_DOC, new ColumnDescriptor(COL_DT_ANNUL_DOC, Types.TIMESTAMP, 7, true));
	map.put(COL_TI_ANNUL_DOC, new ColumnDescriptor(COL_TI_ANNUL_DOC, Types.VARCHAR, 20, true));
	map.put(COL_NT_ANNUL_DOC,
		new ColumnDescriptor(COL_NT_ANNUL_DOC, Types.VARCHAR, 2000, true));
	map.put(COL_NT_DOC, new ColumnDescriptor(COL_NT_DOC, Types.VARCHAR, 2000, true));
	map.put(COL_NI_ORD_DOC, new ColumnDescriptor(COL_NI_ORD_DOC, Types.DECIMAL, 22, true));
	map.put(COL_ID_STRUT_DOC, new ColumnDescriptor(COL_ID_STRUT_DOC, Types.DECIMAL, 22, true));
	map.put(COL_NM_TIPO_STRUT_DOC,
		new ColumnDescriptor(COL_NM_TIPO_STRUT_DOC, Types.VARCHAR, 100, true));
	map.put(COL_ID_VOLUME_CONSERV,
		new ColumnDescriptor(COL_ID_VOLUME_CONSERV, Types.DECIMAL, 22, true));
	map.put(COL_NM_VOLUME_CONSERV,
		new ColumnDescriptor(COL_NM_VOLUME_CONSERV, Types.VARCHAR, 100, true));
	map.put(COL_TI_STATO_VOLUME_CONSERV,
		new ColumnDescriptor(COL_TI_STATO_VOLUME_CONSERV, Types.VARCHAR, 20, true));
	map.put(COL_ID_ELENCO_VERS,
		new ColumnDescriptor(COL_ID_ELENCO_VERS, Types.DECIMAL, 22, true));
	map.put(COL_NM_ELENCO_VERS,
		new ColumnDescriptor(COL_NM_ELENCO_VERS, Types.VARCHAR, 100, true));
	map.put(COL_TI_STATO_ELENCO_VERS,
		new ColumnDescriptor(COL_TI_STATO_ELENCO_VERS, Types.VARCHAR, 20, true));
	map.put(COL_CD_VERSIONE_XML,
		new ColumnDescriptor(COL_CD_VERSIONE_XML, Types.VARCHAR, 100, true));
	map.put(COL_UTENTE_VERS, new ColumnDescriptor(COL_UTENTE_VERS, Types.VARCHAR, 201, true));
	map.put(COL_BL_XML_RICH_DOC,
		new ColumnDescriptor(COL_BL_XML_RICH_DOC, Types.CLOB, 4000, true));
	map.put(COL_DS_HASH_XML_RICH_DOC,
		new ColumnDescriptor(COL_DS_HASH_XML_RICH_DOC, Types.VARCHAR, 254, true));
	map.put(COL_DS_ALGO_HASH_XML_RICH_DOC,
		new ColumnDescriptor(COL_DS_ALGO_HASH_XML_RICH_DOC, Types.VARCHAR, 254, true));
	map.put(COL_CD_ENCODING_HASH_XML_RICH_DOC,
		new ColumnDescriptor(COL_CD_ENCODING_HASH_XML_RICH_DOC, Types.VARCHAR, 20, true));
	map.put(COL_DS_URN_XML_RICH_DOC,
		new ColumnDescriptor(COL_DS_URN_XML_RICH_DOC, Types.VARCHAR, 254, true));
	map.put(COL_DS_URN_XML_RICH_DOC_NORMALIZ,
		new ColumnDescriptor(COL_DS_URN_XML_RICH_DOC_NORMALIZ, Types.VARCHAR, 254, true));
	map.put(COL_DS_URN_XML_RICH_DOC_INIZIALE,
		new ColumnDescriptor(COL_DS_URN_XML_RICH_DOC_INIZIALE, Types.VARCHAR, 254, true));
	map.put(COL_BL_XML_RISP_DOC,
		new ColumnDescriptor(COL_BL_XML_RISP_DOC, Types.CLOB, 4000, true));
	map.put(COL_DS_HASH_XML_RISP_DOC,
		new ColumnDescriptor(COL_DS_HASH_XML_RISP_DOC, Types.VARCHAR, 254, true));
	map.put(COL_DS_ALGO_HASH_XML_RISP_DOC,
		new ColumnDescriptor(COL_DS_ALGO_HASH_XML_RISP_DOC, Types.VARCHAR, 254, true));
	map.put(COL_CD_ENCODING_HASH_XML_RISP_DOC,
		new ColumnDescriptor(COL_CD_ENCODING_HASH_XML_RISP_DOC, Types.VARCHAR, 20, true));
	map.put(COL_DS_URN_XML_RISP_DOC,
		new ColumnDescriptor(COL_DS_URN_XML_RISP_DOC, Types.VARCHAR, 254, true));
	map.put(COL_DS_URN_XML_RISP_DOC_NORMALIZ,
		new ColumnDescriptor(COL_DS_URN_XML_RISP_DOC_NORMALIZ, Types.VARCHAR, 254, true));
	map.put(COL_DS_URN_XML_RISP_DOC_INIZIALE,
		new ColumnDescriptor(COL_DS_URN_XML_RISP_DOC_INIZIALE, Types.VARCHAR, 254, true));
	map.put(COL_BL_XML_RAPP_DOC,
		new ColumnDescriptor(COL_BL_XML_RAPP_DOC, Types.CLOB, 4000, true));
	map.put(COL_DS_HASH_XML_RAPP_DOC,
		new ColumnDescriptor(COL_DS_HASH_XML_RAPP_DOC, Types.VARCHAR, 254, true));
	map.put(COL_DS_ALGO_HASH_XML_RAPP_DOC,
		new ColumnDescriptor(COL_DS_ALGO_HASH_XML_RAPP_DOC, Types.VARCHAR, 254, true));
	map.put(COL_CD_ENCODING_HASH_XML_RAPP_DOC,
		new ColumnDescriptor(COL_CD_ENCODING_HASH_XML_RAPP_DOC, Types.VARCHAR, 20, true));
	map.put(COL_DS_URN_XML_RAPP_DOC,
		new ColumnDescriptor(COL_DS_URN_XML_RAPP_DOC, Types.VARCHAR, 254, true));
	map.put(COL_DS_URN_XML_RAPP_DOC_NORMALIZ,
		new ColumnDescriptor(COL_DS_URN_XML_RAPP_DOC_NORMALIZ, Types.VARCHAR, 254, true));
	map.put(COL_DS_URN_XML_RAPP_DOC_INIZIALE,
		new ColumnDescriptor(COL_DS_URN_XML_RAPP_DOC_INIZIALE, Types.VARCHAR, 254, true));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
	return map;
    }

    public String getTableName() {
	return TABLE_NAME;
    }

    public String getStatement() {
	return SELECT;
    }

}
