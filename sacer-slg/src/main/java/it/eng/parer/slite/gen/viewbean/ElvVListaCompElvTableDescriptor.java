/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna <p/> This program is free software: you can
 * redistribute it and/or modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License, or (at your option)
 * any later version. <p/> This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. <p/> You should
 * have received a copy of the GNU Affero General Public License along with this program. If not,
 * see <https://www.gnu.org/licenses/>.
 */

// TODO: fdilorenzo, RIPRISTINARE
package it.eng.parer.slite.gen.viewbean;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * @author Sloth
 *
 *         Bean per la tabella Elv_V_Lista_Comp_Elv
 *
 */
public class ElvVListaCompElvTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$ViewBeanWriter",
     * comments = "This class was generated by OraTool", date = "Friday, 16 March 2018 14:44" )
     */

    public static final String SELECT = "Select * from Elv_V_Lista_Comp_Elv /**/";
    public static final String TABLE_NAME = "Elv_V_Lista_Comp_Elv";
    public static final String COL_ID_ELENCO_VERS = "id_elenco_vers";
    public static final String COL_ID_UNITA_DOC = "id_unita_doc";
    public static final String COL_ID_STRUT_UNITA_DOC = "id_strut_unita_doc";
    public static final String COL_CD_REGISTRO_KEY_UNITA_DOC = "cd_registro_key_unita_doc";
    public static final String COL_AA_KEY_UNITA_DOC = "aa_key_unita_doc";
    public static final String COL_CD_KEY_UNITA_DOC = "cd_key_unita_doc";
    public static final String COL_ID_TIPO_UNITA_DOC = "id_tipo_unita_doc";
    public static final String COL_ID_REGISTRO_UNITA_DOC = "id_registro_unita_doc";
    public static final String COL_ID_SUB_STRUT = "id_sub_strut";
    public static final String COL_TI_STATO_CONSERVAZIONE = "ti_stato_conservazione";
    public static final String COL_ID_DOC = "id_doc";
    public static final String COL_ID_STRUT_DOC = "id_strut_doc";
    public static final String COL_DT_CREAZIONE_DOC = "dt_creazione_doc";
    public static final String COL_FL_FORZA_ACCETTAZIONE = "fl_forza_accettazione";
    public static final String COL_FL_FORZA_CONSERVAZIONE = "fl_forza_conservazione";
    public static final String COL_ID_TIPO_DOC = "id_tipo_doc";
    public static final String COL_ID_COMP_DOC = "id_comp_doc";
    public static final String COL_DS_URN_COMP_CALC = "ds_urn_comp_calc";
    public static final String COL_DS_URN_COMP_CALC_SHORT = "ds_urn_comp_calc_short";
    public static final String COL_DS_NOME_COMP_VERS = "ds_nome_comp_vers";
    public static final String COL_TI_SUPPORTO_COMP = "ti_supporto_comp";
    public static final String COL_NI_SIZE_FILE_CALC = "ni_size_file_calc";
    public static final String COL_FL_COMP_FIRMATO = "fl_comp_firmato";
    public static final String COL_TI_ESITO_VERIF_FIRME_VERS = "ti_esito_verif_firme_vers";
    public static final String COL_DS_HASH_FILE_VERS = "ds_hash_file_vers";
    public static final String COL_DL_URN_COMP_VERS = "dl_urn_comp_vers";
    public static final String COL_TI_ESITO_CONTR_FORMATO_FILE = "ti_esito_contr_formato_file";
    public static final String COL_DS_FORMATO_RAPPR_CALC = "ds_formato_rappr_calc";
    public static final String COL_DS_FORMATO_RAPPR_ESTESO_CALC = "ds_formato_rappr_esteso_calc";
    public static final String COL_DS_HASH_FILE_CALC = "ds_hash_file_calc";
    public static final String COL_DS_ALGO_HASH_FILE_CALC = "ds_algo_hash_file_calc";
    public static final String COL_CD_ENCODING_HASH_FILE_CALC = "cd_encoding_hash_file_calc";
    public static final String COL_ID_TIPO_STRUT_DOC = "id_tipo_strut_doc";
    public static final String COL_ID_STRUT_TIPO_STRUT = "id_strut_tipo_strut";
    public static final String COL_NM_TIPO_STRUT_DOC = "nm_tipo_strut_doc";
    public static final String COL_ID_TIPO_COMP_DOC = "id_tipo_comp_doc";
    public static final String COL_NM_TIPO_COMP_DOC = "nm_tipo_comp_doc";
    public static final String COL_ID_FORMATO_FILE_DOC_VERS = "id_formato_file_doc_vers";
    public static final String COL_ID_STRUT_FORMATO_FILE_VERS = "id_strut_formato_file_vers";
    public static final String COL_NM_FORMATO_FILE_DOC_VERS = "nm_formato_file_doc_vers";
    public static final String COL_NM_MIMETYPE_FILE = "nm_mimetype_file";
    public static final String COL_ID_FIRMA_COMP = "id_firma_comp";
    public static final String COL_TI_ESITO_CONTR_CONFORME = "ti_esito_contr_conforme";
    public static final String COL_DT_SCAD_CERTIF_FIRMATARIO = "dt_scad_certif_firmatario";
    public static final String COL_DS_ORD_COMP = "ds_ord_comp";
    public static final String COL_TI_STATO_ELENCO_VERS = "ti_stato_elenco_vers";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
	map.put(COL_ID_ELENCO_VERS,
		new ColumnDescriptor(COL_ID_ELENCO_VERS, Types.DECIMAL, 22, true));
	map.put(COL_ID_UNITA_DOC, new ColumnDescriptor(COL_ID_UNITA_DOC, Types.DECIMAL, 22, true));
	map.put(COL_ID_STRUT_UNITA_DOC,
		new ColumnDescriptor(COL_ID_STRUT_UNITA_DOC, Types.DECIMAL, 22, true));
	map.put(COL_CD_REGISTRO_KEY_UNITA_DOC,
		new ColumnDescriptor(COL_CD_REGISTRO_KEY_UNITA_DOC, Types.VARCHAR, 100, true));
	map.put(COL_AA_KEY_UNITA_DOC,
		new ColumnDescriptor(COL_AA_KEY_UNITA_DOC, Types.DECIMAL, 22, true));
	map.put(COL_CD_KEY_UNITA_DOC,
		new ColumnDescriptor(COL_CD_KEY_UNITA_DOC, Types.VARCHAR, 100, true));
	map.put(COL_ID_TIPO_UNITA_DOC,
		new ColumnDescriptor(COL_ID_TIPO_UNITA_DOC, Types.DECIMAL, 22, true));
	map.put(COL_ID_REGISTRO_UNITA_DOC,
		new ColumnDescriptor(COL_ID_REGISTRO_UNITA_DOC, Types.DECIMAL, 22, true));
	map.put(COL_ID_SUB_STRUT, new ColumnDescriptor(COL_ID_SUB_STRUT, Types.DECIMAL, 22, true));
	map.put(COL_TI_STATO_CONSERVAZIONE,
		new ColumnDescriptor(COL_TI_STATO_CONSERVAZIONE, Types.VARCHAR, 30, true));
	map.put(COL_ID_DOC, new ColumnDescriptor(COL_ID_DOC, Types.DECIMAL, 22, true));
	map.put(COL_ID_STRUT_DOC, new ColumnDescriptor(COL_ID_STRUT_DOC, Types.DECIMAL, 22, true));
	map.put(COL_DT_CREAZIONE_DOC,
		new ColumnDescriptor(COL_DT_CREAZIONE_DOC, Types.TIMESTAMP, 7, true));
	map.put(COL_FL_FORZA_ACCETTAZIONE,
		new ColumnDescriptor(COL_FL_FORZA_ACCETTAZIONE, Types.VARCHAR, 1, true));
	map.put(COL_FL_FORZA_CONSERVAZIONE,
		new ColumnDescriptor(COL_FL_FORZA_CONSERVAZIONE, Types.VARCHAR, 1, true));
	map.put(COL_ID_TIPO_DOC, new ColumnDescriptor(COL_ID_TIPO_DOC, Types.DECIMAL, 22, true));
	map.put(COL_ID_COMP_DOC, new ColumnDescriptor(COL_ID_COMP_DOC, Types.DECIMAL, 22, true));
	map.put(COL_DS_URN_COMP_CALC,
		new ColumnDescriptor(COL_DS_URN_COMP_CALC, Types.VARCHAR, 254, true));
	map.put(COL_DS_URN_COMP_CALC_SHORT,
		new ColumnDescriptor(COL_DS_URN_COMP_CALC_SHORT, Types.VARCHAR, 386, true));
	map.put(COL_DS_NOME_COMP_VERS,
		new ColumnDescriptor(COL_DS_NOME_COMP_VERS, Types.VARCHAR, 254, true));
	map.put(COL_TI_SUPPORTO_COMP,
		new ColumnDescriptor(COL_TI_SUPPORTO_COMP, Types.VARCHAR, 20, true));
	map.put(COL_NI_SIZE_FILE_CALC,
		new ColumnDescriptor(COL_NI_SIZE_FILE_CALC, Types.DECIMAL, 22, true));
	map.put(COL_FL_COMP_FIRMATO,
		new ColumnDescriptor(COL_FL_COMP_FIRMATO, Types.VARCHAR, 1, true));
	map.put(COL_TI_ESITO_VERIF_FIRME_VERS,
		new ColumnDescriptor(COL_TI_ESITO_VERIF_FIRME_VERS, Types.VARCHAR, 20, true));
	map.put(COL_DS_HASH_FILE_VERS,
		new ColumnDescriptor(COL_DS_HASH_FILE_VERS, Types.VARCHAR, 254, true));
	map.put(COL_DL_URN_COMP_VERS,
		new ColumnDescriptor(COL_DL_URN_COMP_VERS, Types.VARCHAR, 1024, true));
	map.put(COL_TI_ESITO_CONTR_FORMATO_FILE,
		new ColumnDescriptor(COL_TI_ESITO_CONTR_FORMATO_FILE, Types.VARCHAR, 20, true));
	map.put(COL_DS_FORMATO_RAPPR_CALC,
		new ColumnDescriptor(COL_DS_FORMATO_RAPPR_CALC, Types.VARCHAR, 254, true));
	map.put(COL_DS_FORMATO_RAPPR_ESTESO_CALC,
		new ColumnDescriptor(COL_DS_FORMATO_RAPPR_ESTESO_CALC, Types.VARCHAR, 254, true));
	map.put(COL_DS_HASH_FILE_CALC,
		new ColumnDescriptor(COL_DS_HASH_FILE_CALC, Types.VARCHAR, 254, true));
	map.put(COL_DS_ALGO_HASH_FILE_CALC,
		new ColumnDescriptor(COL_DS_ALGO_HASH_FILE_CALC, Types.VARCHAR, 254, true));
	map.put(COL_CD_ENCODING_HASH_FILE_CALC,
		new ColumnDescriptor(COL_CD_ENCODING_HASH_FILE_CALC, Types.VARCHAR, 20, true));
	map.put(COL_ID_TIPO_STRUT_DOC,
		new ColumnDescriptor(COL_ID_TIPO_STRUT_DOC, Types.DECIMAL, 22, true));
	map.put(COL_ID_STRUT_TIPO_STRUT,
		new ColumnDescriptor(COL_ID_STRUT_TIPO_STRUT, Types.DECIMAL, 22, true));
	map.put(COL_NM_TIPO_STRUT_DOC,
		new ColumnDescriptor(COL_NM_TIPO_STRUT_DOC, Types.VARCHAR, 100, true));
	map.put(COL_ID_TIPO_COMP_DOC,
		new ColumnDescriptor(COL_ID_TIPO_COMP_DOC, Types.DECIMAL, 22, true));
	map.put(COL_NM_TIPO_COMP_DOC,
		new ColumnDescriptor(COL_NM_TIPO_COMP_DOC, Types.VARCHAR, 100, true));
	map.put(COL_ID_FORMATO_FILE_DOC_VERS,
		new ColumnDescriptor(COL_ID_FORMATO_FILE_DOC_VERS, Types.DECIMAL, 22, true));
	map.put(COL_ID_STRUT_FORMATO_FILE_VERS,
		new ColumnDescriptor(COL_ID_STRUT_FORMATO_FILE_VERS, Types.DECIMAL, 22, true));
	map.put(COL_NM_FORMATO_FILE_DOC_VERS,
		new ColumnDescriptor(COL_NM_FORMATO_FILE_DOC_VERS, Types.VARCHAR, 100, true));
	map.put(COL_NM_MIMETYPE_FILE,
		new ColumnDescriptor(COL_NM_MIMETYPE_FILE, Types.VARCHAR, 100, true));
	map.put(COL_ID_FIRMA_COMP,
		new ColumnDescriptor(COL_ID_FIRMA_COMP, Types.DECIMAL, 22, true));
	map.put(COL_TI_ESITO_CONTR_CONFORME,
		new ColumnDescriptor(COL_TI_ESITO_CONTR_CONFORME, Types.VARCHAR, 30, true));
	map.put(COL_DT_SCAD_CERTIF_FIRMATARIO,
		new ColumnDescriptor(COL_DT_SCAD_CERTIF_FIRMATARIO, Types.TIMESTAMP, 7, true));
	map.put(COL_DS_ORD_COMP, new ColumnDescriptor(COL_DS_ORD_COMP, Types.VARCHAR, 117, true));
	map.put(COL_TI_STATO_ELENCO_VERS,
		new ColumnDescriptor(COL_TI_STATO_ELENCO_VERS, Types.VARCHAR, 50, true));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
	return map;
    }

    public String getTableName() {
	return TABLE_NAME;
    }

    public String getStatement() {
	return SELECT;
    }

}
