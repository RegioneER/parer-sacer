/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna <p/> This program is free software: you can
 * redistribute it and/or modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License, or (at your option)
 * any later version. <p/> This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. <p/> You should
 * have received a copy of the GNU Affero General Public License along with this program. If not,
 * see <https://www.gnu.org/licenses/>.
 */

package it.eng.parer.slite.gen.tablebean;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * @author Sloth
 *
 *         Bean per la tabella Dec_Tipo_Strut_Unita_Doc
 *
 */
public class DecTipoStrutUnitaDocTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$TableBeanWriter",
     * comments = "This class was generated by OraTool", date = "Wednesday, 21 November 2018 12:20"
     * )
     */

    public static final String SELECT = "Select * from Dec_Tipo_Strut_Unita_Doc /**/";
    public static final String TABLE_NAME = "Dec_Tipo_Strut_Unita_Doc";
    public static final String COL_ID_TIPO_STRUT_UNITA_DOC = "id_tipo_strut_unita_doc";
    public static final String COL_ID_TIPO_UNITA_DOC = "id_tipo_unita_doc";
    public static final String COL_NM_TIPO_STRUT_UNITA_DOC = "nm_tipo_strut_unita_doc";
    public static final String COL_DS_TIPO_STRUT_UNITA_DOC = "ds_tipo_strut_unita_doc";
    public static final String COL_DT_ISTITUZ = "dt_istituz";
    public static final String COL_DT_SOPPRES = "dt_soppres";
    public static final String COL_DS_DATA_TIPO_STRUT_UNITA_DOC = "ds_data_tipo_strut_unita_doc";
    public static final String COL_DS_OGG_TIPO_STRUT_UNITA_DOC = "ds_ogg_tipo_strut_unita_doc";
    public static final String COL_DS_NUMERO_TIPO_STRUT_UNITA_DOC = "ds_numero_tipo_strut_unita_doc";
    public static final String COL_DS_ANNO_TIPO_STRUT_UNITA_DOC = "ds_anno_tipo_strut_unita_doc";
    public static final String COL_AA_MIN_TIPO_STRUT_UNITA_DOC = "aa_min_tipo_strut_unita_doc";
    public static final String COL_AA_MAX_TIPO_STRUT_UNITA_DOC = "aa_max_tipo_strut_unita_doc";
    public static final String COL_DS_RIF_TEMP_TIPO_STRUT_UD = "ds_rif_temp_tipo_strut_ud";
    public static final String COL_DS_COLLEGAMENTI_UD = "ds_collegamenti_ud";
    public static final String COL_DS_PERIODICITA_VERS = "ds_periodicita_vers";
    public static final String COL_DS_FIRMA = "ds_firma";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
	map.put(COL_ID_TIPO_STRUT_UNITA_DOC,
		new ColumnDescriptor(COL_ID_TIPO_STRUT_UNITA_DOC, Types.DECIMAL, 22, true));
	map.put(COL_ID_TIPO_UNITA_DOC,
		new ColumnDescriptor(COL_ID_TIPO_UNITA_DOC, Types.DECIMAL, 22, false));
	map.put(COL_NM_TIPO_STRUT_UNITA_DOC,
		new ColumnDescriptor(COL_NM_TIPO_STRUT_UNITA_DOC, Types.VARCHAR, 100, false));
	map.put(COL_DS_TIPO_STRUT_UNITA_DOC,
		new ColumnDescriptor(COL_DS_TIPO_STRUT_UNITA_DOC, Types.VARCHAR, 254, false));
	map.put(COL_DT_ISTITUZ, new ColumnDescriptor(COL_DT_ISTITUZ, Types.TIMESTAMP, 7, false));
	map.put(COL_DT_SOPPRES, new ColumnDescriptor(COL_DT_SOPPRES, Types.TIMESTAMP, 7, false));
	map.put(COL_DS_DATA_TIPO_STRUT_UNITA_DOC,
		new ColumnDescriptor(COL_DS_DATA_TIPO_STRUT_UNITA_DOC, Types.VARCHAR, 1024, false));
	map.put(COL_DS_OGG_TIPO_STRUT_UNITA_DOC,
		new ColumnDescriptor(COL_DS_OGG_TIPO_STRUT_UNITA_DOC, Types.VARCHAR, 1024, false));
	map.put(COL_DS_NUMERO_TIPO_STRUT_UNITA_DOC, new ColumnDescriptor(
		COL_DS_NUMERO_TIPO_STRUT_UNITA_DOC, Types.VARCHAR, 1024, false));
	map.put(COL_DS_ANNO_TIPO_STRUT_UNITA_DOC,
		new ColumnDescriptor(COL_DS_ANNO_TIPO_STRUT_UNITA_DOC, Types.VARCHAR, 1024, false));
	map.put(COL_AA_MIN_TIPO_STRUT_UNITA_DOC,
		new ColumnDescriptor(COL_AA_MIN_TIPO_STRUT_UNITA_DOC, Types.DECIMAL, 22, false));
	map.put(COL_AA_MAX_TIPO_STRUT_UNITA_DOC,
		new ColumnDescriptor(COL_AA_MAX_TIPO_STRUT_UNITA_DOC, Types.DECIMAL, 22, false));
	map.put(COL_DS_RIF_TEMP_TIPO_STRUT_UD,
		new ColumnDescriptor(COL_DS_RIF_TEMP_TIPO_STRUT_UD, Types.VARCHAR, 1024, false));
	map.put(COL_DS_COLLEGAMENTI_UD,
		new ColumnDescriptor(COL_DS_COLLEGAMENTI_UD, Types.VARCHAR, 1024, false));
	map.put(COL_DS_PERIODICITA_VERS,
		new ColumnDescriptor(COL_DS_PERIODICITA_VERS, Types.VARCHAR, 1024, false));
	map.put(COL_DS_FIRMA, new ColumnDescriptor(COL_DS_FIRMA, Types.VARCHAR, 1024, false));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
	return map;
    }

    public String getTableName() {
	return TABLE_NAME;
    }

    public String getStatement() {
	return SELECT;
    }

}
