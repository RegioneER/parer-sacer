package it.eng.parer.slite.gen.tablebean;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.annotation.Generated;

/**
 * @author Sloth
 *
 *         Bean per la tabella Dec_Campo_Inp_Ud
 *
 */
public class DecCampoInpUdTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$TableBeanWriter", comments =
     * "This class was generated by OraTool", date = "Thursday, 19 February 2015 11:53" )
     */

    public static final String SELECT = "Select * from Dec_Campo_Inp_Ud /**/";
    public static final String TABLE_NAME = "Dec_Campo_Inp_Ud";
    public static final String COL_ID_CAMPO_INP_UD = "id_campo_inp_ud";
    public static final String COL_ID_TIPO_SERIE = "id_tipo_serie";
    public static final String COL_PG_ORD_CAMPO = "pg_ord_campo";
    public static final String COL_NM_CAMPO = "nm_campo";
    public static final String COL_TI_CAMPO = "ti_campo";
    public static final String COL_TI_TRASFORM_CAMPO = "ti_trasform_campo";
    public static final String COL_ID_ATTRIB_DATI_SPEC = "id_attrib_dati_spec";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
        map.put(COL_ID_CAMPO_INP_UD, new ColumnDescriptor(COL_ID_CAMPO_INP_UD, Types.DECIMAL, 22, true));
        map.put(COL_ID_TIPO_SERIE, new ColumnDescriptor(COL_ID_TIPO_SERIE, Types.DECIMAL, 22, false));
        map.put(COL_PG_ORD_CAMPO, new ColumnDescriptor(COL_PG_ORD_CAMPO, Types.DECIMAL, 22, false));
        map.put(COL_NM_CAMPO, new ColumnDescriptor(COL_NM_CAMPO, Types.VARCHAR, 100, false));
        map.put(COL_TI_CAMPO, new ColumnDescriptor(COL_TI_CAMPO, Types.VARCHAR, 20, false));
        map.put(COL_TI_TRASFORM_CAMPO, new ColumnDescriptor(COL_TI_TRASFORM_CAMPO, Types.VARCHAR, 20, false));
        map.put(COL_ID_ATTRIB_DATI_SPEC, new ColumnDescriptor(COL_ID_ATTRIB_DATI_SPEC, Types.DECIMAL, 22, false));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
        return map;
    }

    public String getTableName() {
        return TABLE_NAME;
    }

    public String getStatement() {
        return SELECT;
    }

}
