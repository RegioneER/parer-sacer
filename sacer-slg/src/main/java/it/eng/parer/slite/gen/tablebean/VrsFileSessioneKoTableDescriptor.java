/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna
 * <p/>
 * This program is free software: you can redistribute it and/or modify it under the terms of
 * the GNU Affero General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 * <p/>
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 * <p/>
 * You should have received a copy of the GNU Affero General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

package it.eng.parer.slite.gen.tablebean;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * @author Sloth
 *
 *         Bean per la tabella Vrs_File_Sessione
 *
 */
public class VrsFileSessioneKoTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$TableBeanWriter", comments =
     * "This class was generated by OraTool", date = "Tuesday, 11 March 2014 18:25" )
     */

    public static final String SELECT = "Select * from Vrs_File_Sessione_ko /**/";
    public static final String TABLE_NAME = "Vrs_File_Sessione_ko";
    public static final String COL_ID_FILE_SESSIONE = "id_file_sessione";
    public static final String COL_ID_DATI_SESSIONE_VERS = "id_dati_sessione_vers";
    public static final String COL_PG_FILE_SESSIONE = "pg_file_sessione";
    public static final String COL_NM_FILE_SESSIONE = "nm_file_sessione";
    public static final String COL_TI_STATO_FILE_SESSIONE = "ti_stato_file_sessione";
    public static final String COL_ID_STRUT = "id_strut";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<>();

    static {
        map.put(COL_ID_FILE_SESSIONE, new ColumnDescriptor(COL_ID_FILE_SESSIONE, Types.DECIMAL, 22, true));
        map.put(COL_ID_DATI_SESSIONE_VERS, new ColumnDescriptor(COL_ID_DATI_SESSIONE_VERS, Types.DECIMAL, 22, false));
        map.put(COL_PG_FILE_SESSIONE, new ColumnDescriptor(COL_PG_FILE_SESSIONE, Types.DECIMAL, 22, false));
        map.put(COL_NM_FILE_SESSIONE, new ColumnDescriptor(COL_NM_FILE_SESSIONE, Types.VARCHAR, 254, false));
        map.put(COL_TI_STATO_FILE_SESSIONE, new ColumnDescriptor(COL_TI_STATO_FILE_SESSIONE, Types.VARCHAR, 20, false));
        map.put(COL_ID_STRUT, new ColumnDescriptor(COL_ID_STRUT, Types.DECIMAL, 22, false));
    }

    @Override
    public Map<String, ColumnDescriptor> getColumnMap() {
        return map;
    }

    public String getTableName() {
        return TABLE_NAME;
    }

    public String getStatement() {
        return SELECT;
    }

}
