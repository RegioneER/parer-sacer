package it.eng.parer.slite.gen.tablebean;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.annotation.Generated;

/**
 * @author Sloth
 *
 *         Bean per la tabella Aro_Richiesta_Ra
 *
 */
public class AroRichiestaRaTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$TableBeanWriter", comments =
     * "This class was generated by OraTool", date = "Wednesday, 19 June 2019 16:25" )
     */

    public static final String SELECT = "Select * from Aro_Richiesta_Ra /**/";
    public static final String TABLE_NAME = "Aro_Richiesta_Ra";
    public static final String COL_ID_RICHIESTA_RA = "id_richiesta_ra";
    public static final String COL_TS_INIZIO = "ts_inizio";
    public static final String COL_TS_FINE = "ts_fine";
    public static final String COL_PRIORITA = "priorita";
    public static final String COL_TI_STATO = "ti_stato";
    public static final String COL_CD_ERRORE = "cd_errore";
    public static final String COL_NOTE = "note";
    public static final String COL_ID_STRUT = "id_strut";
    public static final String COL_ID_USER_IAM = "id_user_iam";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
        map.put(COL_ID_RICHIESTA_RA, new ColumnDescriptor(COL_ID_RICHIESTA_RA, Types.DECIMAL, 22, true));
        map.put(COL_TS_INIZIO, new ColumnDescriptor(COL_TS_INIZIO, Types.TIMESTAMP, 11, false));
        map.put(COL_TS_FINE, new ColumnDescriptor(COL_TS_FINE, Types.TIMESTAMP, 11, false));
        map.put(COL_PRIORITA, new ColumnDescriptor(COL_PRIORITA, Types.DECIMAL, 22, false));
        map.put(COL_TI_STATO, new ColumnDescriptor(COL_TI_STATO, Types.VARCHAR, 30, false));
        map.put(COL_CD_ERRORE, new ColumnDescriptor(COL_CD_ERRORE, Types.VARCHAR, 300, false));
        map.put(COL_NOTE, new ColumnDescriptor(COL_NOTE, Types.VARCHAR, 300, false));
        map.put(COL_ID_STRUT, new ColumnDescriptor(COL_ID_STRUT, Types.DECIMAL, 22, false));
        map.put(COL_ID_USER_IAM, new ColumnDescriptor(COL_ID_USER_IAM, Types.DECIMAL, 22, false));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
        return map;
    }

    public String getTableName() {
        return TABLE_NAME;
    }

    public String getStatement() {
        return SELECT;
    }

}
