/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna <p/> This program is free software: you can
 * redistribute it and/or modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License, or (at your option)
 * any later version. <p/> This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. <p/> You should
 * have received a copy of the GNU Affero General Public License along with this program. If not,
 * see <https://www.gnu.org/licenses/>.
 */

package it.eng.parer.slite.gen.tablebean;

import java.math.BigDecimal;

import it.eng.parer.entity.AroIndiceAipUd;
import it.eng.parer.entity.AroUnitaDoc;
import it.eng.spagoLite.db.base.JEEBaseRowInterface;
import it.eng.spagoLite.db.base.row.BaseRow;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * RowBean per la tabella Aro_Indice_Aip_Ud
 *
 */
public class AroIndiceAipUdRowBean extends BaseRow implements JEEBaseRowInterface {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$TableBeanWriter",
     * comments = "This class was generated by OraTool", date = "Wednesday, 20 August 2014 11:07" )
     */
    private static final long serialVersionUID = 1L;

    public static AroIndiceAipUdTableDescriptor TABLE_DESCRIPTOR = new AroIndiceAipUdTableDescriptor();

    public AroIndiceAipUdRowBean() {
	super();
    }

    public TableDescriptor getTableDescriptor() {
	return TABLE_DESCRIPTOR;
    }

    // getter e setter
    public BigDecimal getIdIndiceAip() {
	return getBigDecimal("id_indice_aip");
    }

    public void setIdIndiceAip(BigDecimal idIndiceAip) {
	setObject("id_indice_aip", idIndiceAip);
    }

    public BigDecimal getIdUnitaDoc() {
	return getBigDecimal("id_unita_doc");
    }

    public void setIdUnitaDoc(BigDecimal idUnitaDoc) {
	setObject("id_unita_doc", idUnitaDoc);
    }

    public String getTiFormatoIndiceAip() {
	return getString("ti_formato_indice_aip");
    }

    public void setTiFormatoIndiceAip(String tiFormatoIndiceAip) {
	setObject("ti_formato_indice_aip", tiFormatoIndiceAip);
    }

    public BigDecimal getIdVerIndiceAipLast() {
	return getBigDecimal("id_ver_indice_aip_last");
    }

    public void setIdVerIndiceAipLast(BigDecimal idVerIndiceAipLast) {
	setObject("id_ver_indice_aip_last", idVerIndiceAipLast);
    }

    @Override
    public void entityToRowBean(Object obj) {
	AroIndiceAipUd entity = (AroIndiceAipUd) obj;
	this.setIdIndiceAip(entity.getIdIndiceAip() == null ? null
		: BigDecimal.valueOf(entity.getIdIndiceAip()));

	if (entity.getAroUnitaDoc() != null) {
	    this.setIdUnitaDoc(new BigDecimal(entity.getAroUnitaDoc().getIdUnitaDoc()));
	}

	this.setTiFormatoIndiceAip(entity.getTiFormatoIndiceAip());
	this.setIdVerIndiceAipLast(entity.getIdVerIndiceAipLast());
    }

    @Override
    public AroIndiceAipUd rowBeanToEntity() {
	AroIndiceAipUd entity = new AroIndiceAipUd();
	if (this.getIdIndiceAip() != null) {
	    entity.setIdIndiceAip(this.getIdIndiceAip().longValue());
	}
	if (this.getIdUnitaDoc() != null) {
	    if (entity.getAroUnitaDoc() == null) {
		entity.setAroUnitaDoc(new AroUnitaDoc());
	    }
	    entity.getAroUnitaDoc().setIdUnitaDoc(this.getIdUnitaDoc().longValue());
	}
	entity.setTiFormatoIndiceAip(this.getTiFormatoIndiceAip());
	entity.setIdVerIndiceAipLast(this.getIdVerIndiceAipLast());
	return entity;
    }

    // gestione della paginazione
    public void setRownum(Integer rownum) {
	setObject("rownum", rownum);
    }

    public Integer getRownum() {
	return Integer.parseInt(getObject("rownum").toString());
    }

    public void setRnum(Integer rnum) {
	setObject("rnum", rnum);
    }

    public Integer getRnum() {
	return Integer.parseInt(getObject("rnum").toString());
    }

    public void setNumrecords(Integer numRecords) {
	setObject("numrecords", numRecords);
    }

    public Integer getNumrecords() {
	return Integer.parseInt(getObject("numrecords").toString());
    }

}
