/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna
 * <p/>
 * This program is free software: you can redistribute it and/or modify it under the terms of
 * the GNU Affero General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 * <p/>
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 * <p/>
 * You should have received a copy of the GNU Affero General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

package it.eng.parer.slite.gen.viewbean;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * @author Sloth
 *
 *         Bean per la tabella Ser_V_Vis_Vol_Ver_Serie_Ud
 *
 */
public class SerVVisVolVerSerieUdTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$ViewBeanWriter", comments =
     * "This class was generated by OraTool", date = "Tuesday, 19 January 2016 12:05" )
     */

    public static final String SELECT = "Select * from Ser_V_Vis_Vol_Ver_Serie_Ud /**/";
    public static final String TABLE_NAME = "Ser_V_Vis_Vol_Ver_Serie_Ud";
    public static final String COL_ID_SERIE = "id_serie";
    public static final String COL_ID_STRUT = "id_strut";
    public static final String COL_CD_COMPOSITO_SERIE = "cd_composito_serie";
    public static final String COL_AA_SERIE = "aa_serie";
    public static final String COL_DS_SERIE = "ds_serie";
    public static final String COL_ID_TIPO_SERIE = "id_tipo_serie";
    public static final String COL_NM_STRUT = "nm_strut";
    public static final String COL_ID_ENTE = "id_ente";
    public static final String COL_NM_ENTE = "nm_ente";
    public static final String COL_ID_AMBIENTE = "id_ambiente";
    public static final String COL_NM_AMBIENTE = "nm_ambiente";
    public static final String COL_NM_TIPO_SERIE = "nm_tipo_serie";
    public static final String COL_ID_VER_SERIE = "id_ver_serie";
    public static final String COL_CD_VER_SERIE = "cd_ver_serie";
    public static final String COL_DT_INIZIO_SEL_SERIE = "dt_inizio_sel_serie";
    public static final String COL_DT_FINE_SEL_SERIE = "dt_fine_sel_serie";
    public static final String COL_ID_STATO_VER_SERIE_COR = "id_stato_ver_serie_cor";
    public static final String COL_TI_STATO_VER_SERIE = "ti_stato_ver_serie";
    public static final String COL_ID_VOL_VER_SERIE = "id_vol_ver_serie";
    public static final String COL_NI_UNITA_DOC_VOL = "ni_unita_doc_vol";
    public static final String COL_CD_FIRST_UNITA_DOC_VOL = "cd_first_unita_doc_vol";
    public static final String COL_DT_FIRST_UNITA_DOC_VOL = "dt_first_unita_doc_vol";
    public static final String COL_CD_LAST_UNITA_DOC_VOL = "cd_last_unita_doc_vol";
    public static final String COL_DT_LAST_UNITA_DOC_VOL = "dt_last_unita_doc_vol";
    public static final String COL_BL_IX_VOL = "bl_ix_vol";
    public static final String COL_CD_VER_XSD_IX_VOL = "cd_ver_xsd_ix_vol";
    public static final String COL_DS_HASH_IX_VOL = "ds_hash_ix_vol";
    public static final String COL_DS_ALGO_HASH_IX_VOL = "ds_algo_hash_ix_vol";
    public static final String COL_CD_ENCODING_HASH_IX_VOL = "cd_encoding_hash_ix_vol";
    public static final String COL_DT_CREAZIONE = "dt_creazione";
    public static final String COL_CRITERIO_ORD = "criterio_ord";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
        map.put(COL_ID_SERIE, new ColumnDescriptor(COL_ID_SERIE, Types.DECIMAL, 22, true));
        map.put(COL_ID_STRUT, new ColumnDescriptor(COL_ID_STRUT, Types.DECIMAL, 22, true));
        map.put(COL_CD_COMPOSITO_SERIE, new ColumnDescriptor(COL_CD_COMPOSITO_SERIE, Types.VARCHAR, 100, true));
        map.put(COL_AA_SERIE, new ColumnDescriptor(COL_AA_SERIE, Types.DECIMAL, 22, true));
        map.put(COL_DS_SERIE, new ColumnDescriptor(COL_DS_SERIE, Types.VARCHAR, 254, true));
        map.put(COL_ID_TIPO_SERIE, new ColumnDescriptor(COL_ID_TIPO_SERIE, Types.DECIMAL, 22, true));
        map.put(COL_NM_STRUT, new ColumnDescriptor(COL_NM_STRUT, Types.VARCHAR, 100, true));
        map.put(COL_ID_ENTE, new ColumnDescriptor(COL_ID_ENTE, Types.DECIMAL, 22, true));
        map.put(COL_NM_ENTE, new ColumnDescriptor(COL_NM_ENTE, Types.VARCHAR, 100, true));
        map.put(COL_ID_AMBIENTE, new ColumnDescriptor(COL_ID_AMBIENTE, Types.DECIMAL, 22, true));
        map.put(COL_NM_AMBIENTE, new ColumnDescriptor(COL_NM_AMBIENTE, Types.VARCHAR, 100, true));
        map.put(COL_NM_TIPO_SERIE, new ColumnDescriptor(COL_NM_TIPO_SERIE, Types.VARCHAR, 100, true));
        map.put(COL_ID_VER_SERIE, new ColumnDescriptor(COL_ID_VER_SERIE, Types.DECIMAL, 22, true));
        map.put(COL_CD_VER_SERIE, new ColumnDescriptor(COL_CD_VER_SERIE, Types.VARCHAR, 100, true));
        map.put(COL_DT_INIZIO_SEL_SERIE, new ColumnDescriptor(COL_DT_INIZIO_SEL_SERIE, Types.TIMESTAMP, 7, true));
        map.put(COL_DT_FINE_SEL_SERIE, new ColumnDescriptor(COL_DT_FINE_SEL_SERIE, Types.TIMESTAMP, 7, true));
        map.put(COL_ID_STATO_VER_SERIE_COR, new ColumnDescriptor(COL_ID_STATO_VER_SERIE_COR, Types.DECIMAL, 22, true));
        map.put(COL_TI_STATO_VER_SERIE, new ColumnDescriptor(COL_TI_STATO_VER_SERIE, Types.VARCHAR, 20, true));
        map.put(COL_ID_VOL_VER_SERIE, new ColumnDescriptor(COL_ID_VOL_VER_SERIE, Types.DECIMAL, 22, true));
        map.put(COL_NI_UNITA_DOC_VOL, new ColumnDescriptor(COL_NI_UNITA_DOC_VOL, Types.DECIMAL, 22, true));
        map.put(COL_CD_FIRST_UNITA_DOC_VOL, new ColumnDescriptor(COL_CD_FIRST_UNITA_DOC_VOL, Types.VARCHAR, 254, true));
        map.put(COL_DT_FIRST_UNITA_DOC_VOL, new ColumnDescriptor(COL_DT_FIRST_UNITA_DOC_VOL, Types.TIMESTAMP, 7, true));
        map.put(COL_CD_LAST_UNITA_DOC_VOL, new ColumnDescriptor(COL_CD_LAST_UNITA_DOC_VOL, Types.VARCHAR, 254, true));
        map.put(COL_DT_LAST_UNITA_DOC_VOL, new ColumnDescriptor(COL_DT_LAST_UNITA_DOC_VOL, Types.TIMESTAMP, 7, true));
        map.put(COL_BL_IX_VOL, new ColumnDescriptor(COL_BL_IX_VOL, Types.CLOB, 4000, true));
        map.put(COL_CD_VER_XSD_IX_VOL, new ColumnDescriptor(COL_CD_VER_XSD_IX_VOL, Types.VARCHAR, 100, true));
        map.put(COL_DS_HASH_IX_VOL, new ColumnDescriptor(COL_DS_HASH_IX_VOL, Types.VARCHAR, 50, true));
        map.put(COL_DS_ALGO_HASH_IX_VOL, new ColumnDescriptor(COL_DS_ALGO_HASH_IX_VOL, Types.VARCHAR, 254, true));
        map.put(COL_CD_ENCODING_HASH_IX_VOL,
                new ColumnDescriptor(COL_CD_ENCODING_HASH_IX_VOL, Types.VARCHAR, 20, true));
        map.put(COL_DT_CREAZIONE, new ColumnDescriptor(COL_DT_CREAZIONE, Types.TIMESTAMP, 7, true));
        map.put(COL_CRITERIO_ORD, new ColumnDescriptor(COL_CRITERIO_ORD, Types.VARCHAR, 1024, true));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
        return map;
    }

    public String getTableName() {
        return TABLE_NAME;
    }

    public String getStatement() {
        return SELECT;
    }

}
