package it.eng.parer.slite.gen.viewbean;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.annotation.Generated;

/**
 * @author Sloth
 *
 *         Bean per la tabella Dec_V_Tree_Titol
 *
 */
public class DecVTreeTitolTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$ViewBeanWriter", comments =
     * "This class was generated by OraTool", date = "Wednesday, 4 February 2015 10:54" )
     */

    public static final String SELECT = "Select * from Dec_V_Tree_Titol /**/";
    public static final String TABLE_NAME = "Dec_V_Tree_Titol";
    public static final String COL_ID_VOCE_TITOL = "id_voce_titol";
    public static final String COL_ID_TITOL = "id_titol";
    public static final String COL_CD_COMPOSITO_VOCE_TITOL = "cd_composito_voce_titol";
    public static final String COL_CD_VOCE_TITOL = "cd_voce_titol";
    public static final String COL_ID_LIVELLO_TITOL = "id_livello_titol";
    public static final String COL_NM_LIVELLO_TITOL = "nm_livello_titol";
    public static final String COL_NI_LIVELLO = "ni_livello";
    public static final String COL_NI_ORD_VOCE_TITOL = "ni_ord_voce_titol";
    public static final String COL_DT_ISTITUZ = "dt_istituz";
    public static final String COL_DT_SOPPRES = "dt_soppres";
    public static final String COL_ID_VOCE_TITOL_PADRE = "id_voce_titol_padre";
    public static final String COL_CD_COMPOSITO_VOCE_PADRE = "cd_composito_voce_padre";
    public static final String COL_NI_FASCIC = "ni_fascic";
    public static final String COL_NI_FASCIC_VOCI_FIGLIE = "ni_fascic_voci_figlie";
    public static final String COL_ID_VAL_VOCE_TITOL = "id_val_voce_titol";
    public static final String COL_DS_VOCE_TITOL = "ds_voce_titol";
    public static final String COL_DT_INI_VAL = "dt_ini_val";
    public static final String COL_DT_FIN_VAL = "dt_fin_val";
    public static final String COL_FL_USO_CLASSIF = "fl_uso_classif";
    public static final String COL_NI_ANNI_CONSERV = "ni_anni_conserv";
    public static final String COL_DL_NOTE = "dl_note";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
        map.put(COL_ID_VOCE_TITOL, new ColumnDescriptor(COL_ID_VOCE_TITOL, Types.DECIMAL, 22, true));
        map.put(COL_ID_TITOL, new ColumnDescriptor(COL_ID_TITOL, Types.DECIMAL, 22, true));
        map.put(COL_CD_COMPOSITO_VOCE_TITOL,
                new ColumnDescriptor(COL_CD_COMPOSITO_VOCE_TITOL, Types.VARCHAR, 100, true));
        map.put(COL_CD_VOCE_TITOL, new ColumnDescriptor(COL_CD_VOCE_TITOL, Types.VARCHAR, 100, true));
        map.put(COL_ID_LIVELLO_TITOL, new ColumnDescriptor(COL_ID_LIVELLO_TITOL, Types.DECIMAL, 22, true));
        map.put(COL_NM_LIVELLO_TITOL, new ColumnDescriptor(COL_NM_LIVELLO_TITOL, Types.VARCHAR, 100, true));
        map.put(COL_NI_LIVELLO, new ColumnDescriptor(COL_NI_LIVELLO, Types.DECIMAL, 22, true));
        map.put(COL_NI_ORD_VOCE_TITOL, new ColumnDescriptor(COL_NI_ORD_VOCE_TITOL, Types.DECIMAL, 22, true));
        map.put(COL_DT_ISTITUZ, new ColumnDescriptor(COL_DT_ISTITUZ, Types.TIMESTAMP, 7, true));
        map.put(COL_DT_SOPPRES, new ColumnDescriptor(COL_DT_SOPPRES, Types.TIMESTAMP, 7, true));
        map.put(COL_ID_VOCE_TITOL_PADRE, new ColumnDescriptor(COL_ID_VOCE_TITOL_PADRE, Types.DECIMAL, 22, true));
        map.put(COL_CD_COMPOSITO_VOCE_PADRE,
                new ColumnDescriptor(COL_CD_COMPOSITO_VOCE_PADRE, Types.VARCHAR, 100, true));
        map.put(COL_NI_FASCIC, new ColumnDescriptor(COL_NI_FASCIC, Types.DECIMAL, 22, true));
        map.put(COL_NI_FASCIC_VOCI_FIGLIE, new ColumnDescriptor(COL_NI_FASCIC_VOCI_FIGLIE, Types.DECIMAL, 22, true));
        map.put(COL_ID_VAL_VOCE_TITOL, new ColumnDescriptor(COL_ID_VAL_VOCE_TITOL, Types.DECIMAL, 22, true));
        map.put(COL_DS_VOCE_TITOL, new ColumnDescriptor(COL_DS_VOCE_TITOL, Types.VARCHAR, 1024, true));
        map.put(COL_DT_INI_VAL, new ColumnDescriptor(COL_DT_INI_VAL, Types.TIMESTAMP, 7, true));
        map.put(COL_DT_FIN_VAL, new ColumnDescriptor(COL_DT_FIN_VAL, Types.TIMESTAMP, 7, true));
        map.put(COL_FL_USO_CLASSIF, new ColumnDescriptor(COL_FL_USO_CLASSIF, Types.VARCHAR, 1, true));
        map.put(COL_NI_ANNI_CONSERV, new ColumnDescriptor(COL_NI_ANNI_CONSERV, Types.DECIMAL, 22, true));
        map.put(COL_DL_NOTE, new ColumnDescriptor(COL_DL_NOTE, Types.VARCHAR, 1024, true));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
        return map;
    }

    public String getTableName() {
        return TABLE_NAME;
    }

    public String getStatement() {
        return SELECT;
    }

}
