/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna
 * <p/>
 * This program is free software: you can redistribute it and/or modify it under the terms of
 * the GNU Affero General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 * <p/>
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 * <p/>
 * You should have received a copy of the GNU Affero General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

package it.eng.parer.slite.gen.tablebean;

import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.sql.Timestamp;

import it.eng.parer.entity.DecTipoRapprComp;
import it.eng.parer.entity.DecTrasformTipoRappr;
import it.eng.spagoLite.db.base.JEEBaseRowInterface;
import it.eng.spagoLite.db.base.row.BaseRow;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * RowBean per la tabella Dec_Trasform_Tipo_Rappr
 *
 */
public class DecTrasformTipoRapprRowBean extends BaseRow implements JEEBaseRowInterface {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$TableBeanWriter", comments =
     * "This class was generated by OraTool", date = "Tuesday, 7 October 2014 15:18" )
     */
    private static final long serialVersionUID = 1L;

    public static DecTrasformTipoRapprTableDescriptor TABLE_DESCRIPTOR = new DecTrasformTipoRapprTableDescriptor();

    public DecTrasformTipoRapprRowBean() {
        super();
    }

    public TableDescriptor getTableDescriptor() {
        return TABLE_DESCRIPTOR;
    }

    // getter e setter
    public BigDecimal getIdTrasformTipoRappr() {
        return getBigDecimal("id_trasform_tipo_rappr");
    }

    public void setIdTrasformTipoRappr(BigDecimal idTrasformTipoRappr) {
        setObject("id_trasform_tipo_rappr", idTrasformTipoRappr);
    }

    public BigDecimal getIdTipoRapprComp() {
        return getBigDecimal("id_tipo_rappr_comp");
    }

    public void setIdTipoRapprComp(BigDecimal idTipoRapprComp) {
        setObject("id_tipo_rappr_comp", idTipoRapprComp);
    }

    public String getDsHashFileTrasform() {
        return getString("ds_hash_file_trasform");
    }

    public void setDsHashFileTrasform(String dsHashFileTrasform) {
        setObject("ds_hash_file_trasform", dsHashFileTrasform);
    }

    /* st_file_trasform */
    public byte[] getBlFileTrasform() {
        return (byte[]) getObject("bl_file_trasform");
    }

    public void setBlFileTrasform(byte[] blFileTrasform) {
        setObject("bl_file_trasform", blFileTrasform);
    }

    public String getTiStatoFileTrasform() {
        return getString("ti_stato_file_trasform");
    }

    public void setTiStatoFileTrasform(String tiStatoFileTrasform) {
        setObject("ti_stato_file_trasform", tiStatoFileTrasform);
    }

    public String getTiStatoTrasform() {
        return "Pippo";
    }

    public void setTiStatoTrasform(String tiStatoTrasform) {

    }

    public String getNmTrasform() {
        return getString("nm_trasform");
    }

    public void setNmTrasform(String nmTrasform) {
        setObject("nm_trasform", nmTrasform);
    }

    public String getCdVersioneTrasform() {
        return getString("cd_versione_trasform");
    }

    public void setCdVersioneTrasform(String cdVersioneTrasform) {
        setObject("cd_versione_trasform", cdVersioneTrasform);
    }

    public Timestamp getDtInsTrasform() {
        return getTimestamp("dt_ins_trasform");
    }

    public void setDtInsTrasform(Timestamp dtInsTrasform) {
        setObject("dt_ins_trasform", dtInsTrasform);
    }

    public Timestamp getDtLastModTrasform() {
        return getTimestamp("dt_last_mod_trasform");
    }

    public void setDtLastModTrasform(Timestamp dtLastModTrasform) {
        setObject("dt_last_mod_trasform", dtLastModTrasform);
    }

    public BigDecimal getIdCompDocTest() {
        return getBigDecimal("id_comp_doc_test");
    }

    public void setIdCompDocTest(BigDecimal idCompDocTest) {
        setObject("id_comp_doc_test", idCompDocTest);
    }

    public String getStFileTrasform() {
        byte[] blob = getBlFileTrasform();
        String st_file_trasform = null;
        if (blob != null) {

            try {
                st_file_trasform = new String(blob, 0, 150000, "UTF-8");
            } catch (UnsupportedEncodingException ex) {
                st_file_trasform = "Tipo file non visualizzabile come testo";
            }

        }
        return st_file_trasform;
    }

    public void setStFileTrasform(String stFileTrasform) {
        setObject("st_file_trasform", stFileTrasform);
    }

    @Override
    public void entityToRowBean(Object obj) {
        DecTrasformTipoRappr entity = (DecTrasformTipoRappr) obj;

        this.setIdTrasformTipoRappr(
                entity.getIdTrasformTipoRappr() == null ? null : BigDecimal.valueOf(entity.getIdTrasformTipoRappr()));

        if (entity.getDecTipoRapprComp() != null) {
            this.setIdTipoRapprComp(new BigDecimal(entity.getDecTipoRapprComp().getIdTipoRapprComp()));
        }

        this.setDsHashFileTrasform(entity.getDsHashFileTrasform());

        byte[] blob = entity.getBlFileTrasform();
        this.setBlFileTrasform(blob);
        String st_file_trasform = null;
        if (blob != null) {

            try {
                int maxvalue = blob.length;
                if (maxvalue > 150000) {
                    maxvalue = 150000;
                }
                st_file_trasform = new String(blob, 0, maxvalue, "UTF-8");
            } catch (UnsupportedEncodingException ex) {
                st_file_trasform = "Tipo file non visualizzabile come testo";
            }
            this.setStFileTrasform(st_file_trasform);

        }

        this.setTiStatoFileTrasform(entity.getTiStatoFileTrasform());
        this.setNmTrasform(entity.getNmTrasform());
        this.setCdVersioneTrasform(entity.getCdVersioneTrasform());
        if (entity.getDtInsTrasform() != null) {
            this.setDtInsTrasform(new Timestamp(entity.getDtInsTrasform().getTime()));
        }
        if (entity.getDtLastModTrasform() != null) {
            this.setDtLastModTrasform(new Timestamp(entity.getDtLastModTrasform().getTime()));
        }
        this.setIdCompDocTest(entity.getIdCompDocTest());
    }

    @Override
    public DecTrasformTipoRappr rowBeanToEntity() {
        DecTrasformTipoRappr entity = new DecTrasformTipoRappr();
        if (this.getIdTrasformTipoRappr() != null) {
            entity.setIdTrasformTipoRappr(this.getIdTrasformTipoRappr().longValue());
        }
        if (this.getIdTipoRapprComp() != null) {
            if (entity.getDecTipoRapprComp() == null) {
                entity.setDecTipoRapprComp(new DecTipoRapprComp());
            }
            entity.getDecTipoRapprComp().setIdTipoRapprComp(this.getIdTipoRapprComp().longValue());
        }
        entity.setDsHashFileTrasform(this.getDsHashFileTrasform());
        entity.setBlFileTrasform(this.getBlFileTrasform());
        entity.setTiStatoFileTrasform(this.getTiStatoFileTrasform());
        entity.setNmTrasform(this.getNmTrasform());
        entity.setCdVersioneTrasform(this.getCdVersioneTrasform());
        entity.setDtInsTrasform(this.getDtInsTrasform());
        entity.setDtLastModTrasform(this.getDtLastModTrasform());
        entity.setIdCompDocTest(this.getIdCompDocTest());
        return entity;
    }

    // gestione della paginazione
    public void setRownum(Integer rownum) {
        setObject("rownum", rownum);
    }

    public Integer getRownum() {
        return Integer.parseInt(getObject("rownum").toString());
    }

    public void setRnum(Integer rnum) {
        setObject("rnum", rnum);
    }

    public Integer getRnum() {
        return Integer.parseInt(getObject("rnum").toString());
    }

    public void setNumrecords(Integer numRecords) {
        setObject("numrecords", numRecords);
    }

    public Integer getNumrecords() {
        return Integer.parseInt(getObject("numrecords").toString());
    }

    public String getRisultatoTestTrasformatore() {
        return getString("risultato_test_trasformatore");
    }

    public void setRisultatoTestTrasformatore(String successo) {
        setObject("risultato_test_trasformatore", successo);
    }

}
