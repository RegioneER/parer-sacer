package it.eng.parer.slite.gen.tablebean;

import it.eng.spagoLite.db.base.BaseRowInterface;
import it.eng.spagoLite.db.base.JEEBaseRowInterface;
import it.eng.spagoLite.db.base.row.BaseRow;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;
import org.eclipse.persistence.internal.indirection.DatabaseValueHolder;
import org.eclipse.persistence.internal.sessions.AbstractRecord;
import it.eng.parer.entity.DecTrasformTipoRappr;
import it.eng.parer.entity.DecTipoRapprComp;
import java.io.UnsupportedEncodingException;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.sql.Clob;
import java.sql.Types;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.Generated;

/**
 * RowBean per la tabella Dec_Trasform_Tipo_Rappr
 *
 */
public class DecTrasformTipoRapprRowBean extends BaseRow implements BaseRowInterface, JEEBaseRowInterface {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$TableBeanWriter", comments =
     * "This class was generated by OraTool", date = "Tuesday, 7 October 2014 15:18" )
     */

    public static DecTrasformTipoRapprTableDescriptor TABLE_DESCRIPTOR = new DecTrasformTipoRapprTableDescriptor();

    public DecTrasformTipoRapprRowBean() {
        super();
    }

    public TableDescriptor getTableDescriptor() {
        return TABLE_DESCRIPTOR;
    }

    // getter e setter
    public BigDecimal getIdTrasformTipoRappr() {
        return getBigDecimal("id_trasform_tipo_rappr");
    }

    public void setIdTrasformTipoRappr(BigDecimal id_trasform_tipo_rappr) {
        setObject("id_trasform_tipo_rappr", id_trasform_tipo_rappr);
    }

    public BigDecimal getIdTipoRapprComp() {
        return getBigDecimal("id_tipo_rappr_comp");
    }

    public void setIdTipoRapprComp(BigDecimal id_tipo_rappr_comp) {
        setObject("id_tipo_rappr_comp", id_tipo_rappr_comp);
    }

    public String getDsHashFileTrasform() {
        return getString("ds_hash_file_trasform");
    }

    public void setDsHashFileTrasform(String ds_hash_file_trasform) {
        setObject("ds_hash_file_trasform", ds_hash_file_trasform);
    }

    /* st_file_trasform */
    public byte[] getBlFileTrasform() {
        return (byte[]) getObject("bl_file_trasform");
    }

    public void setBlFileTrasform(byte[] bl_file_trasform) {
        setObject("bl_file_trasform", bl_file_trasform);
    }

    public String getTiStatoFileTrasform() {
        return getString("ti_stato_file_trasform");
    }

    public void setTiStatoFileTrasform(String ti_stato_file_trasform) {
        setObject("ti_stato_file_trasform", ti_stato_file_trasform);
    }

    public String getTiStatoTrasform() {
        return "Pippo";
    }

    public void setTiStatoTrasform(String ti_stato_trasform) {

    }

    public String getNmTrasform() {
        return getString("nm_trasform");
    }

    public void setNmTrasform(String nm_trasform) {
        setObject("nm_trasform", nm_trasform);
    }

    public String getCdVersioneTrasform() {
        return getString("cd_versione_trasform");
    }

    public void setCdVersioneTrasform(String cd_versione_trasform) {
        setObject("cd_versione_trasform", cd_versione_trasform);
    }

    public Timestamp getDtInsTrasform() {
        return getTimestamp("dt_ins_trasform");
    }

    public void setDtInsTrasform(Timestamp dt_ins_trasform) {
        setObject("dt_ins_trasform", dt_ins_trasform);
    }

    public Timestamp getDtLastModTrasform() {
        return getTimestamp("dt_last_mod_trasform");
    }

    public void setDtLastModTrasform(Timestamp dt_last_mod_trasform) {
        setObject("dt_last_mod_trasform", dt_last_mod_trasform);
    }

    public BigDecimal getIdCompDocTest() {
        return getBigDecimal("id_comp_doc_test");
    }

    public void setIdCompDocTest(BigDecimal id_comp_doc_test) {
        setObject("id_comp_doc_test", id_comp_doc_test);
    }

    public String getStFileTrasform() {
        byte[] blob = getBlFileTrasform();
        String st_file_trasform = null;
        if (blob != null) {

            try {
                st_file_trasform = new String(blob, 0, 150000, "UTF-8");
            } catch (UnsupportedEncodingException ex) {
                st_file_trasform = "Tipo file non visualizzabile come testo";
            }

        }
        return st_file_trasform;
    }

    public void setStFileTrasform(String st_file_trasform) {
        setObject("st_file_trasform", st_file_trasform);
    }

    @Override
    public void entityToRowBean(Object obj) {
        DecTrasformTipoRappr entity = (DecTrasformTipoRappr) obj;
        AbstractRecord ar;
        this.setIdTrasformTipoRappr(new BigDecimal(entity.getIdTrasformTipoRappr()));
        if (entity._persistence_get_decTipoRapprComp_vh() instanceof DatabaseValueHolder) {
            if ((ar = ((DatabaseValueHolder) entity._persistence_get_decTipoRapprComp_vh()).getRow()) != null) {
                this.setIdTipoRapprComp(new BigDecimal((Long) ar.get("DEC_TRASFORM_TIPO_RAPPR.ID_TIPO_RAPPR_COMP")));
            }
        } else {
            if (entity.getDecTipoRapprComp() != null) {
                this.setIdTipoRapprComp(new BigDecimal(entity.getDecTipoRapprComp().getIdTipoRapprComp()));
            }
        }
        this.setDsHashFileTrasform(entity.getDsHashFileTrasform());

        byte[] blob = entity.getBlFileTrasform();
        this.setBlFileTrasform(blob);
        String st_file_trasform = null;
        if (blob != null) {

            try {
                int maxvalue = blob.length;
                if (maxvalue > 150000)
                    maxvalue = 150000;
                st_file_trasform = new String(blob, 0, maxvalue, "UTF-8");
            } catch (UnsupportedEncodingException ex) {
                st_file_trasform = "Tipo file non visualizzabile come testo";
            }
            this.setStFileTrasform(st_file_trasform);

        }

        this.setTiStatoFileTrasform(entity.getTiStatoFileTrasform());
        this.setNmTrasform(entity.getNmTrasform());
        this.setCdVersioneTrasform(entity.getCdVersioneTrasform());
        if (entity.getDtInsTrasform() != null) {
            this.setDtInsTrasform(new Timestamp(entity.getDtInsTrasform().getTime()));
        }
        if (entity.getDtLastModTrasform() != null) {
            this.setDtLastModTrasform(new Timestamp(entity.getDtLastModTrasform().getTime()));
        }
        this.setIdCompDocTest(entity.getIdCompDocTest());
    }

    @Override
    public DecTrasformTipoRappr rowBeanToEntity() {
        DecTrasformTipoRappr entity = new DecTrasformTipoRappr();
        if (this.getIdTrasformTipoRappr() != null) {
            entity.setIdTrasformTipoRappr(this.getIdTrasformTipoRappr().longValue());
        }
        if (this.getIdTipoRapprComp() != null) {
            if (entity.getDecTipoRapprComp() == null) {
                entity.setDecTipoRapprComp(new DecTipoRapprComp());
            }
            entity.getDecTipoRapprComp().setIdTipoRapprComp(this.getIdTipoRapprComp().longValue());
        }
        entity.setDsHashFileTrasform(this.getDsHashFileTrasform());
        entity.setBlFileTrasform(this.getBlFileTrasform());
        entity.setTiStatoFileTrasform(this.getTiStatoFileTrasform());
        entity.setNmTrasform(this.getNmTrasform());
        entity.setCdVersioneTrasform(this.getCdVersioneTrasform());
        entity.setDtInsTrasform(this.getDtInsTrasform());
        entity.setDtLastModTrasform(this.getDtLastModTrasform());
        entity.setIdCompDocTest(this.getIdCompDocTest());
        return entity;
    }

    // gestione della paginazione
    public void setRownum(Integer rownum) {
        setObject("rownum", rownum);
    }

    public Integer getRownum() {
        return Integer.parseInt(getObject("rownum").toString());
    }

    public void setRnum(Integer rnum) {
        setObject("rnum", rnum);
    }

    public Integer getRnum() {
        return Integer.parseInt(getObject("rnum").toString());
    }

    public void setNumrecords(Integer numRecords) {
        setObject("numrecords", numRecords);
    }

    public Integer getNumrecords() {
        return Integer.parseInt(getObject("numrecords").toString());
    }

    public String getRisultatoTestTrasformatore() {
        return getString("risultato_test_trasformatore");
    }

    public void setRisultatoTestTrasformatore(String successo) {
        setObject("risultato_test_trasformatore", successo);
    }

}
