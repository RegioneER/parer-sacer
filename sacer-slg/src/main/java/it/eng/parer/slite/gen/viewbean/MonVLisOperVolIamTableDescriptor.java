/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna
 * <p/>
 * This program is free software: you can redistribute it and/or modify it under the terms of
 * the GNU Affero General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 * <p/>
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 * <p/>
 * You should have received a copy of the GNU Affero General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

package it.eng.parer.slite.gen.viewbean;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * @author Sloth
 *
 *         Bean per la tabella Mon_V_Lis_Oper_Vol_Iam
 *
 */
public class MonVLisOperVolIamTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$ViewBeanWriter", comments =
     * "This class was generated by OraTool", date = "Thursday, 13 February 2014 18:10" )
     */

    public static final String SELECT = "Select * from Mon_V_Lis_Oper_Vol_Iam /**/";
    public static final String TABLE_NAME = "Mon_V_Lis_Oper_Vol_Iam";
    public static final String COL_ID_AMBIENTE = "id_ambiente";
    public static final String COL_ID_ENTE = "id_ente";
    public static final String COL_ID_STRUT = "id_strut";
    public static final String COL_ID_LOG_OPER = "id_log_oper";
    public static final String COL_NM_AMBIENTE = "nm_ambiente";
    public static final String COL_NM_ENTE = "nm_ente";
    public static final String COL_NM_STRUT = "nm_strut";
    public static final String COL_TI_OPER = "ti_oper";
    public static final String COL_DT_OPER = "dt_oper";
    public static final String COL_NM_VOLUME_CONSERV = "nm_volume_conserv";
    public static final String COL_TI_MOD_OPER = "ti_mod_oper";
    public static final String COL_DT_SCAD_CHIUS = "dt_scad_chius";
    public static final String COL_NI_MAX_UNITA_DOC = "ni_max_unita_doc";
    public static final String COL_NI_MAX_COMP = "ni_max_comp";
    public static final String COL_CD_DOC = "cd_doc";
    public static final String COL_DL_MOTIVO_CHIUS = "dl_motivo_chius";
    public static final String COL_NM_COGNOME_FIRMATARIO = "nm_cognome_firmatario";
    public static final String COL_NM_NOME_FIRMATARIO = "nm_nome_firmatario";
    public static final String COL_ID_LOG_JOB = "id_log_job";
    public static final String COL_ID_VOLUME_CONSERV = "id_volume_conserv";
    public static final String COL_ID_DOC = "id_doc";
    public static final String COL_ID_UNITA_DOC = "id_unita_doc";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
        map.put(COL_ID_AMBIENTE, new ColumnDescriptor(COL_ID_AMBIENTE, Types.DECIMAL, 22, true));
        map.put(COL_ID_ENTE, new ColumnDescriptor(COL_ID_ENTE, Types.DECIMAL, 22, true));
        map.put(COL_ID_STRUT, new ColumnDescriptor(COL_ID_STRUT, Types.DECIMAL, 22, true));
        map.put(COL_ID_LOG_OPER, new ColumnDescriptor(COL_ID_LOG_OPER, Types.DECIMAL, 22, true));
        map.put(COL_NM_AMBIENTE, new ColumnDescriptor(COL_NM_AMBIENTE, Types.VARCHAR, 100, true));
        map.put(COL_NM_ENTE, new ColumnDescriptor(COL_NM_ENTE, Types.VARCHAR, 100, true));
        map.put(COL_NM_STRUT, new ColumnDescriptor(COL_NM_STRUT, Types.VARCHAR, 100, true));
        map.put(COL_TI_OPER, new ColumnDescriptor(COL_TI_OPER, Types.VARCHAR, 30, true));
        map.put(COL_DT_OPER, new ColumnDescriptor(COL_DT_OPER, Types.TIMESTAMP, 7, true));
        map.put(COL_NM_VOLUME_CONSERV, new ColumnDescriptor(COL_NM_VOLUME_CONSERV, Types.VARCHAR, 100, true));
        map.put(COL_TI_MOD_OPER, new ColumnDescriptor(COL_TI_MOD_OPER, Types.VARCHAR, 10, true));
        map.put(COL_DT_SCAD_CHIUS, new ColumnDescriptor(COL_DT_SCAD_CHIUS, Types.TIMESTAMP, 7, true));
        map.put(COL_NI_MAX_UNITA_DOC, new ColumnDescriptor(COL_NI_MAX_UNITA_DOC, Types.DECIMAL, 22, true));
        map.put(COL_NI_MAX_COMP, new ColumnDescriptor(COL_NI_MAX_COMP, Types.DECIMAL, 22, true));
        map.put(COL_CD_DOC, new ColumnDescriptor(COL_CD_DOC, Types.VARCHAR, 304, true));
        map.put(COL_DL_MOTIVO_CHIUS, new ColumnDescriptor(COL_DL_MOTIVO_CHIUS, Types.VARCHAR, 1024, true));
        map.put(COL_NM_COGNOME_FIRMATARIO, new ColumnDescriptor(COL_NM_COGNOME_FIRMATARIO, Types.VARCHAR, 100, true));
        map.put(COL_NM_NOME_FIRMATARIO, new ColumnDescriptor(COL_NM_NOME_FIRMATARIO, Types.VARCHAR, 100, true));
        map.put(COL_ID_LOG_JOB, new ColumnDescriptor(COL_ID_LOG_JOB, Types.DECIMAL, 22, true));
        map.put(COL_ID_VOLUME_CONSERV, new ColumnDescriptor(COL_ID_VOLUME_CONSERV, Types.DECIMAL, 22, true));
        map.put(COL_ID_DOC, new ColumnDescriptor(COL_ID_DOC, Types.DECIMAL, 22, true));
        map.put(COL_ID_UNITA_DOC, new ColumnDescriptor(COL_ID_UNITA_DOC, Types.DECIMAL, 22, true));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
        return map;
    }

    public String getTableName() {
        return TABLE_NAME;
    }

    public String getStatement() {
        return SELECT;
    }

}
