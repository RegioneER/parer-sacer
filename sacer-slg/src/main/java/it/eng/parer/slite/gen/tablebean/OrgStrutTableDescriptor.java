/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna
 * <p/>
 * This program is free software: you can redistribute it and/or modify it under the terms of
 * the GNU Affero General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 * <p/>
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 * <p/>
 * You should have received a copy of the GNU Affero General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

package it.eng.parer.slite.gen.tablebean;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * @author Sloth
 *
 *         Bean per la tabella Org_Strut
 *
 */
public class OrgStrutTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$TableBeanWriter", comments =
     * "This class was generated by OraTool", date = "Tuesday, 26 February 2019 15:23" )
     */
    public static final String SELECT = "Select * from Org_Strut /**/";
    public static final String TABLE_NAME = "Org_Strut";
    public static final String COL_ID_STRUT = "id_strut";
    public static final String COL_ID_ENTE = "id_ente";
    public static final String COL_NM_STRUT = "nm_strut";
    public static final String COL_DS_STRUT = "ds_strut";
    public static final String COL_ID_CATEG_STRUT = "id_categ_strut";
    public static final String COL_FL_TEMPLATE = "fl_template";
    public static final String COL_CD_IPA = "cd_ipa";
    public static final String COL_ID_ENTE_CONVENZ = "id_ente_convenz";
    public static final String COL_DT_INI_VAL = "dt_ini_val";
    public static final String COL_DT_FINE_VAL = "dt_fine_val";
    public static final String COL_DT_INI_VAL_STRUT = "dt_ini_val_strut";
    public static final String COL_DT_FINE_VAL_STRUT = "dt_fine_val_strut";
    public static final String COL_CD_STRUT_NORMALIZ = "cd_strut_normaliz";
    public static final String COL_DL_NOTE_STRUT = "dl_note_strut";
    public static final String COL_FL_ARCHIVIO_RESTITUITO = "fl_archivio_restituito";
    public static final String COL_FL_CESSATO = "fl_cessato";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
        map.put(COL_ID_STRUT, new ColumnDescriptor(COL_ID_STRUT, Types.DECIMAL, 22, true));
        map.put(COL_ID_ENTE, new ColumnDescriptor(COL_ID_ENTE, Types.DECIMAL, 22, false));
        map.put(COL_NM_STRUT, new ColumnDescriptor(COL_NM_STRUT, Types.VARCHAR, 100, false));
        map.put(COL_DS_STRUT, new ColumnDescriptor(COL_DS_STRUT, Types.VARCHAR, 254, false));
        map.put(COL_ID_CATEG_STRUT, new ColumnDescriptor(COL_ID_CATEG_STRUT, Types.DECIMAL, 22, false));
        map.put(COL_FL_TEMPLATE, new ColumnDescriptor(COL_FL_TEMPLATE, Types.VARCHAR, 1, false));
        map.put(COL_CD_IPA, new ColumnDescriptor(COL_CD_IPA, Types.VARCHAR, 100, false));
        map.put(COL_ID_ENTE_CONVENZ, new ColumnDescriptor(COL_ID_ENTE_CONVENZ, Types.DECIMAL, 22, false));
        map.put(COL_DT_INI_VAL, new ColumnDescriptor(COL_DT_INI_VAL, Types.TIMESTAMP, 7, false));
        map.put(COL_DT_FINE_VAL, new ColumnDescriptor(COL_DT_FINE_VAL, Types.TIMESTAMP, 7, false));
        map.put(COL_DT_INI_VAL_STRUT, new ColumnDescriptor(COL_DT_INI_VAL_STRUT, Types.TIMESTAMP, 7, false));
        map.put(COL_DT_FINE_VAL_STRUT, new ColumnDescriptor(COL_DT_FINE_VAL_STRUT, Types.TIMESTAMP, 7, false));
        map.put(COL_CD_STRUT_NORMALIZ, new ColumnDescriptor(COL_CD_STRUT_NORMALIZ, Types.VARCHAR, 100, false));
        map.put(COL_DL_NOTE_STRUT, new ColumnDescriptor(COL_DL_NOTE_STRUT, Types.VARCHAR, 1024, false));
        map.put(COL_FL_ARCHIVIO_RESTITUITO, new ColumnDescriptor(COL_FL_ARCHIVIO_RESTITUITO, Types.VARCHAR, 1, false));
        map.put(COL_FL_CESSATO, new ColumnDescriptor(COL_FL_CESSATO, Types.VARCHAR, 1, false));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
        return map;
    }

    public String getTableName() {
        return TABLE_NAME;
    }

    public String getStatement() {
        return SELECT;
    }

}
