package it.eng.parer.slite.gen.viewbean;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.annotation.Generated;

/**
 * @author Sloth
 *
 *         Bean per la tabella Aro_V_Lis_Dati_Spec
 *
 */
public class AroVLisDatiSpecTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$ViewBeanWriter", comments =
     * "This class was generated by OraTool", date = "Monday, 23 January 2017 11:22" )
     */

    public static final String SELECT = "Select * from Aro_V_Lis_Dati_Spec /**/";
    public static final String TABLE_NAME = "Aro_V_Lis_Dati_Spec";
    public static final String COL_ID_UNITA_DOC = "id_unita_doc";
    public static final String COL_ID_DOC = "id_doc";
    public static final String COL_ID_COMP_DOC = "id_comp_doc";
    public static final String COL_TI_USO_XSD = "ti_uso_xsd";
    public static final String COL_TI_ENTITA_SACER = "ti_entita_sacer";
    public static final String COL_ID_USO_XSD_DATI_SPEC = "id_uso_xsd_dati_spec";
    public static final String COL_CD_VERSIONE_XSD = "cd_versione_xsd";
    public static final String COL_NM_SISTEMA_MIGRAZ = "nm_sistema_migraz";
    public static final String COL_ID_VALORE_ATTRIB_DATI_SPEC = "id_valore_attrib_dati_spec";
    public static final String COL_NM_ATTRIB_DATI_SPEC = "nm_attrib_dati_spec";
    public static final String COL_DS_ATTRIB_DATI_SPEC = "ds_attrib_dati_spec";
    public static final String COL_DL_VALORE = "dl_valore";
    public static final String COL_NI_ORD_ATTRIB = "ni_ord_attrib";
    public static final String COL_DT_ISTITUZ = "dt_istituz";
    public static final String COL_DT_SOPPRES = "dt_soppres";
    public static final String COL_DS_VERSIONE_XSD = "ds_versione_xsd";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
        map.put(COL_ID_UNITA_DOC, new ColumnDescriptor(COL_ID_UNITA_DOC, Types.DECIMAL, 22, true));
        map.put(COL_ID_DOC, new ColumnDescriptor(COL_ID_DOC, Types.DECIMAL, 22, true));
        map.put(COL_ID_COMP_DOC, new ColumnDescriptor(COL_ID_COMP_DOC, Types.DECIMAL, 22, true));
        map.put(COL_TI_USO_XSD, new ColumnDescriptor(COL_TI_USO_XSD, Types.VARCHAR, 20, true));
        map.put(COL_TI_ENTITA_SACER, new ColumnDescriptor(COL_TI_ENTITA_SACER, Types.VARCHAR, 20, true));
        map.put(COL_ID_USO_XSD_DATI_SPEC, new ColumnDescriptor(COL_ID_USO_XSD_DATI_SPEC, Types.DECIMAL, 22, true));
        map.put(COL_CD_VERSIONE_XSD, new ColumnDescriptor(COL_CD_VERSIONE_XSD, Types.VARCHAR, 100, true));
        map.put(COL_NM_SISTEMA_MIGRAZ, new ColumnDescriptor(COL_NM_SISTEMA_MIGRAZ, Types.VARCHAR, 100, true));
        map.put(COL_ID_VALORE_ATTRIB_DATI_SPEC,
                new ColumnDescriptor(COL_ID_VALORE_ATTRIB_DATI_SPEC, Types.DECIMAL, 22, true));
        map.put(COL_NM_ATTRIB_DATI_SPEC, new ColumnDescriptor(COL_NM_ATTRIB_DATI_SPEC, Types.VARCHAR, 100, true));
        map.put(COL_DS_ATTRIB_DATI_SPEC, new ColumnDescriptor(COL_DS_ATTRIB_DATI_SPEC, Types.VARCHAR, 254, true));
        map.put(COL_DL_VALORE, new ColumnDescriptor(COL_DL_VALORE, Types.VARCHAR, 4000, true));
        map.put(COL_NI_ORD_ATTRIB, new ColumnDescriptor(COL_NI_ORD_ATTRIB, Types.DECIMAL, 22, true));
        map.put(COL_DT_ISTITUZ, new ColumnDescriptor(COL_DT_ISTITUZ, Types.TIMESTAMP, 7, true));
        map.put(COL_DT_SOPPRES, new ColumnDescriptor(COL_DT_SOPPRES, Types.TIMESTAMP, 7, true));
        map.put(COL_DS_VERSIONE_XSD, new ColumnDescriptor(COL_DS_VERSIONE_XSD, Types.VARCHAR, 254, true));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
        return map;
    }

    public String getTableName() {
        return TABLE_NAME;
    }

    public String getStatement() {
        return SELECT;
    }

}
