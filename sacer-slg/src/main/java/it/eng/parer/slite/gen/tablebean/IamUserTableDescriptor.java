package it.eng.parer.slite.gen.tablebean;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.annotation.Generated;

/**
 * @author Sloth
 *
 *         Bean per la tabella Iam_User
 *
 */
public class IamUserTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$TableBeanWriter", comments =
     * "This class was generated by OraTool", date = "Tuesday, 11 February 2014 17:32" )
     */

    public static final String SELECT = "Select * from Iam_User /**/";
    public static final String TABLE_NAME = "Iam_User";
    public static final String COL_ID_USER_IAM = "id_user_iam";
    public static final String COL_NM_USERID = "nm_userid";
    public static final String COL_CD_PSW = "cd_psw";
    public static final String COL_NM_COGNOME_USER = "nm_cognome_user";
    public static final String COL_NM_NOME_USER = "nm_nome_user";
    public static final String COL_FL_ATTIVO = "fl_attivo";
    public static final String COL_DT_REG_PSW = "dt_reg_psw";
    public static final String COL_DT_SCAD_PSW = "dt_scad_psw";
    public static final String COL_FL_USER_ADMIN = "fl_user_admin";
    public static final String COL_CD_SALT = "cd_salt";
    public static final String COL_CD_FISC = "cd_fisc";
    public static final String COL_DS_EMAIL = "ds_email";
    public static final String COL_FL_CONTR_IP = "fl_contr_ip";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
        map.put(COL_ID_USER_IAM, new ColumnDescriptor(COL_ID_USER_IAM, Types.DECIMAL, 22, true));
        map.put(COL_NM_USERID, new ColumnDescriptor(COL_NM_USERID, Types.VARCHAR, 100, false));
        map.put(COL_CD_PSW, new ColumnDescriptor(COL_CD_PSW, Types.VARCHAR, 100, false));
        map.put(COL_NM_COGNOME_USER, new ColumnDescriptor(COL_NM_COGNOME_USER, Types.VARCHAR, 100, false));
        map.put(COL_NM_NOME_USER, new ColumnDescriptor(COL_NM_NOME_USER, Types.VARCHAR, 100, false));
        map.put(COL_FL_ATTIVO, new ColumnDescriptor(COL_FL_ATTIVO, Types.VARCHAR, 1, false));
        map.put(COL_DT_REG_PSW, new ColumnDescriptor(COL_DT_REG_PSW, Types.TIMESTAMP, 7, false));
        map.put(COL_DT_SCAD_PSW, new ColumnDescriptor(COL_DT_SCAD_PSW, Types.TIMESTAMP, 7, false));
        map.put(COL_FL_USER_ADMIN, new ColumnDescriptor(COL_FL_USER_ADMIN, Types.VARCHAR, 1, false));
        map.put(COL_CD_SALT, new ColumnDescriptor(COL_CD_SALT, Types.VARCHAR, 100, false));
        map.put(COL_CD_FISC, new ColumnDescriptor(COL_CD_FISC, Types.VARCHAR, 16, false));
        map.put(COL_DS_EMAIL, new ColumnDescriptor(COL_DS_EMAIL, Types.VARCHAR, 254, false));
        map.put(COL_FL_CONTR_IP, new ColumnDescriptor(COL_FL_CONTR_IP, Types.VARCHAR, 1, false));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
        return map;
    }

    public String getTableName() {
        return TABLE_NAME;
    }

    public String getStatement() {
        return SELECT;
    }

}
