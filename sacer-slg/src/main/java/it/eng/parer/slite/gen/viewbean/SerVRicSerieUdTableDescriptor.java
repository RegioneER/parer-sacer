package it.eng.parer.slite.gen.viewbean;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.annotation.Generated;

/**
 * @author Sloth
 *
 *         Bean per la tabella Ser_V_Ric_Serie_Ud
 *
 */
public class SerVRicSerieUdTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$ViewBeanWriter", comments =
     * "This class was generated by OraTool", date = "Wednesday, 22 March 2017 15:50" )
     */

    public static final String SELECT = "Select * from Ser_V_Ric_Serie_Ud /**/";
    public static final String TABLE_NAME = "Ser_V_Ric_Serie_Ud";
    public static final String COL_ID_SERIE = "id_serie";
    public static final String COL_ID_STRUT = "id_strut";
    public static final String COL_CD_COMPOSITO_SERIE = "cd_composito_serie";
    public static final String COL_AA_SERIE = "aa_serie";
    public static final String COL_DS_SERIE = "ds_serie";
    public static final String COL_ID_TIPO_SERIE = "id_tipo_serie";
    public static final String COL_NM_STRUT = "nm_strut";
    public static final String COL_ID_ENTE = "id_ente";
    public static final String COL_NM_ENTE = "nm_ente";
    public static final String COL_ID_AMBIENTE = "id_ambiente";
    public static final String COL_NM_AMBIENTE = "nm_ambiente";
    public static final String COL_NM_TIPO_SERIE = "nm_tipo_serie";
    public static final String COL_ID_VER_SERIE = "id_ver_serie";
    public static final String COL_CD_VER_SERIE = "cd_ver_serie";
    public static final String COL_DT_INIZIO_SEL_SERIE = "dt_inizio_sel_serie";
    public static final String COL_DT_FINE_SEL_SERIE = "dt_fine_sel_serie";
    public static final String COL_TI_STATO_VER_SERIE = "ti_stato_ver_serie";
    public static final String COL_TI_STATO_SERIE = "ti_stato_serie";
    public static final String COL_TI_STATO_CONTENUTO_CALC = "ti_stato_contenuto_calc";
    public static final String COL_NI_UD_CONTENUTO_CALC = "ni_ud_contenuto_calc";
    public static final String COL_FL_ERR_CONTENUTO_CALC = "fl_err_contenuto_calc";
    public static final String COL_TI_STATO_CONTENUTO_ACQ = "ti_stato_contenuto_acq";
    public static final String COL_NI_UD_CONTENUTO_ACQ = "ni_ud_contenuto_acq";
    public static final String COL_FL_ERR_CONTENUTO_FILE = "fl_err_contenuto_file";
    public static final String COL_FL_ERR_CONTENUTO_ACQ = "fl_err_contenuto_acq";
    public static final String COL_TI_STATO_CONTENUTO_EFF = "ti_stato_contenuto_eff";
    public static final String COL_NI_UD_CONTENUTO_EFF = "ni_ud_contenuto_eff";
    public static final String COL_FL_ERR_CONTENUTO_EFF = "fl_err_contenuto_eff";
    public static final String COL_DS_ELAB_BLOCCATA = "ds_elab_bloccata";
    public static final String COL_FL_DA_RIGENERA = "fl_da_rigenera";
    public static final String COL_FL_PRESENZA_CONSIST_ATTESA = "fl_presenza_consist_attesa";
    public static final String COL_TI_CREA_STANDARD = "ti_crea_standard";
    public static final String COL_ID_MODELLO_TIPO_SERIE = "id_modello_tipo_serie";
    public static final String COL_NM_MODELLO_TIPO_SERIE = "nm_modello_tipo_serie";
    public static final String COL_FL_ERR_VALIDAZIONE = "fl_err_validazione";
    public static final String COL_FL_UPD_ANNUL_UNITA_DOC = "fl_upd_annul_unita_doc";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
        map.put(COL_ID_SERIE, new ColumnDescriptor(COL_ID_SERIE, Types.DECIMAL, 22, true));
        map.put(COL_ID_STRUT, new ColumnDescriptor(COL_ID_STRUT, Types.DECIMAL, 22, true));
        map.put(COL_CD_COMPOSITO_SERIE, new ColumnDescriptor(COL_CD_COMPOSITO_SERIE, Types.VARCHAR, 100, true));
        map.put(COL_AA_SERIE, new ColumnDescriptor(COL_AA_SERIE, Types.DECIMAL, 22, true));
        map.put(COL_DS_SERIE, new ColumnDescriptor(COL_DS_SERIE, Types.VARCHAR, 254, true));
        map.put(COL_ID_TIPO_SERIE, new ColumnDescriptor(COL_ID_TIPO_SERIE, Types.DECIMAL, 22, true));
        map.put(COL_NM_STRUT, new ColumnDescriptor(COL_NM_STRUT, Types.VARCHAR, 100, true));
        map.put(COL_ID_ENTE, new ColumnDescriptor(COL_ID_ENTE, Types.DECIMAL, 22, true));
        map.put(COL_NM_ENTE, new ColumnDescriptor(COL_NM_ENTE, Types.VARCHAR, 100, true));
        map.put(COL_ID_AMBIENTE, new ColumnDescriptor(COL_ID_AMBIENTE, Types.DECIMAL, 22, true));
        map.put(COL_NM_AMBIENTE, new ColumnDescriptor(COL_NM_AMBIENTE, Types.VARCHAR, 100, true));
        map.put(COL_NM_TIPO_SERIE, new ColumnDescriptor(COL_NM_TIPO_SERIE, Types.VARCHAR, 100, true));
        map.put(COL_ID_VER_SERIE, new ColumnDescriptor(COL_ID_VER_SERIE, Types.DECIMAL, 22, true));
        map.put(COL_CD_VER_SERIE, new ColumnDescriptor(COL_CD_VER_SERIE, Types.VARCHAR, 100, true));
        map.put(COL_DT_INIZIO_SEL_SERIE, new ColumnDescriptor(COL_DT_INIZIO_SEL_SERIE, Types.TIMESTAMP, 7, true));
        map.put(COL_DT_FINE_SEL_SERIE, new ColumnDescriptor(COL_DT_FINE_SEL_SERIE, Types.TIMESTAMP, 7, true));
        map.put(COL_TI_STATO_VER_SERIE, new ColumnDescriptor(COL_TI_STATO_VER_SERIE, Types.VARCHAR, 20, true));
        map.put(COL_TI_STATO_SERIE, new ColumnDescriptor(COL_TI_STATO_SERIE, Types.VARCHAR, 30, true));
        map.put(COL_TI_STATO_CONTENUTO_CALC,
                new ColumnDescriptor(COL_TI_STATO_CONTENUTO_CALC, Types.VARCHAR, 30, true));
        map.put(COL_NI_UD_CONTENUTO_CALC, new ColumnDescriptor(COL_NI_UD_CONTENUTO_CALC, Types.DECIMAL, 22, true));
        map.put(COL_FL_ERR_CONTENUTO_CALC, new ColumnDescriptor(COL_FL_ERR_CONTENUTO_CALC, Types.VARCHAR, 1, true));
        map.put(COL_TI_STATO_CONTENUTO_ACQ, new ColumnDescriptor(COL_TI_STATO_CONTENUTO_ACQ, Types.VARCHAR, 30, true));
        map.put(COL_NI_UD_CONTENUTO_ACQ, new ColumnDescriptor(COL_NI_UD_CONTENUTO_ACQ, Types.DECIMAL, 22, true));
        map.put(COL_FL_ERR_CONTENUTO_FILE, new ColumnDescriptor(COL_FL_ERR_CONTENUTO_FILE, Types.VARCHAR, 1, true));
        map.put(COL_FL_ERR_CONTENUTO_ACQ, new ColumnDescriptor(COL_FL_ERR_CONTENUTO_ACQ, Types.VARCHAR, 1, true));
        map.put(COL_TI_STATO_CONTENUTO_EFF, new ColumnDescriptor(COL_TI_STATO_CONTENUTO_EFF, Types.VARCHAR, 30, true));
        map.put(COL_NI_UD_CONTENUTO_EFF, new ColumnDescriptor(COL_NI_UD_CONTENUTO_EFF, Types.DECIMAL, 22, true));
        map.put(COL_FL_ERR_CONTENUTO_EFF, new ColumnDescriptor(COL_FL_ERR_CONTENUTO_EFF, Types.VARCHAR, 1, true));
        map.put(COL_DS_ELAB_BLOCCATA, new ColumnDescriptor(COL_DS_ELAB_BLOCCATA, Types.VARCHAR, 52, true));
        map.put(COL_FL_DA_RIGENERA, new ColumnDescriptor(COL_FL_DA_RIGENERA, Types.VARCHAR, 1, true));
        map.put(COL_FL_PRESENZA_CONSIST_ATTESA,
                new ColumnDescriptor(COL_FL_PRESENZA_CONSIST_ATTESA, Types.VARCHAR, 1, true));
        map.put(COL_TI_CREA_STANDARD, new ColumnDescriptor(COL_TI_CREA_STANDARD, Types.VARCHAR, 30, true));
        map.put(COL_ID_MODELLO_TIPO_SERIE, new ColumnDescriptor(COL_ID_MODELLO_TIPO_SERIE, Types.DECIMAL, 22, true));
        map.put(COL_NM_MODELLO_TIPO_SERIE, new ColumnDescriptor(COL_NM_MODELLO_TIPO_SERIE, Types.VARCHAR, 100, true));
        map.put(COL_FL_ERR_VALIDAZIONE, new ColumnDescriptor(COL_FL_ERR_VALIDAZIONE, Types.VARCHAR, 1, true));
        map.put(COL_FL_UPD_ANNUL_UNITA_DOC, new ColumnDescriptor(COL_FL_UPD_ANNUL_UNITA_DOC, Types.VARCHAR, 1, true));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
        return map;
    }

    public String getTableName() {
        return TABLE_NAME;
    }

    public String getStatement() {
        return SELECT;
    }

}
