/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna
 * <p/>
 * This program is free software: you can redistribute it and/or modify it under the terms of
 * the GNU Affero General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 * <p/>
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 * <p/>
 * You should have received a copy of the GNU Affero General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

package it.eng.parer.slite.gen.tablebean;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * @author Sloth
 *
 *         Bean per la tabella Dec_Criterio_Raggr_Fasc
 *
 */
public class DecCriterioRaggrFascTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$TableBeanWriter", comments =
     * "This class was generated by OraTool", date = "Wednesday, 28 March 2018 12:25" )
     */

    public static final String SELECT = "Select * from Dec_Criterio_Raggr_Fasc /**/";
    public static final String TABLE_NAME = "Dec_Criterio_Raggr_Fasc";
    public static final String COL_ID_CRITERIO_RAGGR_FASC = "id_criterio_raggr_fasc";
    public static final String COL_ID_STRUT = "id_strut";
    public static final String COL_NM_CRITERIO_RAGGR = "nm_criterio_raggr";
    public static final String COL_DS_CRITERIO_RAGGR = "ds_criterio_raggr";
    public static final String COL_NI_MAX_FASC = "ni_max_fasc";
    public static final String COL_TI_SCAD_CHIUS = "ti_scad_chius";
    public static final String COL_TI_TEMPO_SCAD_CHIUS = "ti_tempo_scad_chius";
    public static final String COL_NI_TEMPO_SCAD_CHIUS = "ni_tempo_scad_chius";
    public static final String COL_AA_FASCICOLO = "aa_fascicolo";
    public static final String COL_AA_FASCICOLO_DA = "aa_fascicolo_da";
    public static final String COL_AA_FASCICOLO_A = "aa_fascicolo_a";
    public static final String COL_DT_VERS_DA = "dt_vers_da";
    public static final String COL_DT_VERS_A = "dt_vers_a";
    public static final String COL_TI_CONSERVAZIONE = "ti_conservazione";
    public static final String COL_DS_OGGETTO_FASCICOLO = "ds_oggetto_fascicolo";
    public static final String COL_DT_APE_FASCICOLO_DA = "dt_ape_fascicolo_da";
    public static final String COL_DT_APE_FASCICOLO_A = "dt_ape_fascicolo_a";
    public static final String COL_DT_CHIU_FASCICOLO_DA = "dt_chiu_fascicolo_da";
    public static final String COL_DT_CHIU_FASCICOLO_A = "dt_chiu_fascicolo_a";
    public static final String COL_FL_FILTRO_TIPO_FASCICOLO = "fl_filtro_tipo_fascicolo";
    public static final String COL_FL_FILTRO_SISTEMA_MIGRAZ = "fl_filtro_sistema_migraz";
    public static final String COL_DT_ISTITUZ = "dt_istituz";
    public static final String COL_DT_SOPPRES = "dt_soppres";
    public static final String COL_NT_CRITERIO_RAGGR = "nt_criterio_raggr";
    public static final String COL_FL_CRITERIO_RAGGR_STANDARD = "fl_criterio_raggr_standard";
    public static final String COL_FL_FILTRO_VOCE_TITOL = "fl_filtro_voce_titol";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
        map.put(COL_ID_CRITERIO_RAGGR_FASC, new ColumnDescriptor(COL_ID_CRITERIO_RAGGR_FASC, Types.DECIMAL, 22, true));
        map.put(COL_ID_STRUT, new ColumnDescriptor(COL_ID_STRUT, Types.DECIMAL, 22, false));
        map.put(COL_NM_CRITERIO_RAGGR, new ColumnDescriptor(COL_NM_CRITERIO_RAGGR, Types.VARCHAR, 100, false));
        map.put(COL_DS_CRITERIO_RAGGR, new ColumnDescriptor(COL_DS_CRITERIO_RAGGR, Types.VARCHAR, 254, false));
        map.put(COL_NI_MAX_FASC, new ColumnDescriptor(COL_NI_MAX_FASC, Types.DECIMAL, 22, false));
        map.put(COL_TI_SCAD_CHIUS, new ColumnDescriptor(COL_TI_SCAD_CHIUS, Types.VARCHAR, 20, false));
        map.put(COL_TI_TEMPO_SCAD_CHIUS, new ColumnDescriptor(COL_TI_TEMPO_SCAD_CHIUS, Types.VARCHAR, 20, false));
        map.put(COL_NI_TEMPO_SCAD_CHIUS, new ColumnDescriptor(COL_NI_TEMPO_SCAD_CHIUS, Types.DECIMAL, 22, false));
        map.put(COL_AA_FASCICOLO, new ColumnDescriptor(COL_AA_FASCICOLO, Types.DECIMAL, 22, false));
        map.put(COL_AA_FASCICOLO_DA, new ColumnDescriptor(COL_AA_FASCICOLO_DA, Types.DECIMAL, 22, false));
        map.put(COL_AA_FASCICOLO_A, new ColumnDescriptor(COL_AA_FASCICOLO_A, Types.DECIMAL, 22, false));
        map.put(COL_DT_VERS_DA, new ColumnDescriptor(COL_DT_VERS_DA, Types.TIMESTAMP, 7, false));
        map.put(COL_DT_VERS_A, new ColumnDescriptor(COL_DT_VERS_A, Types.TIMESTAMP, 7, false));
        map.put(COL_TI_CONSERVAZIONE, new ColumnDescriptor(COL_TI_CONSERVAZIONE, Types.VARCHAR, 30, false));
        map.put(COL_DS_OGGETTO_FASCICOLO, new ColumnDescriptor(COL_DS_OGGETTO_FASCICOLO, Types.VARCHAR, 4000, false));
        map.put(COL_DT_APE_FASCICOLO_DA, new ColumnDescriptor(COL_DT_APE_FASCICOLO_DA, Types.TIMESTAMP, 7, false));
        map.put(COL_DT_APE_FASCICOLO_A, new ColumnDescriptor(COL_DT_APE_FASCICOLO_A, Types.TIMESTAMP, 7, false));
        map.put(COL_DT_CHIU_FASCICOLO_DA, new ColumnDescriptor(COL_DT_CHIU_FASCICOLO_DA, Types.TIMESTAMP, 7, false));
        map.put(COL_DT_CHIU_FASCICOLO_A, new ColumnDescriptor(COL_DT_CHIU_FASCICOLO_A, Types.TIMESTAMP, 7, false));
        map.put(COL_FL_FILTRO_TIPO_FASCICOLO,
                new ColumnDescriptor(COL_FL_FILTRO_TIPO_FASCICOLO, Types.VARCHAR, 1, false));
        map.put(COL_FL_FILTRO_SISTEMA_MIGRAZ,
                new ColumnDescriptor(COL_FL_FILTRO_SISTEMA_MIGRAZ, Types.VARCHAR, 1, false));
        map.put(COL_DT_ISTITUZ, new ColumnDescriptor(COL_DT_ISTITUZ, Types.TIMESTAMP, 7, false));
        map.put(COL_DT_SOPPRES, new ColumnDescriptor(COL_DT_SOPPRES, Types.TIMESTAMP, 7, false));
        map.put(COL_NT_CRITERIO_RAGGR, new ColumnDescriptor(COL_NT_CRITERIO_RAGGR, Types.VARCHAR, 2000, false));
        map.put(COL_FL_CRITERIO_RAGGR_STANDARD,
                new ColumnDescriptor(COL_FL_CRITERIO_RAGGR_STANDARD, Types.VARCHAR, 1, false));
        map.put(COL_FL_FILTRO_VOCE_TITOL, new ColumnDescriptor(COL_FL_FILTRO_VOCE_TITOL, Types.VARCHAR, 1, false));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
        return map;
    }

    public String getTableName() {
        return TABLE_NAME;
    }

    public String getStatement() {
        return SELECT;
    }

}
