package it.eng.parer.slite.gen.tablebean;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.annotation.Generated;

/**
 * @author Sloth
 *
 *         Bean per la tabella Log_Oper
 *
 */
public class LogOperTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$TableBeanWriter", comments =
     * "This class was generated by OraTool", date = "Tuesday, 11 March 2014 18:25" )
     */

    public static final String SELECT = "Select * from Log_Oper /**/";
    public static final String TABLE_NAME = "Log_Oper";
    public static final String COL_ID_LOG_OPER = "id_log_oper";
    public static final String COL_ID_STRUT = "id_strut";
    public static final String COL_ID_USER = "id_user";
    public static final String COL_DT_OPER = "dt_oper";
    public static final String COL_TI_OPER = "ti_oper";
    public static final String COL_ID_VOLUME_CONSERV = "id_volume_conserv";
    public static final String COL_NM_VOLUME_CONSERV = "nm_volume_conserv";
    public static final String COL_ID_DOC = "id_doc";
    public static final String COL_CD_REGISTRO_KEY_UNITA_DOC = "cd_registro_key_unita_doc";
    public static final String COL_AA_KEY_UNITA_DOC = "aa_key_unita_doc";
    public static final String COL_CD_KEY_UNITA_DOC = "cd_key_unita_doc";
    public static final String COL_TI_DOC = "ti_doc";
    public static final String COL_PG_DOC = "pg_doc";
    public static final String COL_ID_LOG_JOB = "id_log_job";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
        map.put(COL_ID_LOG_OPER, new ColumnDescriptor(COL_ID_LOG_OPER, Types.DECIMAL, 22, true));
        map.put(COL_ID_STRUT, new ColumnDescriptor(COL_ID_STRUT, Types.DECIMAL, 22, false));
        map.put(COL_ID_USER, new ColumnDescriptor(COL_ID_USER, Types.DECIMAL, 22, false));
        map.put(COL_DT_OPER, new ColumnDescriptor(COL_DT_OPER, Types.TIMESTAMP, 7, false));
        map.put(COL_TI_OPER, new ColumnDescriptor(COL_TI_OPER, Types.VARCHAR, 30, false));
        map.put(COL_ID_VOLUME_CONSERV, new ColumnDescriptor(COL_ID_VOLUME_CONSERV, Types.DECIMAL, 22, false));
        map.put(COL_NM_VOLUME_CONSERV, new ColumnDescriptor(COL_NM_VOLUME_CONSERV, Types.VARCHAR, 100, false));
        map.put(COL_ID_DOC, new ColumnDescriptor(COL_ID_DOC, Types.DECIMAL, 22, false));
        map.put(COL_CD_REGISTRO_KEY_UNITA_DOC,
                new ColumnDescriptor(COL_CD_REGISTRO_KEY_UNITA_DOC, Types.VARCHAR, 100, false));
        map.put(COL_AA_KEY_UNITA_DOC, new ColumnDescriptor(COL_AA_KEY_UNITA_DOC, Types.DECIMAL, 22, false));
        map.put(COL_CD_KEY_UNITA_DOC, new ColumnDescriptor(COL_CD_KEY_UNITA_DOC, Types.VARCHAR, 100, false));
        map.put(COL_TI_DOC, new ColumnDescriptor(COL_TI_DOC, Types.VARCHAR, 20, false));
        map.put(COL_PG_DOC, new ColumnDescriptor(COL_PG_DOC, Types.DECIMAL, 22, false));
        map.put(COL_ID_LOG_JOB, new ColumnDescriptor(COL_ID_LOG_JOB, Types.DECIMAL, 22, false));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
        return map;
    }

    public String getTableName() {
        return TABLE_NAME;
    }

    public String getStatement() {
        return SELECT;
    }

}
