/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna
 * <p/>
 * This program is free software: you can redistribute it and/or modify it under the terms of
 * the GNU Affero General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 * <p/>
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 * <p/>
 * You should have received a copy of the GNU Affero General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

package it.eng.parer.slite.gen.viewbean;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * @author Sloth
 *
 *         Bean per la tabella Fas_V_Ric_Fascicoli
 *
 */
public class FasVRicFascicoliTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$ViewBeanWriter", comments =
     * "This class was generated by OraTool", date = "Monday, 11 December 2017 11:54" )
     */

    public static final String SELECT = "Select * from Fas_V_Ric_Fascicoli /**/";
    public static final String TABLE_NAME = "Fas_V_Ric_Fascicoli";
    public static final String COL_ID_FASCICOLO = "id_fascicolo";
    public static final String COL_ID_STRUT = "id_strut";
    public static final String COL_AA_FASCICOLO = "aa_fascicolo";
    public static final String COL_CD_KEY_FASCICOLO = "cd_key_fascicolo";
    public static final String COL_DT_APE_FASCICOLO = "dt_ape_fascicolo";
    public static final String COL_DT_CHIU_FASCICOLO = "dt_chiu_fascicolo";
    public static final String COL_TS_INI_SES = "ts_ini_ses";
    public static final String COL_ID_TIPO_FASCICOLO = "id_tipo_fascicolo";
    public static final String COL_NM_TIPO_FASCICOLO = "nm_tipo_fascicolo";
    public static final String COL_NI_UNITA_DOC = "ni_unita_doc";
    public static final String COL_NI_AA_CONSERVAZIONE = "ni_aa_conservazione";
    public static final String COL_CD_LIVELLO_RISERV = "cd_livello_riserv";
    public static final String COL_FL_FORZA_CONTR_CLASSIF = "fl_forza_contr_classif";
    public static final String COL_FL_FORZA_CONTR_NUMERO = "fl_forza_contr_numero";
    public static final String COL_FL_FORZA_CONTR_COLLEG = "fl_forza_contr_colleg";
    public static final String COL_TI_STATO_CONSERVAZIONE = "ti_stato_conservazione";
    public static final String COL_TI_STATO_FASC_ELENCO_VERS = "ti_stato_fasc_elenco_vers";
    public static final String COL_DS_OGGETTO_FASCICOLO = "ds_oggetto_fascicolo";
    public static final String COL_TI_CONSERVAZIONE = "ti_conservazione";
    public static final String COL_CD_PROC_AMMIN = "cd_proc_ammin";
    public static final String COL_DS_PROC_AMMIN = "ds_proc_ammin";
    public static final String COL_AA_FASCICOLO_PADRE = "aa_fascicolo_padre";
    public static final String COL_CD_KEY_FASCICOLO_PADRE = "cd_key_fascicolo_padre";
    public static final String COL_DS_OGGETTO_FASCICOLO_PADRE = "ds_oggetto_fascicolo_padre";
    public static final String COL_ID_USER_IAM_VERS = "id_user_iam_vers";
    public static final String COL_NM_USERID = "nm_userid";
    public static final String COL_ID_SISTEMA_VERSANTE = "id_sistema_versante";
    public static final String COL_NM_SISTEMA_VERSANTE = "nm_sistema_versante";
    public static final String COL_ID_VOCE_TITOL = "id_voce_titol";
    public static final String COL_CD_COMPOSITO_VOCE_TITOL = "cd_composito_voce_titol";
    public static final String COL_TI_ESITO = "ti_esito";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
        map.put(COL_ID_FASCICOLO, new ColumnDescriptor(COL_ID_FASCICOLO, Types.DECIMAL, 22, true));
        map.put(COL_ID_STRUT, new ColumnDescriptor(COL_ID_STRUT, Types.DECIMAL, 22, true));
        map.put(COL_AA_FASCICOLO, new ColumnDescriptor(COL_AA_FASCICOLO, Types.DECIMAL, 22, true));
        map.put(COL_CD_KEY_FASCICOLO, new ColumnDescriptor(COL_CD_KEY_FASCICOLO, Types.VARCHAR, 100, true));
        map.put(COL_DT_APE_FASCICOLO, new ColumnDescriptor(COL_DT_APE_FASCICOLO, Types.TIMESTAMP, 7, true));
        map.put(COL_DT_CHIU_FASCICOLO, new ColumnDescriptor(COL_DT_CHIU_FASCICOLO, Types.TIMESTAMP, 7, true));
        map.put(COL_TS_INI_SES, new ColumnDescriptor(COL_TS_INI_SES, Types.TIMESTAMP, 11, true));
        map.put(COL_ID_TIPO_FASCICOLO, new ColumnDescriptor(COL_ID_TIPO_FASCICOLO, Types.DECIMAL, 22, true));
        map.put(COL_NM_TIPO_FASCICOLO, new ColumnDescriptor(COL_NM_TIPO_FASCICOLO, Types.VARCHAR, 100, true));
        map.put(COL_NI_UNITA_DOC, new ColumnDescriptor(COL_NI_UNITA_DOC, Types.DECIMAL, 22, true));
        map.put(COL_NI_AA_CONSERVAZIONE, new ColumnDescriptor(COL_NI_AA_CONSERVAZIONE, Types.DECIMAL, 22, true));
        map.put(COL_CD_LIVELLO_RISERV, new ColumnDescriptor(COL_CD_LIVELLO_RISERV, Types.VARCHAR, 100, true));
        map.put(COL_FL_FORZA_CONTR_CLASSIF, new ColumnDescriptor(COL_FL_FORZA_CONTR_CLASSIF, Types.VARCHAR, 1, true));
        map.put(COL_FL_FORZA_CONTR_NUMERO, new ColumnDescriptor(COL_FL_FORZA_CONTR_NUMERO, Types.VARCHAR, 1, true));
        map.put(COL_FL_FORZA_CONTR_COLLEG, new ColumnDescriptor(COL_FL_FORZA_CONTR_COLLEG, Types.VARCHAR, 1, true));
        map.put(COL_TI_STATO_CONSERVAZIONE, new ColumnDescriptor(COL_TI_STATO_CONSERVAZIONE, Types.VARCHAR, 30, true));
        map.put(COL_TI_STATO_FASC_ELENCO_VERS,
                new ColumnDescriptor(COL_TI_STATO_FASC_ELENCO_VERS, Types.VARCHAR, 50, true));
        map.put(COL_DS_OGGETTO_FASCICOLO, new ColumnDescriptor(COL_DS_OGGETTO_FASCICOLO, Types.VARCHAR, 4000, true));
        map.put(COL_TI_CONSERVAZIONE, new ColumnDescriptor(COL_TI_CONSERVAZIONE, Types.VARCHAR, 30, true));
        map.put(COL_CD_PROC_AMMIN, new ColumnDescriptor(COL_CD_PROC_AMMIN, Types.VARCHAR, 100, true));
        map.put(COL_DS_PROC_AMMIN, new ColumnDescriptor(COL_DS_PROC_AMMIN, Types.VARCHAR, 100, true));
        map.put(COL_AA_FASCICOLO_PADRE, new ColumnDescriptor(COL_AA_FASCICOLO_PADRE, Types.DECIMAL, 22, true));
        map.put(COL_CD_KEY_FASCICOLO_PADRE, new ColumnDescriptor(COL_CD_KEY_FASCICOLO_PADRE, Types.VARCHAR, 100, true));
        map.put(COL_DS_OGGETTO_FASCICOLO_PADRE,
                new ColumnDescriptor(COL_DS_OGGETTO_FASCICOLO_PADRE, Types.VARCHAR, 4000, true));
        map.put(COL_ID_USER_IAM_VERS, new ColumnDescriptor(COL_ID_USER_IAM_VERS, Types.DECIMAL, 22, true));
        map.put(COL_NM_USERID, new ColumnDescriptor(COL_NM_USERID, Types.VARCHAR, 100, true));
        map.put(COL_ID_SISTEMA_VERSANTE, new ColumnDescriptor(COL_ID_SISTEMA_VERSANTE, Types.DECIMAL, 22, true));
        map.put(COL_NM_SISTEMA_VERSANTE, new ColumnDescriptor(COL_NM_SISTEMA_VERSANTE, Types.VARCHAR, 100, true));
        map.put(COL_ID_VOCE_TITOL, new ColumnDescriptor(COL_ID_VOCE_TITOL, Types.DECIMAL, 22, true));
        map.put(COL_CD_COMPOSITO_VOCE_TITOL,
                new ColumnDescriptor(COL_CD_COMPOSITO_VOCE_TITOL, Types.VARCHAR, 100, true));
        map.put(COL_TI_ESITO, new ColumnDescriptor(COL_TI_ESITO, Types.VARCHAR, 8, true));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
        return map;
    }

    public String getTableName() {
        return TABLE_NAME;
    }

    public String getStatement() {
        return SELECT;
    }

}
