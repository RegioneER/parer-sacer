package it.eng.parer.slite.gen.viewbean;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.annotation.Generated;

/**
 * @author Sloth
 *
 *         Bean per la tabella Mon_V_Conta_Ud_Doc_Comp
 *
 */
public class MonVContaUdDocCompTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$ViewBeanWriter", comments =
     * "This class was generated by OraTool", date = "Friday, 12 December 2014 14:48" )
     */

    public static final String SELECT = "Select * from Mon_V_Conta_Ud_Doc_Comp /**/";
    public static final String TABLE_NAME = "Mon_V_Conta_Ud_Doc_Comp";
    public static final String COL_DT_RIF_CONTA = "dt_rif_conta";
    public static final String COL_ID_STRUT = "id_strut";
    public static final String COL_ID_SUB_STRUT = "id_sub_strut";
    public static final String COL_ID_REGISTRO_UNITA_DOC = "id_registro_unita_doc";
    public static final String COL_AA_KEY_UNITA_DOC = "aa_key_unita_doc";
    public static final String COL_ID_TIPO_UNITA_DOC = "id_tipo_unita_doc";
    public static final String COL_ID_TIPO_DOC_PRINCIPALE = "id_tipo_doc_principale";
    public static final String COL_NUM_UD = "num_ud";
    public static final String COL_NUM_DOC = "num_doc";
    public static final String COL_NUM_COMP = "num_comp";
    public static final String COL_NUM_BYTE = "num_byte";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
        map.put(COL_DT_RIF_CONTA, new ColumnDescriptor(COL_DT_RIF_CONTA, Types.TIMESTAMP, 8, true));
        map.put(COL_ID_STRUT, new ColumnDescriptor(COL_ID_STRUT, Types.DECIMAL, 22, true));
        map.put(COL_ID_SUB_STRUT, new ColumnDescriptor(COL_ID_SUB_STRUT, Types.DECIMAL, 22, true));
        map.put(COL_ID_REGISTRO_UNITA_DOC, new ColumnDescriptor(COL_ID_REGISTRO_UNITA_DOC, Types.DECIMAL, 22, true));
        map.put(COL_AA_KEY_UNITA_DOC, new ColumnDescriptor(COL_AA_KEY_UNITA_DOC, Types.DECIMAL, 22, true));
        map.put(COL_ID_TIPO_UNITA_DOC, new ColumnDescriptor(COL_ID_TIPO_UNITA_DOC, Types.DECIMAL, 22, true));
        map.put(COL_ID_TIPO_DOC_PRINCIPALE, new ColumnDescriptor(COL_ID_TIPO_DOC_PRINCIPALE, Types.DECIMAL, 22, true));
        map.put(COL_NUM_UD, new ColumnDescriptor(COL_NUM_UD, Types.DECIMAL, 22, true));
        map.put(COL_NUM_DOC, new ColumnDescriptor(COL_NUM_DOC, Types.DECIMAL, 22, true));
        map.put(COL_NUM_COMP, new ColumnDescriptor(COL_NUM_COMP, Types.DECIMAL, 22, true));
        map.put(COL_NUM_BYTE, new ColumnDescriptor(COL_NUM_BYTE, Types.DECIMAL, 22, true));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
        return map;
    }

    public String getTableName() {
        return TABLE_NAME;
    }

    public String getStatement() {
        return SELECT;
    }

}
