package it.eng.parer.slite.gen.tablebean;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.annotation.Generated;

/**
 * @author Sloth
 *
 *         Bean per la tabella Dec_Criterio_Filtro_Multiplo
 *
 */
public class DecCriterioFiltroMultiploTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$TableBeanWriter", comments =
     * "This class was generated by OraTool", date = "Friday, 13 June 2014 11:18" )
     */

    public static final String SELECT = "Select * from Dec_Criterio_Filtro_Multiplo /**/";
    public static final String TABLE_NAME = "Dec_Criterio_Filtro_Multiplo";
    public static final String COL_ID_CRITERIO_FILTRO_MULT = "id_criterio_filtro_mult";
    public static final String COL_ID_CRITERIO_RAGGR = "id_criterio_raggr";
    public static final String COL_TI_FILTRO_MULTIPLO = "ti_filtro_multiplo";
    public static final String COL_ID_TIPO_UNITA_DOC = "id_tipo_unita_doc";
    public static final String COL_TI_ESITO_VERIF_FIRME = "ti_esito_verif_firme";
    public static final String COL_ID_REGISTRO_UNITA_DOC = "id_registro_unita_doc";
    public static final String COL_ID_TIPO_DOC = "id_tipo_doc";
    public static final String COL_ID_REGISTRO_RANGE_UNITA_DOC = "id_registro_range_unita_doc";
    public static final String COL_NM_SISTEMA_MIGRAZ = "nm_sistema_migraz";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
        map.put(COL_ID_CRITERIO_FILTRO_MULT,
                new ColumnDescriptor(COL_ID_CRITERIO_FILTRO_MULT, Types.DECIMAL, 22, true));
        map.put(COL_ID_CRITERIO_RAGGR, new ColumnDescriptor(COL_ID_CRITERIO_RAGGR, Types.DECIMAL, 22, false));
        map.put(COL_TI_FILTRO_MULTIPLO, new ColumnDescriptor(COL_TI_FILTRO_MULTIPLO, Types.VARCHAR, 30, false));
        map.put(COL_ID_TIPO_UNITA_DOC, new ColumnDescriptor(COL_ID_TIPO_UNITA_DOC, Types.DECIMAL, 22, false));
        map.put(COL_TI_ESITO_VERIF_FIRME, new ColumnDescriptor(COL_TI_ESITO_VERIF_FIRME, Types.VARCHAR, 20, false));
        map.put(COL_ID_REGISTRO_UNITA_DOC, new ColumnDescriptor(COL_ID_REGISTRO_UNITA_DOC, Types.DECIMAL, 22, false));
        map.put(COL_ID_TIPO_DOC, new ColumnDescriptor(COL_ID_TIPO_DOC, Types.DECIMAL, 22, false));
        map.put(COL_ID_REGISTRO_RANGE_UNITA_DOC,
                new ColumnDescriptor(COL_ID_REGISTRO_RANGE_UNITA_DOC, Types.DECIMAL, 22, false));
        map.put(COL_NM_SISTEMA_MIGRAZ, new ColumnDescriptor(COL_NM_SISTEMA_MIGRAZ, Types.VARCHAR, 100, false));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
        return map;
    }

    public String getTableName() {
        return TABLE_NAME;
    }

    public String getStatement() {
        return SELECT;
    }

}
