package it.eng.parer.slite.gen.viewbean;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.annotation.Generated;

/**
 * @author Sloth
 *
 *         Bean per la tabella Aro_V_Vis_Marca_Comp
 *
 */
public class AroVVisMarcaCompTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$ViewBeanWriter", comments =
     * "This class was generated by OraTool", date = "Thursday, 20 December 2012 16:14" )
     */

    public static final String SELECT = "Select * from Aro_V_Vis_Marca_Comp /**/";
    public static final String TABLE_NAME = "Aro_V_Vis_Marca_Comp";
    public static final String COL_NM_AMBIENTE = "nm_ambiente";
    public static final String COL_NM_ENTE = "nm_ente";
    public static final String COL_NM_STRUT = "nm_strut";
    public static final String COL_ID_UNITA_DOC = "id_unita_doc";
    public static final String COL_CD_REGISTRO_KEY_UNITA_DOC = "cd_registro_key_unita_doc";
    public static final String COL_AA_KEY_UNITA_DOC = "aa_key_unita_doc";
    public static final String COL_CD_KEY_UNITA_DOC = "cd_key_unita_doc";
    public static final String COL_NM_TIPO_UNITA_DOC = "nm_tipo_unita_doc";
    public static final String COL_ID_DOC = "id_doc";
    public static final String COL_TI_DOC = "ti_doc";
    public static final String COL_PG_DOC = "pg_doc";
    public static final String COL_NM_TIPO_DOC = "nm_tipo_doc";
    public static final String COL_CD_KEY_DOC_VERS = "cd_key_doc_vers";
    public static final String COL_ID_COMP_DOC = "id_comp_doc";
    public static final String COL_NI_ORD_COMP_DOC = "ni_ord_comp_doc";
    public static final String COL_NM_TIPO_COMP_DOC = "nm_tipo_comp_doc";
    public static final String COL_DS_URN_COMP_CALC = "ds_urn_comp_calc";
    public static final String COL_NM_FORMATO_CALC = "nm_formato_calc";
    public static final String COL_ID_MARCA_COMP = "id_marca_comp";
    public static final String COL_PG_MARCA = "pg_marca";
    public static final String COL_TM_MARCA_TEMP = "tm_marca_temp";
    public static final String COL_TI_FORMATO_MARCA = "ti_formato_marca";
    public static final String COL_TI_ESITO_CONTR_CONFORME = "ti_esito_contr_conforme";
    public static final String COL_DS_MSG_ESITO_CONTR_CONFORME = "ds_msg_esito_contr_conforme";
    public static final String COL_TI_ESITO_VERIF_MARCA = "ti_esito_verif_marca";
    public static final String COL_DS_MSG_ESITO_VERIF_MARCA = "ds_msg_esito_verif_marca";
    public static final String COL_TI_MARCA_TEMP = "ti_marca_temp";
    public static final String COL_DS_MARCA_BASE64 = "ds_marca_base64";
    public static final String COL_DS_ALGO_MARCA = "ds_algo_marca";
    public static final String COL_DT_SCAD_MARCA = "dt_scad_marca";
    public static final String COL_PG_BUSTA = "pg_busta";
    public static final String COL_ISSUER_CERTIF_TSA = "issuer_certif_tsa";
    public static final String COL_SERIAL_TSA = "serial_tsa";
    public static final String COL_DT_INI_VAL_CERTIF_TSA = "dt_ini_val_certif_tsa";
    public static final String COL_DT_FIN_VAL_CERTIF_TSA = "dt_fin_val_certif_tsa";
    public static final String COL_ESITO_CRITTOGRAFICO = "esito_crittografico";
    public static final String COL_MSG_ESITO_CRITTOGRAFICO = "msg_esito_crittografico";
    public static final String COL_ID_CONTR_MARCA_CATENA = "id_contr_marca_catena";
    public static final String COL_ESITO_CATENA = "esito_catena";
    public static final String COL_MSG_ESITO_CATENA = "msg_esito_catena";
    public static final String COL_ESITO_CERTIFICATO = "esito_certificato";
    public static final String COL_MSG_ESITO_CERTIFICATO = "msg_esito_certificato";
    public static final String COL_ESITO_CRL = "esito_crl";
    public static final String COL_MSG_ESITO_CRL = "msg_esito_crl";
    public static final String COL_ISSUER_CRL = "issuer_crl";
    public static final String COL_SERIAL_CA_CRL = "serial_ca_crl";
    public static final String COL_SERIAL_CRL = "serial_crl";
    public static final String COL_DT_SCAD_CRL = "dt_scad_crl";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
        map.put(COL_NM_AMBIENTE, new ColumnDescriptor(COL_NM_AMBIENTE, Types.VARCHAR, 100, true));
        map.put(COL_NM_ENTE, new ColumnDescriptor(COL_NM_ENTE, Types.VARCHAR, 100, true));
        map.put(COL_NM_STRUT, new ColumnDescriptor(COL_NM_STRUT, Types.VARCHAR, 100, true));
        map.put(COL_ID_UNITA_DOC, new ColumnDescriptor(COL_ID_UNITA_DOC, Types.DECIMAL, 22, true));
        map.put(COL_CD_REGISTRO_KEY_UNITA_DOC,
                new ColumnDescriptor(COL_CD_REGISTRO_KEY_UNITA_DOC, Types.VARCHAR, 100, true));
        map.put(COL_AA_KEY_UNITA_DOC, new ColumnDescriptor(COL_AA_KEY_UNITA_DOC, Types.DECIMAL, 22, true));
        map.put(COL_CD_KEY_UNITA_DOC, new ColumnDescriptor(COL_CD_KEY_UNITA_DOC, Types.VARCHAR, 100, true));
        map.put(COL_NM_TIPO_UNITA_DOC, new ColumnDescriptor(COL_NM_TIPO_UNITA_DOC, Types.VARCHAR, 100, true));
        map.put(COL_ID_DOC, new ColumnDescriptor(COL_ID_DOC, Types.DECIMAL, 22, true));
        map.put(COL_TI_DOC, new ColumnDescriptor(COL_TI_DOC, Types.VARCHAR, 20, true));
        map.put(COL_PG_DOC, new ColumnDescriptor(COL_PG_DOC, Types.DECIMAL, 22, true));
        map.put(COL_NM_TIPO_DOC, new ColumnDescriptor(COL_NM_TIPO_DOC, Types.VARCHAR, 100, true));
        map.put(COL_CD_KEY_DOC_VERS, new ColumnDescriptor(COL_CD_KEY_DOC_VERS, Types.VARCHAR, 100, true));
        map.put(COL_ID_COMP_DOC, new ColumnDescriptor(COL_ID_COMP_DOC, Types.DECIMAL, 22, true));
        map.put(COL_NI_ORD_COMP_DOC, new ColumnDescriptor(COL_NI_ORD_COMP_DOC, Types.DECIMAL, 22, true));
        map.put(COL_NM_TIPO_COMP_DOC, new ColumnDescriptor(COL_NM_TIPO_COMP_DOC, Types.VARCHAR, 100, true));
        map.put(COL_DS_URN_COMP_CALC, new ColumnDescriptor(COL_DS_URN_COMP_CALC, Types.VARCHAR, 254, true));
        map.put(COL_NM_FORMATO_CALC, new ColumnDescriptor(COL_NM_FORMATO_CALC, Types.VARCHAR, 100, true));
        map.put(COL_ID_MARCA_COMP, new ColumnDescriptor(COL_ID_MARCA_COMP, Types.DECIMAL, 22, true));
        map.put(COL_PG_MARCA, new ColumnDescriptor(COL_PG_MARCA, Types.DECIMAL, 22, true));
        map.put(COL_TM_MARCA_TEMP, new ColumnDescriptor(COL_TM_MARCA_TEMP, Types.TIMESTAMP, 7, true));
        map.put(COL_TI_FORMATO_MARCA, new ColumnDescriptor(COL_TI_FORMATO_MARCA, Types.VARCHAR, 20, true));
        map.put(COL_TI_ESITO_CONTR_CONFORME,
                new ColumnDescriptor(COL_TI_ESITO_CONTR_CONFORME, Types.VARCHAR, 30, true));
        map.put(COL_DS_MSG_ESITO_CONTR_CONFORME,
                new ColumnDescriptor(COL_DS_MSG_ESITO_CONTR_CONFORME, Types.VARCHAR, 254, true));
        map.put(COL_TI_ESITO_VERIF_MARCA, new ColumnDescriptor(COL_TI_ESITO_VERIF_MARCA, Types.VARCHAR, 20, true));
        map.put(COL_DS_MSG_ESITO_VERIF_MARCA,
                new ColumnDescriptor(COL_DS_MSG_ESITO_VERIF_MARCA, Types.VARCHAR, 254, true));
        map.put(COL_TI_MARCA_TEMP, new ColumnDescriptor(COL_TI_MARCA_TEMP, Types.VARCHAR, 20, true));
        map.put(COL_DS_MARCA_BASE64, new ColumnDescriptor(COL_DS_MARCA_BASE64, Types.VARCHAR, 2048, true));
        map.put(COL_DS_ALGO_MARCA, new ColumnDescriptor(COL_DS_ALGO_MARCA, Types.VARCHAR, 254, true));
        map.put(COL_DT_SCAD_MARCA, new ColumnDescriptor(COL_DT_SCAD_MARCA, Types.TIMESTAMP, 7, true));
        map.put(COL_PG_BUSTA, new ColumnDescriptor(COL_PG_BUSTA, Types.DECIMAL, 22, true));
        map.put(COL_ISSUER_CERTIF_TSA, new ColumnDescriptor(COL_ISSUER_CERTIF_TSA, Types.VARCHAR, 1024, true));
        map.put(COL_SERIAL_TSA, new ColumnDescriptor(COL_SERIAL_TSA, Types.DECIMAL, 22, true));
        map.put(COL_DT_INI_VAL_CERTIF_TSA, new ColumnDescriptor(COL_DT_INI_VAL_CERTIF_TSA, Types.TIMESTAMP, 7, true));
        map.put(COL_DT_FIN_VAL_CERTIF_TSA, new ColumnDescriptor(COL_DT_FIN_VAL_CERTIF_TSA, Types.TIMESTAMP, 7, true));
        map.put(COL_ESITO_CRITTOGRAFICO, new ColumnDescriptor(COL_ESITO_CRITTOGRAFICO, Types.VARCHAR, 30, true));
        map.put(COL_MSG_ESITO_CRITTOGRAFICO,
                new ColumnDescriptor(COL_MSG_ESITO_CRITTOGRAFICO, Types.VARCHAR, 254, true));
        map.put(COL_ID_CONTR_MARCA_CATENA, new ColumnDescriptor(COL_ID_CONTR_MARCA_CATENA, Types.DECIMAL, 22, true));
        map.put(COL_ESITO_CATENA, new ColumnDescriptor(COL_ESITO_CATENA, Types.VARCHAR, 30, true));
        map.put(COL_MSG_ESITO_CATENA, new ColumnDescriptor(COL_MSG_ESITO_CATENA, Types.VARCHAR, 254, true));
        map.put(COL_ESITO_CERTIFICATO, new ColumnDescriptor(COL_ESITO_CERTIFICATO, Types.VARCHAR, 30, true));
        map.put(COL_MSG_ESITO_CERTIFICATO, new ColumnDescriptor(COL_MSG_ESITO_CERTIFICATO, Types.VARCHAR, 254, true));
        map.put(COL_ESITO_CRL, new ColumnDescriptor(COL_ESITO_CRL, Types.VARCHAR, 30, true));
        map.put(COL_MSG_ESITO_CRL, new ColumnDescriptor(COL_MSG_ESITO_CRL, Types.VARCHAR, 254, true));
        map.put(COL_ISSUER_CRL, new ColumnDescriptor(COL_ISSUER_CRL, Types.VARCHAR, 1024, true));
        map.put(COL_SERIAL_CA_CRL, new ColumnDescriptor(COL_SERIAL_CA_CRL, Types.DECIMAL, 22, true));
        map.put(COL_SERIAL_CRL, new ColumnDescriptor(COL_SERIAL_CRL, Types.DECIMAL, 22, true));
        map.put(COL_DT_SCAD_CRL, new ColumnDescriptor(COL_DT_SCAD_CRL, Types.TIMESTAMP, 7, true));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
        return map;
    }

    public String getTableName() {
        return TABLE_NAME;
    }

    public String getStatement() {
        return SELECT;
    }

}
