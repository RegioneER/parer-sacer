package it.eng.parer.slite.gen.tablebean;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.annotation.Generated;

/**
 * @author Sloth
 *
 *         Bean per la tabella Dec_Parte_Numero_Fascicolo
 *
 */
public class DecParteNumeroFascicoloTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$TableBeanWriter", comments =
     * "This class was generated by OraTool", date = "Monday, 27 November 2017 11:33" )
     */

    public static final String SELECT = "Select * from Dec_Parte_Numero_Fascicolo /**/";
    public static final String TABLE_NAME = "Dec_Parte_Numero_Fascicolo";
    public static final String COL_ID_PARTE_NUMERO_FASCICOLO = "id_parte_numero_fascicolo";
    public static final String COL_ID_AA_TIPO_FASCICOLO = "id_aa_tipo_fascicolo";
    public static final String COL_NM_PARTE_NUMERO = "nm_parte_numero";
    public static final String COL_DS_PARTE_NUMERO = "ds_parte_numero";
    public static final String COL_NI_PARTE_NUMERO = "ni_parte_numero";
    public static final String COL_TI_CHAR_PARTE = "ti_char_parte";
    public static final String COL_NI_MIN_CHAR_PARTE = "ni_min_char_parte";
    public static final String COL_NI_MAX_CHAR_PARTE = "ni_max_char_parte";
    public static final String COL_TI_CHAR_SEP = "ti_char_sep";
    public static final String COL_DL_VALORI_PARTE = "dl_valori_parte";
    public static final String COL_TI_PARTE = "ti_parte";
    public static final String COL_TI_PAD_PARTE = "ti_pad_parte";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
        map.put(COL_ID_PARTE_NUMERO_FASCICOLO,
                new ColumnDescriptor(COL_ID_PARTE_NUMERO_FASCICOLO, Types.DECIMAL, 22, true));
        map.put(COL_ID_AA_TIPO_FASCICOLO, new ColumnDescriptor(COL_ID_AA_TIPO_FASCICOLO, Types.DECIMAL, 22, false));
        map.put(COL_NM_PARTE_NUMERO, new ColumnDescriptor(COL_NM_PARTE_NUMERO, Types.VARCHAR, 100, false));
        map.put(COL_DS_PARTE_NUMERO, new ColumnDescriptor(COL_DS_PARTE_NUMERO, Types.VARCHAR, 254, false));
        map.put(COL_NI_PARTE_NUMERO, new ColumnDescriptor(COL_NI_PARTE_NUMERO, Types.DECIMAL, 22, false));
        map.put(COL_TI_CHAR_PARTE, new ColumnDescriptor(COL_TI_CHAR_PARTE, Types.VARCHAR, 30, false));
        map.put(COL_NI_MIN_CHAR_PARTE, new ColumnDescriptor(COL_NI_MIN_CHAR_PARTE, Types.DECIMAL, 22, false));
        map.put(COL_NI_MAX_CHAR_PARTE, new ColumnDescriptor(COL_NI_MAX_CHAR_PARTE, Types.DECIMAL, 22, false));
        map.put(COL_TI_CHAR_SEP, new ColumnDescriptor(COL_TI_CHAR_SEP, Types.VARCHAR, 1, false));
        map.put(COL_DL_VALORI_PARTE, new ColumnDescriptor(COL_DL_VALORI_PARTE, Types.VARCHAR, 1024, false));
        map.put(COL_TI_PARTE, new ColumnDescriptor(COL_TI_PARTE, Types.VARCHAR, 20, false));
        map.put(COL_TI_PAD_PARTE, new ColumnDescriptor(COL_TI_PAD_PARTE, Types.VARCHAR, 30, false));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
        return map;
    }

    public String getTableName() {
        return TABLE_NAME;
    }

    public String getStatement() {
        return SELECT;
    }

}
