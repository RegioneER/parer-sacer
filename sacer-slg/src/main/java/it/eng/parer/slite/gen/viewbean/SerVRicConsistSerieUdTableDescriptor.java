/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna <p/> This program is free software: you can
 * redistribute it and/or modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License, or (at your option)
 * any later version. <p/> This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. <p/> You should
 * have received a copy of the GNU Affero General Public License along with this program. If not,
 * see <https://www.gnu.org/licenses/>.
 */

package it.eng.parer.slite.gen.viewbean;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * @author Sloth
 *
 *         Bean per la tabella Ser_V_Ric_Consist_Serie_Ud
 *
 */
public class SerVRicConsistSerieUdTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$ViewBeanWriter",
     * comments = "This class was generated by OraTool", date = "Tuesday, 12 July 2016 12:26" )
     */

    public static final String SELECT = "Select * from Ser_V_Ric_Consist_Serie_Ud /**/";
    public static final String TABLE_NAME = "Ser_V_Ric_Consist_Serie_Ud";
    public static final String COL_ID_SERIE = "id_serie";
    public static final String COL_ID_STRUT = "id_strut";
    public static final String COL_CD_COMPOSITO_SERIE = "cd_composito_serie";
    public static final String COL_AA_SERIE = "aa_serie";
    public static final String COL_DS_SERIE = "ds_serie";
    public static final String COL_ID_TIPO_SERIE = "id_tipo_serie";
    public static final String COL_NM_STRUT = "nm_strut";
    public static final String COL_ID_ENTE = "id_ente";
    public static final String COL_NM_ENTE = "nm_ente";
    public static final String COL_ID_AMBIENTE = "id_ambiente";
    public static final String COL_NM_AMBIENTE = "nm_ambiente";
    public static final String COL_NM_TIPO_SERIE = "nm_tipo_serie";
    public static final String COL_ID_TIPO_UNITA_DOC = "id_tipo_unita_doc";
    public static final String COL_ID_REGISTRO_UNITA_DOC = "id_registro_unita_doc";
    public static final String COL_ID_VER_SERIE = "id_ver_serie";
    public static final String COL_CD_VER_SERIE = "cd_ver_serie";
    public static final String COL_TI_STATO_VER_SERIE = "ti_stato_ver_serie";
    public static final String COL_ID_CONTENUTO_CALC = "id_contenuto_calc";
    public static final String COL_TI_STATO_CONTENUTO_CALC = "ti_stato_contenuto_calc";
    public static final String COL_ID_CONTENUTO_ACQ = "id_contenuto_acq";
    public static final String COL_TI_STATO_CONTENUTO_ACQ = "ti_stato_contenuto_acq";
    public static final String COL_ID_CONTENUTO_EFF = "id_contenuto_eff";
    public static final String COL_TI_STATO_CONTENUTO_EFF = "ti_stato_contenuto_eff";
    public static final String COL_NI_UNITA_DOC = "ni_unita_doc";
    public static final String COL_ID_CONSIST_VER_SERIE = "id_consist_ver_serie";
    public static final String COL_FL_PRESENZA_CONSIST_ATTESA = "fl_presenza_consist_attesa";
    public static final String COL_NI_UNITA_DOC_ATTESE = "ni_unita_doc_attese";
    public static final String COL_TI_MOD_CONSIST_FIRST_LAST = "ti_mod_consist_first_last";
    public static final String COL_NI_LACUNE_MANCANTI = "ni_lacune_mancanti";
    public static final String COL_NI_LACUNE_NON_PRODOTTE = "ni_lacune_non_prodotte";
    public static final String COL_DT_COMUNIC_CONSIST_VER_SERIE = "dt_comunic_consist_ver_serie";
    public static final String COL_FL_PRESENZA_CONTEN_EFF = "fl_presenza_conten_eff";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
	map.put(COL_ID_SERIE, new ColumnDescriptor(COL_ID_SERIE, Types.DECIMAL, 22, true));
	map.put(COL_ID_STRUT, new ColumnDescriptor(COL_ID_STRUT, Types.DECIMAL, 22, true));
	map.put(COL_CD_COMPOSITO_SERIE,
		new ColumnDescriptor(COL_CD_COMPOSITO_SERIE, Types.VARCHAR, 100, true));
	map.put(COL_AA_SERIE, new ColumnDescriptor(COL_AA_SERIE, Types.DECIMAL, 22, true));
	map.put(COL_DS_SERIE, new ColumnDescriptor(COL_DS_SERIE, Types.VARCHAR, 254, true));
	map.put(COL_ID_TIPO_SERIE,
		new ColumnDescriptor(COL_ID_TIPO_SERIE, Types.DECIMAL, 22, true));
	map.put(COL_NM_STRUT, new ColumnDescriptor(COL_NM_STRUT, Types.VARCHAR, 100, true));
	map.put(COL_ID_ENTE, new ColumnDescriptor(COL_ID_ENTE, Types.DECIMAL, 22, true));
	map.put(COL_NM_ENTE, new ColumnDescriptor(COL_NM_ENTE, Types.VARCHAR, 100, true));
	map.put(COL_ID_AMBIENTE, new ColumnDescriptor(COL_ID_AMBIENTE, Types.DECIMAL, 22, true));
	map.put(COL_NM_AMBIENTE, new ColumnDescriptor(COL_NM_AMBIENTE, Types.VARCHAR, 100, true));
	map.put(COL_NM_TIPO_SERIE,
		new ColumnDescriptor(COL_NM_TIPO_SERIE, Types.VARCHAR, 100, true));
	map.put(COL_ID_TIPO_UNITA_DOC,
		new ColumnDescriptor(COL_ID_TIPO_UNITA_DOC, Types.DECIMAL, 22, true));
	map.put(COL_ID_REGISTRO_UNITA_DOC,
		new ColumnDescriptor(COL_ID_REGISTRO_UNITA_DOC, Types.DECIMAL, 22, true));
	map.put(COL_ID_VER_SERIE, new ColumnDescriptor(COL_ID_VER_SERIE, Types.DECIMAL, 22, true));
	map.put(COL_CD_VER_SERIE, new ColumnDescriptor(COL_CD_VER_SERIE, Types.VARCHAR, 100, true));
	map.put(COL_TI_STATO_VER_SERIE,
		new ColumnDescriptor(COL_TI_STATO_VER_SERIE, Types.VARCHAR, 20, true));
	map.put(COL_ID_CONTENUTO_CALC,
		new ColumnDescriptor(COL_ID_CONTENUTO_CALC, Types.DECIMAL, 22, true));
	map.put(COL_TI_STATO_CONTENUTO_CALC,
		new ColumnDescriptor(COL_TI_STATO_CONTENUTO_CALC, Types.VARCHAR, 30, true));
	map.put(COL_ID_CONTENUTO_ACQ,
		new ColumnDescriptor(COL_ID_CONTENUTO_ACQ, Types.DECIMAL, 22, true));
	map.put(COL_TI_STATO_CONTENUTO_ACQ,
		new ColumnDescriptor(COL_TI_STATO_CONTENUTO_ACQ, Types.VARCHAR, 30, true));
	map.put(COL_ID_CONTENUTO_EFF,
		new ColumnDescriptor(COL_ID_CONTENUTO_EFF, Types.DECIMAL, 22, true));
	map.put(COL_TI_STATO_CONTENUTO_EFF,
		new ColumnDescriptor(COL_TI_STATO_CONTENUTO_EFF, Types.VARCHAR, 30, true));
	map.put(COL_NI_UNITA_DOC, new ColumnDescriptor(COL_NI_UNITA_DOC, Types.DECIMAL, 22, true));
	map.put(COL_ID_CONSIST_VER_SERIE,
		new ColumnDescriptor(COL_ID_CONSIST_VER_SERIE, Types.DECIMAL, 22, true));
	map.put(COL_FL_PRESENZA_CONSIST_ATTESA,
		new ColumnDescriptor(COL_FL_PRESENZA_CONSIST_ATTESA, Types.VARCHAR, 1, true));
	map.put(COL_NI_UNITA_DOC_ATTESE,
		new ColumnDescriptor(COL_NI_UNITA_DOC_ATTESE, Types.DECIMAL, 22, true));
	map.put(COL_TI_MOD_CONSIST_FIRST_LAST,
		new ColumnDescriptor(COL_TI_MOD_CONSIST_FIRST_LAST, Types.VARCHAR, 20, true));
	map.put(COL_NI_LACUNE_MANCANTI,
		new ColumnDescriptor(COL_NI_LACUNE_MANCANTI, Types.DECIMAL, 22, true));
	map.put(COL_NI_LACUNE_NON_PRODOTTE,
		new ColumnDescriptor(COL_NI_LACUNE_NON_PRODOTTE, Types.DECIMAL, 22, true));
	map.put(COL_DT_COMUNIC_CONSIST_VER_SERIE,
		new ColumnDescriptor(COL_DT_COMUNIC_CONSIST_VER_SERIE, Types.TIMESTAMP, 7, true));
	map.put(COL_FL_PRESENZA_CONTEN_EFF,
		new ColumnDescriptor(COL_FL_PRESENZA_CONTEN_EFF, Types.VARCHAR, 1, true));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
	return map;
    }

    public String getTableName() {
	return TABLE_NAME;
    }

    public String getStatement() {
	return SELECT;
    }

}
