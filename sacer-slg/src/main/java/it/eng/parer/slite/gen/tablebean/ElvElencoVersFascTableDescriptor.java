/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna <p/> This program is free software: you can
 * redistribute it and/or modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License, or (at your option)
 * any later version. <p/> This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. <p/> You should
 * have received a copy of the GNU Affero General Public License along with this program. If not,
 * see <https://www.gnu.org/licenses/>.
 */

package it.eng.parer.slite.gen.tablebean;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * @author Sloth
 *
 *         Bean per la tabella Elv_Elenco_Vers_Fasc
 *
 */
public class ElvElencoVersFascTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$TableBeanWriter",
     * comments = "This class was generated by OraTool", date = "Monday, 9 April 2018 15:39" )
     */

    public static final String SELECT = "Select * from Elv_Elenco_Vers_Fasc /**/";
    public static final String TABLE_NAME = "Elv_Elenco_Vers_Fasc";
    public static final String COL_ID_ELENCO_VERS_FASC = "id_elenco_vers_fasc";
    public static final String COL_ID_STRUT = "id_strut";
    public static final String COL_ID_CRITERIO_RAGGR_FASC = "id_criterio_raggr_fasc";
    public static final String COL_TS_CREAZIONE_ELENCO = "ts_creazione_elenco";
    public static final String COL_NI_FASC_VERS_ELENCO = "ni_fasc_vers_elenco";
    public static final String COL_NT_INDICE_ELENCO = "nt_indice_elenco";
    public static final String COL_DT_SCAD_CHIUS = "dt_scad_chius";
    public static final String COL_DL_MOTIVO_CHIUS = "dl_motivo_chius";
    public static final String COL_DS_URN_ELENCO = "ds_urn_elenco";
    public static final String COL_DS_URN_NORMALIZ_ELENCO = "ds_urn_normaliz_elenco";
    public static final String COL_NT_ELENCO_CHIUSO = "nt_elenco_chiuso";
    public static final String COL_AA_FASCICOLO = "aa_fascicolo";
    public static final String COL_FL_ELENCO_STANDARD = "fl_elenco_standard";
    public static final String COL_NI_MAX_FASC_CRIT = "ni_max_fasc_crit";
    public static final String COL_TI_SCAD_CHIUS_CRIT = "ti_scad_chius_crit";
    public static final String COL_TI_TEMPO_SCAD_CHIUS_CRIT = "ti_tempo_scad_chius_crit";
    public static final String COL_NI_TEMPO_SCAD_CHIUS_CRIT = "ni_tempo_scad_chius_crit";
    public static final String COL_NI_INDICI_AIP = "ni_indici_aip";
    public static final String COL_ID_STATO_ELENCO_VERS_FASC_COR = "id_stato_elenco_vers_fasc_cor";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
	map.put(COL_ID_ELENCO_VERS_FASC,
		new ColumnDescriptor(COL_ID_ELENCO_VERS_FASC, Types.DECIMAL, 22, true));
	map.put(COL_ID_STRUT, new ColumnDescriptor(COL_ID_STRUT, Types.DECIMAL, 22, false));
	map.put(COL_ID_CRITERIO_RAGGR_FASC,
		new ColumnDescriptor(COL_ID_CRITERIO_RAGGR_FASC, Types.DECIMAL, 22, false));
	map.put(COL_TS_CREAZIONE_ELENCO,
		new ColumnDescriptor(COL_TS_CREAZIONE_ELENCO, Types.TIMESTAMP, 11, false));
	map.put(COL_NI_FASC_VERS_ELENCO,
		new ColumnDescriptor(COL_NI_FASC_VERS_ELENCO, Types.DECIMAL, 22, false));
	map.put(COL_NT_INDICE_ELENCO,
		new ColumnDescriptor(COL_NT_INDICE_ELENCO, Types.VARCHAR, 2000, false));
	map.put(COL_DT_SCAD_CHIUS,
		new ColumnDescriptor(COL_DT_SCAD_CHIUS, Types.TIMESTAMP, 7, false));
	map.put(COL_DS_URN_ELENCO,
		new ColumnDescriptor(COL_DS_URN_ELENCO, Types.VARCHAR, 254, false));
	map.put(COL_DS_URN_NORMALIZ_ELENCO,
		new ColumnDescriptor(COL_DS_URN_NORMALIZ_ELENCO, Types.VARCHAR, 254, false));
	map.put(COL_DL_MOTIVO_CHIUS,
		new ColumnDescriptor(COL_DL_MOTIVO_CHIUS, Types.VARCHAR, 1024, false));
	map.put(COL_NT_ELENCO_CHIUSO,
		new ColumnDescriptor(COL_NT_ELENCO_CHIUSO, Types.VARCHAR, 2000, false));
	map.put(COL_AA_FASCICOLO, new ColumnDescriptor(COL_AA_FASCICOLO, Types.DECIMAL, 22, false));
	map.put(COL_FL_ELENCO_STANDARD,
		new ColumnDescriptor(COL_FL_ELENCO_STANDARD, Types.VARCHAR, 1, false));
	map.put(COL_NI_MAX_FASC_CRIT,
		new ColumnDescriptor(COL_NI_MAX_FASC_CRIT, Types.DECIMAL, 22, false));
	map.put(COL_TI_SCAD_CHIUS_CRIT,
		new ColumnDescriptor(COL_TI_SCAD_CHIUS_CRIT, Types.VARCHAR, 20, false));
	map.put(COL_TI_TEMPO_SCAD_CHIUS_CRIT,
		new ColumnDescriptor(COL_TI_TEMPO_SCAD_CHIUS_CRIT, Types.VARCHAR, 20, false));
	map.put(COL_NI_TEMPO_SCAD_CHIUS_CRIT,
		new ColumnDescriptor(COL_NI_TEMPO_SCAD_CHIUS_CRIT, Types.DECIMAL, 22, false));
	map.put(COL_NI_INDICI_AIP,
		new ColumnDescriptor(COL_NI_INDICI_AIP, Types.DECIMAL, 22, false));
	map.put(COL_ID_STATO_ELENCO_VERS_FASC_COR,
		new ColumnDescriptor(COL_ID_STATO_ELENCO_VERS_FASC_COR, Types.DECIMAL, 22, false));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
	return map;
    }

    public String getTableName() {
	return TABLE_NAME;
    }

    public String getStatement() {
	return SELECT;
    }

}
