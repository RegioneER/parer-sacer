package it.eng.parer.slite.gen.tablebean;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.annotation.Generated;

/**
 * @author Sloth
 *
 *         Bean per la tabella Dec_Modello_Filtro_Sel_Udattb
 *
 */
public class DecModelloFiltroSelUdattbTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$TableBeanWriter", comments =
     * "This class was generated by OraTool", date = "Thursday, 7 April 2016 13:47" )
     */

    public static final String SELECT = "Select * from Dec_Modello_Filtro_Sel_Udattb /**/";
    public static final String TABLE_NAME = "Dec_Modello_Filtro_Sel_Udattb";
    public static final String COL_ID_MODELLO_FILTRO_SEL_UDATTB = "id_modello_filtro_sel_udattb";
    public static final String COL_ID_MODELLO_TIPO_SERIE = "id_modello_tipo_serie";
    public static final String COL_NM_FILTRO = "nm_filtro";
    public static final String COL_TI_FILTRO = "ti_filtro";
    public static final String COL_TI_OPER = "ti_oper";
    public static final String COL_DL_VALORE = "dl_valore";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
        map.put(COL_ID_MODELLO_FILTRO_SEL_UDATTB,
                new ColumnDescriptor(COL_ID_MODELLO_FILTRO_SEL_UDATTB, Types.DECIMAL, 22, true));
        map.put(COL_ID_MODELLO_TIPO_SERIE, new ColumnDescriptor(COL_ID_MODELLO_TIPO_SERIE, Types.DECIMAL, 22, false));
        map.put(COL_NM_FILTRO, new ColumnDescriptor(COL_NM_FILTRO, Types.VARCHAR, 100, false));
        map.put(COL_TI_FILTRO, new ColumnDescriptor(COL_TI_FILTRO, Types.VARCHAR, 20, false));
        map.put(COL_TI_OPER, new ColumnDescriptor(COL_TI_OPER, Types.VARCHAR, 20, false));
        map.put(COL_DL_VALORE, new ColumnDescriptor(COL_DL_VALORE, Types.VARCHAR, 1024, false));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
        return map;
    }

    public String getTableName() {
        return TABLE_NAME;
    }

    public String getStatement() {
        return SELECT;
    }

}
