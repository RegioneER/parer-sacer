/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna
 * <p/>
 * This program is free software: you can redistribute it and/or modify it under the terms of
 * the GNU Affero General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 * <p/>
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 * <p/>
 * You should have received a copy of the GNU Affero General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

package it.eng.parer.slite.gen.viewbean;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * @author Sloth
 *
 *         Bean per la tabella Iam_V_Lis_Organiz_Da_Replic
 *
 */
public class IamVLisOrganizDaReplicTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$ViewBeanWriter", comments =
     * "This class was generated by OraTool", date = "Tuesday, 29 July 2014 11:22" )
     */

    public static final String SELECT = "Select * from Iam_V_Lis_Organiz_Da_Replic /**/";
    public static final String TABLE_NAME = "Iam_V_Lis_Organiz_Da_Replic";
    public static final String COL_ID_ORGANIZ_DA_REPLIC = "id_organiz_da_replic";
    public static final String COL_ID_ORGANIZ_APPLIC = "id_organiz_applic";
    public static final String COL_NM_ORGANIZ = "nm_organiz";
    public static final String COL_TI_OPER_REPLIC = "ti_oper_replic";
    public static final String COL_TI_STATO_REPLIC = "ti_stato_replic";
    public static final String COL_DT_LOG_ORGANIZ_DA_REPLIC = "dt_log_organiz_da_replic";
    public static final String COL_CD_ERR = "cd_err";
    public static final String COL_DS_MSG_ERR = "ds_msg_err";
    public static final String COL_DT_ERR = "dt_err";
    public static final String COL_DS_ORD_ORGANIZ = "ds_ord_organiz";
    public static final String COL_ID_AMBIENTE = "id_ambiente";
    public static final String COL_NM_AMBIENTE = "nm_ambiente";
    public static final String COL_ID_ENTE = "id_ente";
    public static final String COL_NM_ENTE = "nm_ente";
    public static final String COL_ID_VERS = "id_vers";
    public static final String COL_NM_VERS = "nm_vers";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
        map.put(COL_ID_ORGANIZ_DA_REPLIC, new ColumnDescriptor(COL_ID_ORGANIZ_DA_REPLIC, Types.DECIMAL, 22, true));
        map.put(COL_ID_ORGANIZ_APPLIC, new ColumnDescriptor(COL_ID_ORGANIZ_APPLIC, Types.DECIMAL, 22, true));
        map.put(COL_NM_ORGANIZ, new ColumnDescriptor(COL_NM_ORGANIZ, Types.VARCHAR, 100, true));
        map.put(COL_TI_OPER_REPLIC, new ColumnDescriptor(COL_TI_OPER_REPLIC, Types.VARCHAR, 20, true));
        map.put(COL_TI_STATO_REPLIC, new ColumnDescriptor(COL_TI_STATO_REPLIC, Types.VARCHAR, 30, true));
        map.put(COL_DT_LOG_ORGANIZ_DA_REPLIC,
                new ColumnDescriptor(COL_DT_LOG_ORGANIZ_DA_REPLIC, Types.TIMESTAMP, 7, true));
        map.put(COL_CD_ERR, new ColumnDescriptor(COL_CD_ERR, Types.VARCHAR, 100, true));
        map.put(COL_DS_MSG_ERR, new ColumnDescriptor(COL_DS_MSG_ERR, Types.VARCHAR, 254, true));
        map.put(COL_DT_ERR, new ColumnDescriptor(COL_DT_ERR, Types.TIMESTAMP, 7, true));
        map.put(COL_DS_ORD_ORGANIZ, new ColumnDescriptor(COL_DS_ORD_ORGANIZ, Types.VARCHAR, 306, true));
        map.put(COL_ID_AMBIENTE, new ColumnDescriptor(COL_ID_AMBIENTE, Types.DECIMAL, 22, true));
        map.put(COL_NM_AMBIENTE, new ColumnDescriptor(COL_NM_AMBIENTE, Types.VARCHAR, 100, true));
        map.put(COL_ID_ENTE, new ColumnDescriptor(COL_ID_ENTE, Types.DECIMAL, 22, true));
        map.put(COL_NM_ENTE, new ColumnDescriptor(COL_NM_ENTE, Types.VARCHAR, 100, true));
        map.put(COL_ID_VERS, new ColumnDescriptor(COL_ID_VERS, Types.DECIMAL, 22, true));
        map.put(COL_NM_VERS, new ColumnDescriptor(COL_NM_VERS, Types.VARCHAR, 100, true));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
        return map;
    }

    public String getTableName() {
        return TABLE_NAME;
    }

    public String getStatement() {
        return SELECT;
    }

}
