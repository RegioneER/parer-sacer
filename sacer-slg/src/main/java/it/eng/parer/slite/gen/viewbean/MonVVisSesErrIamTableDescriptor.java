/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna
 * <p/>
 * This program is free software: you can redistribute it and/or modify it under the terms of
 * the GNU Affero General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 * <p/>
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 * <p/>
 * You should have received a copy of the GNU Affero General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

package it.eng.parer.slite.gen.viewbean;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * @author Sloth
 *
 *         Bean per la tabella Mon_V_Vis_Ses_Err_Iam
 *
 */
public class MonVVisSesErrIamTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$ViewBeanWriter", comments =
     * "This class was generated by OraTool", date = "Friday, 24 October 2014 13:26" )
     */

    public static final String SELECT = "Select * from Mon_V_Vis_Ses_Err_Iam /**/";
    public static final String TABLE_NAME = "Mon_V_Vis_Ses_Err_Iam";
    public static final String COL_NM_AMBIENTE = "nm_ambiente";
    public static final String COL_NM_ENTE = "nm_ente";
    public static final String COL_NM_STRUT = "nm_strut";
    public static final String COL_NM_USERID_WS = "nm_userid_ws";
    public static final String COL_NM_USERID = "nm_userid";
    public static final String COL_NM_COGNOME_USER = "nm_cognome_user";
    public static final String COL_NM_NOME_USER = "nm_nome_user";
    public static final String COL_ID_SESSIONE_VERS = "id_sessione_vers";
    public static final String COL_DT_APERTURA = "dt_apertura";
    public static final String COL_DT_CHIUSURA = "dt_chiusura";
    public static final String COL_TI_SESSIONE_VERS = "ti_sessione_vers";
    public static final String COL_CD_VERSIONE_WS = "cd_versione_ws";
    public static final String COL_CD_REGISTRO_KEY_UNITA_DOC = "cd_registro_key_unita_doc";
    public static final String COL_AA_KEY_UNITA_DOC = "aa_key_unita_doc";
    public static final String COL_CD_KEY_UNITA_DOC = "cd_key_unita_doc";
    public static final String COL_CD_KEY_DOC_VERS = "cd_key_doc_vers";
    public static final String COL_FL_SESSIONE_ERR_VERIF = "fl_sessione_err_verif";
    public static final String COL_ID_ERR_SESSIONE_VERS = "id_err_sessione_vers";
    public static final String COL_CD_ERR = "cd_err";
    public static final String COL_DS_ERR = "ds_err";
    public static final String COL_BL_XML_RICH = "bl_xml_rich";
    public static final String COL_BL_XML_INDEX = "bl_xml_index";
    public static final String COL_BL_XML_RISP = "bl_xml_risp";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
        map.put(COL_NM_AMBIENTE, new ColumnDescriptor(COL_NM_AMBIENTE, Types.VARCHAR, 100, true));
        map.put(COL_NM_ENTE, new ColumnDescriptor(COL_NM_ENTE, Types.VARCHAR, 100, true));
        map.put(COL_NM_STRUT, new ColumnDescriptor(COL_NM_STRUT, Types.VARCHAR, 100, true));
        map.put(COL_NM_USERID_WS, new ColumnDescriptor(COL_NM_USERID_WS, Types.VARCHAR, 100, true));
        map.put(COL_NM_USERID, new ColumnDescriptor(COL_NM_USERID, Types.VARCHAR, 100, true));
        map.put(COL_NM_COGNOME_USER, new ColumnDescriptor(COL_NM_COGNOME_USER, Types.VARCHAR, 100, true));
        map.put(COL_NM_NOME_USER, new ColumnDescriptor(COL_NM_NOME_USER, Types.VARCHAR, 100, true));
        map.put(COL_ID_SESSIONE_VERS, new ColumnDescriptor(COL_ID_SESSIONE_VERS, Types.DECIMAL, 22, true));
        map.put(COL_DT_APERTURA, new ColumnDescriptor(COL_DT_APERTURA, Types.TIMESTAMP, 7, true));
        map.put(COL_DT_CHIUSURA, new ColumnDescriptor(COL_DT_CHIUSURA, Types.TIMESTAMP, 7, true));
        map.put(COL_TI_SESSIONE_VERS, new ColumnDescriptor(COL_TI_SESSIONE_VERS, Types.VARCHAR, 20, true));
        map.put(COL_CD_VERSIONE_WS, new ColumnDescriptor(COL_CD_VERSIONE_WS, Types.VARCHAR, 100, true));
        map.put(COL_CD_REGISTRO_KEY_UNITA_DOC,
                new ColumnDescriptor(COL_CD_REGISTRO_KEY_UNITA_DOC, Types.VARCHAR, 100, true));
        map.put(COL_AA_KEY_UNITA_DOC, new ColumnDescriptor(COL_AA_KEY_UNITA_DOC, Types.DECIMAL, 22, true));
        map.put(COL_CD_KEY_UNITA_DOC, new ColumnDescriptor(COL_CD_KEY_UNITA_DOC, Types.VARCHAR, 100, true));
        map.put(COL_CD_KEY_DOC_VERS, new ColumnDescriptor(COL_CD_KEY_DOC_VERS, Types.VARCHAR, 100, true));
        map.put(COL_FL_SESSIONE_ERR_VERIF, new ColumnDescriptor(COL_FL_SESSIONE_ERR_VERIF, Types.VARCHAR, 1, true));
        map.put(COL_ID_ERR_SESSIONE_VERS, new ColumnDescriptor(COL_ID_ERR_SESSIONE_VERS, Types.DECIMAL, 22, true));
        map.put(COL_CD_ERR, new ColumnDescriptor(COL_CD_ERR, Types.VARCHAR, 20, true));
        map.put(COL_DS_ERR, new ColumnDescriptor(COL_DS_ERR, Types.VARCHAR, 1024, true));
        map.put(COL_BL_XML_RICH, new ColumnDescriptor(COL_BL_XML_RICH, Types.CLOB, 4000, true));
        map.put(COL_BL_XML_INDEX, new ColumnDescriptor(COL_BL_XML_INDEX, Types.CLOB, 4000, true));
        map.put(COL_BL_XML_RISP, new ColumnDescriptor(COL_BL_XML_RISP, Types.CLOB, 4000, true));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
        return map;
    }

    public String getTableName() {
        return TABLE_NAME;
    }

    public String getStatement() {
        return SELECT;
    }

}
