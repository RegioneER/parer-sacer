/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna <p/> This program is free software: you can
 * redistribute it and/or modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License, or (at your option)
 * any later version. <p/> This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. <p/> You should
 * have received a copy of the GNU Affero General Public License along with this program. If not,
 * see <https://www.gnu.org/licenses/>.
 */

package it.eng.parer.slite.gen.tablebean;

import it.eng.spagoLite.db.base.BaseRowInterface;
import it.eng.spagoLite.db.base.JEEBaseRowInterface;
import it.eng.spagoLite.db.base.row.BaseRow;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;
import org.eclipse.persistence.internal.indirection.DatabaseValueHolder;
import org.eclipse.persistence.internal.sessions.AbstractRecord;
import it.eng.parer.entity.DecVersioneWs;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.sql.Clob;
import java.sql.Types;
import java.sql.SQLException;
import javax.annotation.Generated;

/**
 * RowBean per la tabella Dec_Versione_Ws
 *
 */
public class DecVersioneWsRowBean extends BaseRow implements BaseRowInterface, JEEBaseRowInterface {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$TableBeanWriter",
     * comments = "This class was generated by OraTool", date = "Tuesday, 22 August 2023 13:05" )
     */

    public static DecVersioneWsTableDescriptor TABLE_DESCRIPTOR = new DecVersioneWsTableDescriptor();

    public DecVersioneWsRowBean() {
	super();
    }

    public TableDescriptor getTableDescriptor() {
	return TABLE_DESCRIPTOR;
    }

    // getter e setter
    public BigDecimal getIdVersioneWs() {
	return getBigDecimal("id_versione_ws");
    }

    public void setIdVersioneWs(BigDecimal id_versione_ws) {
	setObject("id_versione_ws", id_versione_ws);
    }

    public String getTiWs() {
	return getString("ti_ws");
    }

    public void setTiWs(String ti_ws) {
	setObject("ti_ws", ti_ws);
    }

    public String getCdVersioneWs() {
	return getString("cd_versione_ws");
    }

    public void setCdVersioneWs(String cd_versione_ws) {
	setObject("cd_versione_ws", cd_versione_ws);
    }

    @Override
    public void entityToRowBean(Object obj) {
	DecVersioneWs entity = (DecVersioneWs) obj;
	AbstractRecord ar;
	this.setIdVersioneWs(entity.getIdVersioneWs());
	this.setTiWs(entity.getTiWs());
	this.setCdVersioneWs(entity.getCdVersioneWs());
    }

    @Override
    public DecVersioneWs rowBeanToEntity() {
	DecVersioneWs entity = new DecVersioneWs();
	entity.setIdVersioneWs(this.getIdVersioneWs());
	entity.setTiWs(this.getTiWs());
	entity.setCdVersioneWs(this.getCdVersioneWs());
	return entity;
    }

    // gestione della paginazione
    public void setRownum(Integer rownum) {
	setObject("rownum", rownum);
    }

    public Integer getRownum() {
	return Integer.parseInt(getObject("rownum").toString());
    }

    public void setRnum(Integer rnum) {
	setObject("rnum", rnum);
    }

    public Integer getRnum() {
	return Integer.parseInt(getObject("rnum").toString());
    }

    public void setNumrecords(Integer numRecords) {
	setObject("numrecords", numRecords);
    }

    public Integer getNumrecords() {
	return Integer.parseInt(getObject("numrecords").toString());
    }

}
