/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna
 * <p/>
 * This program is free software: you can redistribute it and/or modify it under the terms of
 * the GNU Affero General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 * <p/>
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 * <p/>
 * You should have received a copy of the GNU Affero General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

package it.eng.parer.slite.gen.viewbean;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * @author Sloth
 *
 *         Bean per la tabella Dec_V_Ric_Criterio_Raggr
 *
 */
public class DecVRicCriterioRaggrTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$ViewBeanWriter", comments =
     * "This class was generated by OraTool", date = "Friday, 4 August 2017 10:09" )
     */

    public static final String SELECT = "Select * from Dec_V_Ric_Criterio_Raggr /**/";
    public static final String TABLE_NAME = "Dec_V_Ric_Criterio_Raggr";
    public static final String COL_ID_AMBIENTE = "id_ambiente";
    public static final String COL_NM_AMBIENTE = "nm_ambiente";
    public static final String COL_ID_ENTE = "id_ente";
    public static final String COL_NM_ENTE = "nm_ente";
    public static final String COL_ID_STRUT = "id_strut";
    public static final String COL_NM_STRUT = "nm_strut";
    public static final String COL_ID_CRITERIO_RAGGR = "id_criterio_raggr";
    public static final String COL_NM_CRITERIO_RAGGR = "nm_criterio_raggr";
    public static final String COL_ID_TIPO_UNITA_DOC = "id_tipo_unita_doc";
    public static final String COL_NM_TIPO_UNITA_DOC = "nm_tipo_unita_doc";
    public static final String COL_ID_REGISTRO_UNITA_DOC = "id_registro_unita_doc";
    public static final String COL_CD_REGISTRO_UNITA_DOC = "cd_registro_unita_doc";
    public static final String COL_ID_REGISTRO_RANGE_UNITA_DOC = "id_registro_range_unita_doc";
    public static final String COL_CD_REGISTRO_RANGE_UNITA_DOC = "cd_registro_range_unita_doc";
    public static final String COL_ID_TIPO_DOC = "id_tipo_doc";
    public static final String COL_NM_TIPO_DOC = "nm_tipo_doc";
    public static final String COL_AA_KEY_UNITA_DOC = "aa_key_unita_doc";
    public static final String COL_AA_KEY_UNITA_DOC_DA = "aa_key_unita_doc_da";
    public static final String COL_AA_KEY_UNITA_DOC_A = "aa_key_unita_doc_a";
    public static final String COL_NI_MAX_COMP = "ni_max_comp";
    public static final String COL_DS_SCAD_CHIUS = "ds_scad_chius";
    public static final String COL_DT_ISTITUZ = "dt_istituz";
    public static final String COL_DT_SOPPRES = "dt_soppres";
    public static final String COL_FL_CRITERIO_RAGGR_STANDARD = "fl_criterio_raggr_standard";
    public static final String COL_FL_CRITERIO_RAGGR_FISC = "fl_criterio_raggr_fisc";
    public static final String COL_TI_GEST_ELENCO_CRITERIO = "ti_gest_elenco_criterio";
    public static final String COL_TI_VALID_ELENCO = "ti_valid_elenco";
    public static final String COL_TI_MOD_VALID_ELENCO = "ti_mod_valid_elenco";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
        map.put(COL_ID_AMBIENTE, new ColumnDescriptor(COL_ID_AMBIENTE, Types.DECIMAL, 22, true));
        map.put(COL_NM_AMBIENTE, new ColumnDescriptor(COL_NM_AMBIENTE, Types.VARCHAR, 100, true));
        map.put(COL_ID_ENTE, new ColumnDescriptor(COL_ID_ENTE, Types.DECIMAL, 22, true));
        map.put(COL_NM_ENTE, new ColumnDescriptor(COL_NM_ENTE, Types.VARCHAR, 100, true));
        map.put(COL_ID_STRUT, new ColumnDescriptor(COL_ID_STRUT, Types.DECIMAL, 22, true));
        map.put(COL_NM_STRUT, new ColumnDescriptor(COL_NM_STRUT, Types.VARCHAR, 100, true));
        map.put(COL_ID_CRITERIO_RAGGR, new ColumnDescriptor(COL_ID_CRITERIO_RAGGR, Types.DECIMAL, 22, true));
        map.put(COL_NM_CRITERIO_RAGGR, new ColumnDescriptor(COL_NM_CRITERIO_RAGGR, Types.VARCHAR, 100, true));
        map.put(COL_ID_TIPO_UNITA_DOC, new ColumnDescriptor(COL_ID_TIPO_UNITA_DOC, Types.DECIMAL, 22, true));
        map.put(COL_NM_TIPO_UNITA_DOC, new ColumnDescriptor(COL_NM_TIPO_UNITA_DOC, Types.VARCHAR, 100, true));
        map.put(COL_ID_REGISTRO_UNITA_DOC, new ColumnDescriptor(COL_ID_REGISTRO_UNITA_DOC, Types.DECIMAL, 22, true));
        map.put(COL_CD_REGISTRO_UNITA_DOC, new ColumnDescriptor(COL_CD_REGISTRO_UNITA_DOC, Types.VARCHAR, 100, true));
        map.put(COL_ID_REGISTRO_RANGE_UNITA_DOC,
                new ColumnDescriptor(COL_ID_REGISTRO_RANGE_UNITA_DOC, Types.DECIMAL, 22, true));
        map.put(COL_CD_REGISTRO_RANGE_UNITA_DOC,
                new ColumnDescriptor(COL_CD_REGISTRO_RANGE_UNITA_DOC, Types.VARCHAR, 100, true));
        map.put(COL_ID_TIPO_DOC, new ColumnDescriptor(COL_ID_TIPO_DOC, Types.DECIMAL, 22, true));
        map.put(COL_NM_TIPO_DOC, new ColumnDescriptor(COL_NM_TIPO_DOC, Types.VARCHAR, 100, true));
        map.put(COL_AA_KEY_UNITA_DOC, new ColumnDescriptor(COL_AA_KEY_UNITA_DOC, Types.DECIMAL, 22, true));
        map.put(COL_AA_KEY_UNITA_DOC_DA, new ColumnDescriptor(COL_AA_KEY_UNITA_DOC_DA, Types.DECIMAL, 22, true));
        map.put(COL_AA_KEY_UNITA_DOC_A, new ColumnDescriptor(COL_AA_KEY_UNITA_DOC_A, Types.DECIMAL, 22, true));
        map.put(COL_NI_MAX_COMP, new ColumnDescriptor(COL_NI_MAX_COMP, Types.DECIMAL, 22, true));
        map.put(COL_DS_SCAD_CHIUS, new ColumnDescriptor(COL_DS_SCAD_CHIUS, Types.VARCHAR, 61, true));
        map.put(COL_DT_ISTITUZ, new ColumnDescriptor(COL_DT_ISTITUZ, Types.TIMESTAMP, 7, true));
        map.put(COL_DT_SOPPRES, new ColumnDescriptor(COL_DT_SOPPRES, Types.TIMESTAMP, 7, true));
        map.put(COL_FL_CRITERIO_RAGGR_STANDARD,
                new ColumnDescriptor(COL_FL_CRITERIO_RAGGR_STANDARD, Types.VARCHAR, 1, true));
        map.put(COL_FL_CRITERIO_RAGGR_FISC, new ColumnDescriptor(COL_FL_CRITERIO_RAGGR_FISC, Types.VARCHAR, 1, true));
        map.put(COL_TI_GEST_ELENCO_CRITERIO,
                new ColumnDescriptor(COL_TI_GEST_ELENCO_CRITERIO, Types.VARCHAR, 30, true));
        map.put(COL_TI_VALID_ELENCO, new ColumnDescriptor(COL_TI_VALID_ELENCO, Types.VARCHAR, 30, true));
        map.put(COL_TI_MOD_VALID_ELENCO, new ColumnDescriptor(COL_TI_MOD_VALID_ELENCO, Types.VARCHAR, 30, true));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
        return map;
    }

    public String getTableName() {
        return TABLE_NAME;
    }

    public String getStatement() {
        return SELECT;
    }

}
