/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna <p/> This program is free software: you can
 * redistribute it and/or modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License, or (at your option)
 * any later version. <p/> This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. <p/> You should
 * have received a copy of the GNU Affero General Public License along with this program. If not,
 * see <https://www.gnu.org/licenses/>.
 */

package it.eng.parer.slite.gen.viewbean;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * @author Sloth
 *
 *         Bean per la tabella Aro_V_Lis_Upd_Ko_Risolti
 *
 */
public class AroVLisUpdKoRisoltiTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$ViewBeanWriter",
     * comments = "This class was generated by OraTool", date = "Friday, 21 December 2018 09:49" )
     */

    public static final String SELECT = "Select * from Aro_V_Lis_Upd_Ko_Risolti /**/";
    public static final String TABLE_NAME = "Aro_V_Lis_Upd_Ko_Risolti";
    public static final String COL_ID_SES_UPD_UNITA_DOC_KO = "id_ses_upd_unita_doc_ko";
    public static final String COL_ID_UPD_UNITA_DOC = "id_upd_unita_doc";
    public static final String COL_TS_INI_SES = "ts_ini_ses";
    public static final String COL_ID_ERR_SACER_PRINC = "id_err_sacer_princ";
    public static final String COL_CD_ERR_PRINC = "cd_err_princ";
    public static final String COL_DS_ERR_PRINC = "ds_err_princ";
    public static final String COL_ID_TIPO_UNITA_DOC = "id_tipo_unita_doc";
    public static final String COL_NM_TIPO_UNITA_DOC = "nm_tipo_unita_doc";
    public static final String COL_ID_REGISTRO_UNITA_DOC = "id_registro_unita_doc";
    public static final String COL_CD_REGISTRO_UNITA_DOC = "cd_registro_unita_doc";
    public static final String COL_ID_TIPO_DOC_PRINC = "id_tipo_doc_princ";
    public static final String COL_NM_TIPO_DOC_PRINC = "nm_tipo_doc_princ";
    public static final String COL_CD_VERSIONE_WS = "cd_versione_ws";
    public static final String COL_ID_USER_IAM = "id_user_iam";
    public static final String COL_NM_USERID = "nm_userid";
    public static final String COL_ID_CONTROLLO_WS_PRINC = "id_controllo_ws_princ";
    public static final String COL_CD_CONTROLLO_WS = "cd_controllo_ws";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
	map.put(COL_ID_SES_UPD_UNITA_DOC_KO,
		new ColumnDescriptor(COL_ID_SES_UPD_UNITA_DOC_KO, Types.DECIMAL, 22, true));
	map.put(COL_ID_UPD_UNITA_DOC,
		new ColumnDescriptor(COL_ID_UPD_UNITA_DOC, Types.DECIMAL, 22, true));
	map.put(COL_TS_INI_SES, new ColumnDescriptor(COL_TS_INI_SES, Types.TIMESTAMP, 11, true));
	map.put(COL_ID_ERR_SACER_PRINC,
		new ColumnDescriptor(COL_ID_ERR_SACER_PRINC, Types.DECIMAL, 22, true));
	map.put(COL_CD_ERR_PRINC, new ColumnDescriptor(COL_CD_ERR_PRINC, Types.VARCHAR, 100, true));
	map.put(COL_DS_ERR_PRINC,
		new ColumnDescriptor(COL_DS_ERR_PRINC, Types.VARCHAR, 1024, true));
	map.put(COL_ID_TIPO_UNITA_DOC,
		new ColumnDescriptor(COL_ID_TIPO_UNITA_DOC, Types.DECIMAL, 22, true));
	map.put(COL_NM_TIPO_UNITA_DOC,
		new ColumnDescriptor(COL_NM_TIPO_UNITA_DOC, Types.VARCHAR, 100, true));
	map.put(COL_ID_REGISTRO_UNITA_DOC,
		new ColumnDescriptor(COL_ID_REGISTRO_UNITA_DOC, Types.DECIMAL, 22, true));
	map.put(COL_CD_REGISTRO_UNITA_DOC,
		new ColumnDescriptor(COL_CD_REGISTRO_UNITA_DOC, Types.VARCHAR, 100, true));
	map.put(COL_ID_TIPO_DOC_PRINC,
		new ColumnDescriptor(COL_ID_TIPO_DOC_PRINC, Types.DECIMAL, 22, true));
	map.put(COL_NM_TIPO_DOC_PRINC,
		new ColumnDescriptor(COL_NM_TIPO_DOC_PRINC, Types.VARCHAR, 100, true));
	map.put(COL_CD_VERSIONE_WS,
		new ColumnDescriptor(COL_CD_VERSIONE_WS, Types.VARCHAR, 100, true));
	map.put(COL_ID_USER_IAM, new ColumnDescriptor(COL_ID_USER_IAM, Types.DECIMAL, 22, true));
	map.put(COL_NM_USERID, new ColumnDescriptor(COL_NM_USERID, Types.VARCHAR, 100, true));
	map.put(COL_ID_CONTROLLO_WS_PRINC,
		new ColumnDescriptor(COL_ID_CONTROLLO_WS_PRINC, Types.DECIMAL, 22, true));
	map.put(COL_CD_CONTROLLO_WS,
		new ColumnDescriptor(COL_CD_CONTROLLO_WS, Types.VARCHAR, 100, true));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
	return map;
    }

    public String getTableName() {
	return TABLE_NAME;
    }

    public String getStatement() {
	return SELECT;
    }

}
