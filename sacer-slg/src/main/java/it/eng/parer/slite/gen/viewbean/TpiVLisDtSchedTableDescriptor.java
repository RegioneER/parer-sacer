package it.eng.parer.slite.gen.viewbean;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.annotation.Generated;

/**
 * @author Sloth
 *
 *         Bean per la tabella Tpi_V_Lis_Dt_Sched
 *
 */
public class TpiVLisDtSchedTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$ViewBeanWriter", comments =
     * "This class was generated by OraTool", date = "Tuesday, 18 March 2014 10:08" )
     */

    public static final String SELECT = "Select * from Tpi_V_Lis_Dt_Sched /**/";
    public static final String TABLE_NAME = "Tpi_V_Lis_Dt_Sched";
    public static final String COL_ID_DT_SCHED = "id_dt_sched";
    public static final String COL_DT_SCHED = "dt_sched";
    public static final String COL_TI_STATO_DT_SCHED = "ti_stato_dt_sched";
    public static final String COL_FL_PRESENZA_SECONDARIO = "fl_presenza_secondario";
    public static final String COL_FL_MIGRAZ_IN_CORSO = "fl_migraz_in_corso";
    public static final String COL_FL_ANOMALIA_ARK_PRIM = "fl_anomalia_ark_prim";
    public static final String COL_FL_ANOMALIA_COPIA_PRIM = "fl_anomalia_copia_prim";
    public static final String COL_FL_ANOMALIA_BACKUP_PRIM = "fl_anomalia_backup_prim";
    public static final String COL_FL_ANOMALIA_MIGRATE_PRIM = "fl_anomalia_migrate_prim";
    public static final String COL_FL_ANOMALIA_RI_ARK_PRIM = "fl_anomalia_ri_ark_prim";
    public static final String COL_FL_ANOMALIA_ARK_SECOND = "fl_anomalia_ark_second";
    public static final String COL_FL_ANOMALIA_COPIA_SECOND = "fl_anomalia_copia_second";
    public static final String COL_FL_ANOMALIA_BACKUP_SECOND = "fl_anomalia_backup_second";
    public static final String COL_FL_ANOMALIA_MIGRATE_SECOND = "fl_anomalia_migrate_second";
    public static final String COL_FL_ANOMALIA_RI_ARK_SECOND = "fl_anomalia_ri_ark_second";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
        map.put(COL_ID_DT_SCHED, new ColumnDescriptor(COL_ID_DT_SCHED, Types.DECIMAL, 22, true));
        map.put(COL_DT_SCHED, new ColumnDescriptor(COL_DT_SCHED, Types.TIMESTAMP, 7, true));
        map.put(COL_TI_STATO_DT_SCHED, new ColumnDescriptor(COL_TI_STATO_DT_SCHED, Types.VARCHAR, 20, true));
        map.put(COL_FL_PRESENZA_SECONDARIO, new ColumnDescriptor(COL_FL_PRESENZA_SECONDARIO, Types.VARCHAR, 1, true));
        map.put(COL_FL_MIGRAZ_IN_CORSO, new ColumnDescriptor(COL_FL_MIGRAZ_IN_CORSO, Types.VARCHAR, 1, true));
        map.put(COL_FL_ANOMALIA_ARK_PRIM, new ColumnDescriptor(COL_FL_ANOMALIA_ARK_PRIM, Types.VARCHAR, 1, true));
        map.put(COL_FL_ANOMALIA_COPIA_PRIM, new ColumnDescriptor(COL_FL_ANOMALIA_COPIA_PRIM, Types.VARCHAR, 1, true));
        map.put(COL_FL_ANOMALIA_BACKUP_PRIM, new ColumnDescriptor(COL_FL_ANOMALIA_BACKUP_PRIM, Types.VARCHAR, 1, true));
        map.put(COL_FL_ANOMALIA_MIGRATE_PRIM,
                new ColumnDescriptor(COL_FL_ANOMALIA_MIGRATE_PRIM, Types.VARCHAR, 1, true));
        map.put(COL_FL_ANOMALIA_RI_ARK_PRIM, new ColumnDescriptor(COL_FL_ANOMALIA_RI_ARK_PRIM, Types.VARCHAR, 1, true));
        map.put(COL_FL_ANOMALIA_ARK_SECOND, new ColumnDescriptor(COL_FL_ANOMALIA_ARK_SECOND, Types.VARCHAR, 1, true));
        map.put(COL_FL_ANOMALIA_COPIA_SECOND,
                new ColumnDescriptor(COL_FL_ANOMALIA_COPIA_SECOND, Types.VARCHAR, 1, true));
        map.put(COL_FL_ANOMALIA_BACKUP_SECOND,
                new ColumnDescriptor(COL_FL_ANOMALIA_BACKUP_SECOND, Types.VARCHAR, 1, true));
        map.put(COL_FL_ANOMALIA_MIGRATE_SECOND,
                new ColumnDescriptor(COL_FL_ANOMALIA_MIGRATE_SECOND, Types.VARCHAR, 1, true));
        map.put(COL_FL_ANOMALIA_RI_ARK_SECOND,
                new ColumnDescriptor(COL_FL_ANOMALIA_RI_ARK_SECOND, Types.VARCHAR, 1, true));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
        return map;
    }

    public String getTableName() {
        return TABLE_NAME;
    }

    public String getStatement() {
        return SELECT;
    }

}
