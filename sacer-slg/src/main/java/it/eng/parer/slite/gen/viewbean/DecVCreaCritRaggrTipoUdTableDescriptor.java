/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna <p/> This program is free software: you can
 * redistribute it and/or modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License, or (at your option)
 * any later version. <p/> This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. <p/> You should
 * have received a copy of the GNU Affero General Public License along with this program. If not,
 * see <https://www.gnu.org/licenses/>.
 */

package it.eng.parer.slite.gen.viewbean;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * @author Sloth
 *
 *         Bean per la tabella Dec_V_Crea_Crit_Raggr_Tipo_Ud
 *
 */
public class DecVCreaCritRaggrTipoUdTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$ViewBeanWriter",
     * comments = "This class was generated by OraTool", date = "Monday, 16 February 2015 11:39" )
     */

    public static final String SELECT = "Select * from Dec_V_Crea_Crit_Raggr_Tipo_Ud /**/";
    public static final String TABLE_NAME = "Dec_V_Crea_Crit_Raggr_Tipo_Ud";
    public static final String COL_ID_TIPO_UNITA_DOC = "id_tipo_unita_doc";
    public static final String COL_ID_STRUT = "id_strut";
    public static final String COL_NM_CRITERIO_RAGGR = "nm_criterio_raggr";
    public static final String COL_DS_CRITERIO_RAGGR = "ds_criterio_raggr";
    public static final String COL_NI_MAX_COMP = "ni_max_comp";
    public static final String COL_TI_TEMPO_SCAD_CHIUS = "ti_tempo_scad_chius";
    public static final String COL_NI_TEMPO_SCAD_CHIUS = "ni_tempo_scad_chius";
    public static final String COL_TI_TEMPO_SCAD_CHIUS_FIRME = "ti_tempo_scad_chius_firme";
    public static final String COL_NI_TEMPO_SCAD_CHIUS_FIRME = "ni_tempo_scad_chius_firme";
    public static final String COL_FL_FILTRO_TIPO_UNITA_DOC = "fl_filtro_tipo_unita_doc";
    public static final String COL_FL_FILTRO_REGISTRO_KEY = "fl_filtro_registro_key";
    public static final String COL_FL_FILTRO_RANGE_REGISTRO_KEY = "fl_filtro_range_registro_key";
    public static final String COL_FL_FILTRO_TI_ESITO_VERIF_FIRME = "fl_filtro_ti_esito_verif_firme";
    public static final String COL_FL_FILTRO_TIPO_DOC = "fl_filtro_tipo_doc";
    public static final String COL_FL_FILTRO_SISTEMA_MIGRAZ = "fl_filtro_sistema_migraz";
    public static final String COL_TI_VALID_ELENCO = "ti_valid_elenco";
    public static final String COL_TI_MOD_VALID_ELENCO = "ti_mod_valid_elenco";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
	map.put(COL_ID_TIPO_UNITA_DOC,
		new ColumnDescriptor(COL_ID_TIPO_UNITA_DOC, Types.DECIMAL, 22, true));
	map.put(COL_ID_STRUT, new ColumnDescriptor(COL_ID_STRUT, Types.DECIMAL, 22, true));
	map.put(COL_NM_CRITERIO_RAGGR,
		new ColumnDescriptor(COL_NM_CRITERIO_RAGGR, Types.VARCHAR, 233, true));
	map.put(COL_DS_CRITERIO_RAGGR,
		new ColumnDescriptor(COL_DS_CRITERIO_RAGGR, Types.VARCHAR, 386, true));
	map.put(COL_NI_MAX_COMP, new ColumnDescriptor(COL_NI_MAX_COMP, Types.DECIMAL, 22, true));
	map.put(COL_TI_TEMPO_SCAD_CHIUS,
		new ColumnDescriptor(COL_TI_TEMPO_SCAD_CHIUS, Types.VARCHAR, 6, true));
	map.put(COL_NI_TEMPO_SCAD_CHIUS,
		new ColumnDescriptor(COL_NI_TEMPO_SCAD_CHIUS, Types.DECIMAL, 22, true));
	map.put(COL_TI_TEMPO_SCAD_CHIUS_FIRME,
		new ColumnDescriptor(COL_TI_TEMPO_SCAD_CHIUS_FIRME, Types.VARCHAR, 6, true));
	map.put(COL_NI_TEMPO_SCAD_CHIUS_FIRME,
		new ColumnDescriptor(COL_NI_TEMPO_SCAD_CHIUS_FIRME, Types.DECIMAL, 22, true));
	map.put(COL_FL_FILTRO_TIPO_UNITA_DOC,
		new ColumnDescriptor(COL_FL_FILTRO_TIPO_UNITA_DOC, Types.VARCHAR, 1, true));
	map.put(COL_FL_FILTRO_REGISTRO_KEY,
		new ColumnDescriptor(COL_FL_FILTRO_REGISTRO_KEY, Types.VARCHAR, 1, true));
	map.put(COL_FL_FILTRO_RANGE_REGISTRO_KEY,
		new ColumnDescriptor(COL_FL_FILTRO_RANGE_REGISTRO_KEY, Types.VARCHAR, 1, true));
	map.put(COL_FL_FILTRO_TI_ESITO_VERIF_FIRME,
		new ColumnDescriptor(COL_FL_FILTRO_TI_ESITO_VERIF_FIRME, Types.VARCHAR, 1, true));
	map.put(COL_FL_FILTRO_TIPO_DOC,
		new ColumnDescriptor(COL_FL_FILTRO_TIPO_DOC, Types.VARCHAR, 1, true));
	map.put(COL_FL_FILTRO_SISTEMA_MIGRAZ,
		new ColumnDescriptor(COL_FL_FILTRO_SISTEMA_MIGRAZ, Types.VARCHAR, 1, true));
	map.put(COL_TI_VALID_ELENCO,
		new ColumnDescriptor(COL_TI_VALID_ELENCO, Types.VARCHAR, 8, true));
	map.put(COL_TI_MOD_VALID_ELENCO,
		new ColumnDescriptor(COL_TI_MOD_VALID_ELENCO, Types.VARCHAR, 10, true));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
	return map;
    }

    public String getTableName() {
	return TABLE_NAME;
    }

    public String getStatement() {
	return SELECT;
    }

}
