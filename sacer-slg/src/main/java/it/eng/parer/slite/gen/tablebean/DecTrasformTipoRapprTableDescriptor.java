/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna <p/> This program is free software: you can
 * redistribute it and/or modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License, or (at your option)
 * any later version. <p/> This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. <p/> You should
 * have received a copy of the GNU Affero General Public License along with this program. If not,
 * see <https://www.gnu.org/licenses/>.
 */

package it.eng.parer.slite.gen.tablebean;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * @author Sloth
 *
 *         Bean per la tabella Dec_Trasform_Tipo_Rappr
 *
 */
public class DecTrasformTipoRapprTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$TableBeanWriter",
     * comments = "This class was generated by OraTool", date = "Tuesday, 7 October 2014 15:18" )
     */

    public static final String SELECT = "Select * from Dec_Trasform_Tipo_Rappr /**/";
    public static final String TABLE_NAME = "Dec_Trasform_Tipo_Rappr";
    public static final String COL_ID_TRASFORM_TIPO_RAPPR = "id_trasform_tipo_rappr";
    public static final String COL_ID_TIPO_RAPPR_COMP = "id_tipo_rappr_comp";
    public static final String COL_DS_HASH_FILE_TRASFORM = "ds_hash_file_trasform";
    public static final String COL_BL_FILE_TRASFORM = "bl_file_trasform";
    public static final String COL_TI_STATO_FILE_TRASFORM = "ti_stato_file_trasform";
    public static final String COL_NM_TRASFORM = "nm_trasform";
    public static final String COL_CD_VERSIONE_TRASFORM = "cd_versione_trasform";
    public static final String COL_DT_INS_TRASFORM = "dt_ins_trasform";
    public static final String COL_DT_LAST_MOD_TRASFORM = "dt_last_mod_trasform";
    public static final String COL_ID_COMP_DOC_TEST = "id_comp_doc_test";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
	map.put(COL_ID_TRASFORM_TIPO_RAPPR,
		new ColumnDescriptor(COL_ID_TRASFORM_TIPO_RAPPR, Types.DECIMAL, 22, true));
	map.put(COL_ID_TIPO_RAPPR_COMP,
		new ColumnDescriptor(COL_ID_TIPO_RAPPR_COMP, Types.DECIMAL, 22, false));
	map.put(COL_DS_HASH_FILE_TRASFORM,
		new ColumnDescriptor(COL_DS_HASH_FILE_TRASFORM, Types.VARCHAR, 254, false));
	map.put(COL_BL_FILE_TRASFORM,
		new ColumnDescriptor(COL_BL_FILE_TRASFORM, Types.CLOB, 4000, false));
	map.put(COL_TI_STATO_FILE_TRASFORM,
		new ColumnDescriptor(COL_TI_STATO_FILE_TRASFORM, Types.VARCHAR, 20, false));
	map.put(COL_NM_TRASFORM, new ColumnDescriptor(COL_NM_TRASFORM, Types.VARCHAR, 100, false));
	map.put(COL_CD_VERSIONE_TRASFORM,
		new ColumnDescriptor(COL_CD_VERSIONE_TRASFORM, Types.VARCHAR, 100, false));
	map.put(COL_DT_INS_TRASFORM,
		new ColumnDescriptor(COL_DT_INS_TRASFORM, Types.TIMESTAMP, 7, false));
	map.put(COL_DT_LAST_MOD_TRASFORM,
		new ColumnDescriptor(COL_DT_LAST_MOD_TRASFORM, Types.TIMESTAMP, 7, false));
	map.put(COL_ID_COMP_DOC_TEST,
		new ColumnDescriptor(COL_ID_COMP_DOC_TEST, Types.DECIMAL, 22, false));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
	return map;
    }

    public String getTableName() {
	return TABLE_NAME;
    }

    public String getStatement() {
	return SELECT;
    }

}
