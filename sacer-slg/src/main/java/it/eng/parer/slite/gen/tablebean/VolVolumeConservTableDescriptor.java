package it.eng.parer.slite.gen.tablebean;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.annotation.Generated;

/**
 * @author Sloth
 *
 *         Bean per la tabella Vol_Volume_Conserv
 *
 */
public class VolVolumeConservTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$TableBeanWriter", comments =
     * "This class was generated by OraTool", date = "Tuesday, 11 March 2014 18:25" )
     */

    public static final String SELECT = "Select * from Vol_Volume_Conserv /**/";
    public static final String TABLE_NAME = "Vol_Volume_Conserv";
    public static final String COL_ID_VOLUME_CONSERV = "id_volume_conserv";
    public static final String COL_ID_STRUT = "id_strut";
    public static final String COL_NM_VOLUME_CONSERV = "nm_volume_conserv";
    public static final String COL_DS_VOLUME_CONSERV = "ds_volume_conserv";
    public static final String COL_TI_STATO_VOLUME_CONSERV = "ti_stato_volume_conserv";
    public static final String COL_ID_CRITERIO_RAGGR = "id_criterio_raggr";
    public static final String COL_DT_CREAZIONE = "dt_creazione";
    public static final String COL_NI_MAX_UNITA_DOC = "ni_max_unita_doc";
    public static final String COL_NI_MAX_COMP = "ni_max_comp";
    public static final String COL_TI_SCAD_CHIUS_VOLUME = "ti_scad_chius_volume";
    public static final String COL_TI_TEMPO_SCAD_CHIUS = "ti_tempo_scad_chius";
    public static final String COL_NI_TEMPO_SCAD_CHIUS = "ni_tempo_scad_chius";
    public static final String COL_TI_TEMPO_SCAD_CHIUS_FIRME = "ti_tempo_scad_chius_firme";
    public static final String COL_NI_TEMPO_SCAD_CHIUS_FIRME = "ni_tempo_scad_chius_firme";
    public static final String COL_ID_USER_CREAZIONE = "id_user_creazione";
    public static final String COL_NI_UNITA_DOC_VOLUME = "ni_unita_doc_volume";
    public static final String COL_NI_COMP_VOLUME = "ni_comp_volume";
    public static final String COL_NI_KB_SIZE = "ni_kb_size";
    public static final String COL_NT_INDICE_VOLUME = "nt_indice_volume";
    public static final String COL_TI_PRESENZA_FIRME = "ti_presenza_firme";
    public static final String COL_TI_VAL_FIRME = "ti_val_firme";
    public static final String COL_DT_SCAD_CHIUS = "dt_scad_chius";
    public static final String COL_DT_CHIUS = "dt_chius";
    public static final String COL_DL_MOTIVO_CHIUS = "dl_motivo_chius";
    public static final String COL_DS_ALGO_HASH = "ds_algo_hash";
    public static final String COL_CD_ENCODING_HASH = "cd_encoding_hash";
    public static final String COL_DS_HASH_FILE_INDICE = "ds_hash_file_indice";
    public static final String COL_TM_MARCA_INDICE = "tm_marca_indice";
    public static final String COL_DS_HASH_FILE_MARCA = "ds_hash_file_marca";
    public static final String COL_DT_FIRMA_MARCA = "dt_firma_marca";
    public static final String COL_ID_USER_FIRMA_MARCA = "id_user_firma_marca";
    public static final String COL_DS_FIRMA_MARCA_BASE64 = "ds_firma_marca_base64";
    public static final String COL_DS_HASH_FILE_FIRMA = "ds_hash_file_firma";
    public static final String COL_TM_MARCA_FIRMA = "tm_marca_firma";
    public static final String COL_CD_VERSIONE_INDICE = "cd_versione_indice";
    public static final String COL_NT_VOLUME_CHIUSO = "nt_volume_chiuso";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
        map.put(COL_ID_VOLUME_CONSERV, new ColumnDescriptor(COL_ID_VOLUME_CONSERV, Types.DECIMAL, 22, true));
        map.put(COL_ID_STRUT, new ColumnDescriptor(COL_ID_STRUT, Types.DECIMAL, 22, false));
        map.put(COL_NM_VOLUME_CONSERV, new ColumnDescriptor(COL_NM_VOLUME_CONSERV, Types.VARCHAR, 100, false));
        map.put(COL_DS_VOLUME_CONSERV, new ColumnDescriptor(COL_DS_VOLUME_CONSERV, Types.VARCHAR, 254, false));
        map.put(COL_TI_STATO_VOLUME_CONSERV,
                new ColumnDescriptor(COL_TI_STATO_VOLUME_CONSERV, Types.VARCHAR, 20, false));
        map.put(COL_ID_CRITERIO_RAGGR, new ColumnDescriptor(COL_ID_CRITERIO_RAGGR, Types.DECIMAL, 22, false));
        map.put(COL_DT_CREAZIONE, new ColumnDescriptor(COL_DT_CREAZIONE, Types.TIMESTAMP, 7, false));
        map.put(COL_NI_MAX_UNITA_DOC, new ColumnDescriptor(COL_NI_MAX_UNITA_DOC, Types.DECIMAL, 22, false));
        map.put(COL_NI_MAX_COMP, new ColumnDescriptor(COL_NI_MAX_COMP, Types.DECIMAL, 22, false));
        map.put(COL_TI_SCAD_CHIUS_VOLUME, new ColumnDescriptor(COL_TI_SCAD_CHIUS_VOLUME, Types.VARCHAR, 20, false));
        map.put(COL_TI_TEMPO_SCAD_CHIUS, new ColumnDescriptor(COL_TI_TEMPO_SCAD_CHIUS, Types.VARCHAR, 20, false));
        map.put(COL_NI_TEMPO_SCAD_CHIUS, new ColumnDescriptor(COL_NI_TEMPO_SCAD_CHIUS, Types.DECIMAL, 22, false));
        map.put(COL_TI_TEMPO_SCAD_CHIUS_FIRME,
                new ColumnDescriptor(COL_TI_TEMPO_SCAD_CHIUS_FIRME, Types.VARCHAR, 20, false));
        map.put(COL_NI_TEMPO_SCAD_CHIUS_FIRME,
                new ColumnDescriptor(COL_NI_TEMPO_SCAD_CHIUS_FIRME, Types.DECIMAL, 22, false));
        map.put(COL_ID_USER_CREAZIONE, new ColumnDescriptor(COL_ID_USER_CREAZIONE, Types.DECIMAL, 22, false));
        map.put(COL_NI_UNITA_DOC_VOLUME, new ColumnDescriptor(COL_NI_UNITA_DOC_VOLUME, Types.DECIMAL, 22, false));
        map.put(COL_NI_COMP_VOLUME, new ColumnDescriptor(COL_NI_COMP_VOLUME, Types.DECIMAL, 22, false));
        map.put(COL_NI_KB_SIZE, new ColumnDescriptor(COL_NI_KB_SIZE, Types.DECIMAL, 22, false));
        map.put(COL_NT_INDICE_VOLUME, new ColumnDescriptor(COL_NT_INDICE_VOLUME, Types.VARCHAR, 2000, false));
        map.put(COL_TI_PRESENZA_FIRME, new ColumnDescriptor(COL_TI_PRESENZA_FIRME, Types.VARCHAR, 20, false));
        map.put(COL_TI_VAL_FIRME, new ColumnDescriptor(COL_TI_VAL_FIRME, Types.VARCHAR, 20, false));
        map.put(COL_DT_SCAD_CHIUS, new ColumnDescriptor(COL_DT_SCAD_CHIUS, Types.TIMESTAMP, 7, false));
        map.put(COL_DT_CHIUS, new ColumnDescriptor(COL_DT_CHIUS, Types.TIMESTAMP, 7, false));
        map.put(COL_DL_MOTIVO_CHIUS, new ColumnDescriptor(COL_DL_MOTIVO_CHIUS, Types.VARCHAR, 1024, false));
        map.put(COL_DS_ALGO_HASH, new ColumnDescriptor(COL_DS_ALGO_HASH, Types.VARCHAR, 254, false));
        map.put(COL_CD_ENCODING_HASH, new ColumnDescriptor(COL_CD_ENCODING_HASH, Types.VARCHAR, 20, false));
        map.put(COL_DS_HASH_FILE_INDICE, new ColumnDescriptor(COL_DS_HASH_FILE_INDICE, Types.VARCHAR, 254, false));
        map.put(COL_TM_MARCA_INDICE, new ColumnDescriptor(COL_TM_MARCA_INDICE, Types.TIMESTAMP, 7, false));
        map.put(COL_DS_HASH_FILE_MARCA, new ColumnDescriptor(COL_DS_HASH_FILE_MARCA, Types.VARCHAR, 254, false));
        map.put(COL_DT_FIRMA_MARCA, new ColumnDescriptor(COL_DT_FIRMA_MARCA, Types.TIMESTAMP, 7, false));
        map.put(COL_ID_USER_FIRMA_MARCA, new ColumnDescriptor(COL_ID_USER_FIRMA_MARCA, Types.DECIMAL, 22, false));
        map.put(COL_DS_FIRMA_MARCA_BASE64, new ColumnDescriptor(COL_DS_FIRMA_MARCA_BASE64, Types.VARCHAR, 1024, false));
        map.put(COL_DS_HASH_FILE_FIRMA, new ColumnDescriptor(COL_DS_HASH_FILE_FIRMA, Types.VARCHAR, 254, false));
        map.put(COL_TM_MARCA_FIRMA, new ColumnDescriptor(COL_TM_MARCA_FIRMA, Types.TIMESTAMP, 7, false));
        map.put(COL_CD_VERSIONE_INDICE, new ColumnDescriptor(COL_CD_VERSIONE_INDICE, Types.VARCHAR, 100, false));
        map.put(COL_NT_VOLUME_CHIUSO, new ColumnDescriptor(COL_NT_VOLUME_CHIUSO, Types.VARCHAR, 2000, false));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
        return map;
    }

    public String getTableName() {
        return TABLE_NAME;
    }

    public String getStatement() {
        return SELECT;
    }

}
