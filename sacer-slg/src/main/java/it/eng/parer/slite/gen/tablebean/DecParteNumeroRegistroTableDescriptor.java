/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna <p/> This program is free software: you can
 * redistribute it and/or modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License, or (at your option)
 * any later version. <p/> This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. <p/> You should
 * have received a copy of the GNU Affero General Public License along with this program. If not,
 * see <https://www.gnu.org/licenses/>.
 */

package it.eng.parer.slite.gen.tablebean;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * @author Sloth
 *
 *         Bean per la tabella Dec_Parte_Numero_Registro
 *
 */
public class DecParteNumeroRegistroTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$TableBeanWriter",
     * comments = "This class was generated by OraTool", date = "Tuesday, 26 May 2015 14:46" )
     */

    public static final String SELECT = "Select * from Dec_Parte_Numero_Registro /**/";
    public static final String TABLE_NAME = "Dec_Parte_Numero_Registro";
    public static final String COL_ID_PARTE_NUMERO_REGISTRO = "id_parte_numero_registro";
    public static final String COL_ID_AA_REGISTRO_UNITA_DOC = "id_aa_registro_unita_doc";
    public static final String COL_NM_PARTE_NUMERO_REGISTRO = "nm_parte_numero_registro";
    public static final String COL_NI_PARTE_NUMERO_REGISTRO = "ni_parte_numero_registro";
    public static final String COL_TI_CHAR_PARTE = "ti_char_parte";
    public static final String COL_NI_MIN_CHAR_PARTE = "ni_min_char_parte";
    public static final String COL_NI_MAX_CHAR_PARTE = "ni_max_char_parte";
    public static final String COL_TI_PAD_SX_PARTE = "ti_pad_sx_parte";
    public static final String COL_TI_CHAR_SEP = "ti_char_sep";
    public static final String COL_DL_VALORI_PARTE = "dl_valori_parte";
    public static final String COL_DS_PARTE_NUMERO_REGISTRO = "ds_parte_numero_registro";
    public static final String COL_TI_PARTE = "ti_parte";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
	map.put(COL_ID_PARTE_NUMERO_REGISTRO,
		new ColumnDescriptor(COL_ID_PARTE_NUMERO_REGISTRO, Types.DECIMAL, 22, true));
	map.put(COL_ID_AA_REGISTRO_UNITA_DOC,
		new ColumnDescriptor(COL_ID_AA_REGISTRO_UNITA_DOC, Types.DECIMAL, 22, false));
	map.put(COL_NM_PARTE_NUMERO_REGISTRO,
		new ColumnDescriptor(COL_NM_PARTE_NUMERO_REGISTRO, Types.VARCHAR, 100, false));
	map.put(COL_NI_PARTE_NUMERO_REGISTRO,
		new ColumnDescriptor(COL_NI_PARTE_NUMERO_REGISTRO, Types.DECIMAL, 22, false));
	map.put(COL_TI_CHAR_PARTE,
		new ColumnDescriptor(COL_TI_CHAR_PARTE, Types.VARCHAR, 30, false));
	map.put(COL_NI_MIN_CHAR_PARTE,
		new ColumnDescriptor(COL_NI_MIN_CHAR_PARTE, Types.DECIMAL, 22, false));
	map.put(COL_NI_MAX_CHAR_PARTE,
		new ColumnDescriptor(COL_NI_MAX_CHAR_PARTE, Types.DECIMAL, 22, false));
	map.put(COL_TI_PAD_SX_PARTE,
		new ColumnDescriptor(COL_TI_PAD_SX_PARTE, Types.VARCHAR, 30, false));
	map.put(COL_TI_CHAR_SEP, new ColumnDescriptor(COL_TI_CHAR_SEP, Types.VARCHAR, 1, false));
	map.put(COL_DL_VALORI_PARTE,
		new ColumnDescriptor(COL_DL_VALORI_PARTE, Types.VARCHAR, 1024, false));
	map.put(COL_DS_PARTE_NUMERO_REGISTRO,
		new ColumnDescriptor(COL_DS_PARTE_NUMERO_REGISTRO, Types.VARCHAR, 254, false));
	map.put(COL_TI_PARTE, new ColumnDescriptor(COL_TI_PARTE, Types.VARCHAR, 20, false));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
	return map;
    }

    public String getTableName() {
	return TABLE_NAME;
    }

    public String getStatement() {
	return SELECT;
    }

}
